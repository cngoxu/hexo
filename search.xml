<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker多容器编排实战：基于Ghost博客系统的完整部署方案</title>
      <link href="/posts/9739.html"/>
      <url>/posts/9739.html</url>
      
        <content type="html"><![CDATA[<p>在当今云原生时代，Docker已成为应用部署的标准工具之一。而Docker Compose作为Docker官方的多容器编排工具，能够帮助我们轻松定义和运行复杂的多容器应用。本文将详细介绍如何使用Docker Compose部署一个完整的Ghost博客系统，包含Ghost应用、Nginx反向代理和MySQL数据库三个服务组件。</p><div class="note note-info">            <p>本次Docker实战基于🔗<a href="https://www.imooc.com/learn/867">Docker入门教程</a>，但是由于视频教程已经过时（早于2018年），一些配置需要修改，且ghost博客系统似乎已经不再免费，网络上有关ghost的内容也偏少，故颇费了一番功夫</p>          </div><h2 id="项目架构设计"><a href="#项目架构设计" class="headerlink" title="项目架构设计"></a>项目架构设计</h2><p>我们的Ghost博客系统采用典型的三层架构设计：</p><ol><li><strong>前端层</strong>：Nginx作为反向代理服务器，接收外部请求并转发给Ghost应用</li><li><strong>应用层</strong>：Ghost博客系统本身，提供内容管理和发布功能</li><li><strong>数据层</strong>：MySQL数据库持久化存储博客数据</li></ol><h2 id="目录结构解析"><a href="#目录结构解析" class="headerlink" title="目录结构解析"></a>目录结构解析</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ghost/<br>├── ghost/<br>│   ├── config<span class="hljs-selector-class">.production</span><span class="hljs-selector-class">.json</span><br>│   └── Dockerfile<br>├── nginx/<br>│   ├── nginx<span class="hljs-selector-class">.conf</span><br>│   └── Dockerfile<br>├── data/<br>└── docker-compose.yml<br></code></pre></td></tr></table></figure><ul><li><code>ghost/</code>目录包含Ghost应用的相关配置和Dockerfile</li><li><code>nginx/</code>目录包含Nginx的配置文件和Dockerfile</li><li><code>data/</code>目录用于持久化MySQL数据</li><li><code>docker-compose.yml</code>是核心的编排文件</li></ul><h2 id="深入解析Docker-Compose配置"><a href="#深入解析Docker-Compose配置" class="headerlink" title="深入解析Docker Compose配置"></a>深入解析Docker Compose配置</h2><p><code>docker-compose.yml</code>文件是整个项目的核心，它定义了三个服务及其相互关系：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">ghost:</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">ghost-app:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">ghost</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ghost</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;2368:2368&quot;</span><br>      <br>  <span class="hljs-attr">nginx:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ghost</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ghost-app</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>      <br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;mysql:5.7.15&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ghost</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">mysqlroot</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">ghost</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">ghost</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$PWD/data:/var/lib/mysql</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>原教程中使用ghost用户访问mysql数据库报错权限不足，故改用root用户</p></blockquote><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>我们创建了一个名为<code>ghost</code>的自定义网络，所有服务都连接到这个网络。这样服务之间可以通过服务名相互访问（如Ghost可以通过<code>db</code>主机名访问MySQL服务），而无需关心IP地址变化。</p><h3 id="服务依赖关系"><a href="#服务依赖关系" class="headerlink" title="服务依赖关系"></a>服务依赖关系</h3><ul><li><code>ghost-app</code>依赖于<code>db</code>服务，确保数据库先启动</li><li><code>nginx</code>依赖于<code>ghost-app</code>服务，确保应用服务先启动</li></ul><h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><p>MySQL服务使用<code>volumes</code>将容器内的<code>/var/lib/mysql</code>目录映射到宿主机的<code>./data</code>目录，确保数据库数据不会因容器重启而丢失。</p><h2 id="Ghost应用配置详解"><a href="#Ghost应用配置详解" class="headerlink" title="Ghost应用配置详解"></a>Ghost应用配置详解</h2><p>Ghost的配置文件<code>config.production.json</code>包含了应用的核心配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2368</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;client&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mysql&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;connection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;db&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mysqlroot&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;database&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ghost&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3306</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;charset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;utf8&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 其他配置...</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>关键点说明：</p><ul><li>数据库连接使用服务名<code>db</code>作为主机名，这是Docker网络提供的服务发现能力</li><li>数据库凭据与docker-compose中定义的MySQL环境变量一致</li><li>服务器监听<code>0.0.0.0</code>以便容器外部可以访问</li></ul><p><code>./ghost/Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ghost:<span class="hljs-number">5.94</span>.<span class="hljs-number">1</span><br><span class="hljs-comment">#COPY ./config.js /var/lib/ghost/content/config.js</span><br><span class="hljs-comment">#CMD [&quot;cat&quot;, &quot;config.production.json&quot;]</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./config.production.json /var/lib/ghost/config.production.json</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">2368</span><br><span class="hljs-comment">#CMD [&quot;npm&quot;, &quot;start&quot;, &quot;--production&quot;]</span><br></code></pre></td></tr></table></figure><ul><li>指定了使用官方 Ghost 镜像的 5.94.1 版本作为基础。官方镜像已经预配置了 Node.js 环境和 Ghost 运行所需的所有依赖</li><li>将宿主机上的配置文件复制到容器内 Ghost 的默认配置目录</li><li>声明容器运行时监听的端口, Ghost 默认使用 2368 端口：</li><li>注释掉的 CMD [“npm”, “start”, “–production”]，这是不必要的，因为新版本Ghost基础镜像已经包含了正确的启动命令</li></ul><blockquote><p>原教程中旧版本ghost使用config.js文件进行配置，且需要加上启动命令</p></blockquote><h2 id="Nginx反向代理配置"><a href="#Nginx反向代理配置" class="headerlink" title="Nginx反向代理配置"></a>Nginx反向代理配置</h2><p>Nginx作为前端代理，将所有80端口的请求转发到Ghost应用的2368端口：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span> <span class="hljs-number">4</span>;<br><span class="hljs-section">events</span> &#123;<span class="hljs-attribute">worker_connections</span> <span class="hljs-number">1024</span>;&#125;<br><span class="hljs-section">http</span> &#123;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_pass</span> http://ghost-app:2368;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里同样利用了Docker网络的服务发现能力，通过服务名<code>ghost-app</code>访问Ghost应用。</p><p><code>./nginx/Dockerfile</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> nginx<br><span class="hljs-keyword">COPY</span><span class="language-bash"> nginx.conf /etc/nginx/nginx.conf</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><ul><li>FROM nginx 使用了最新版的官方 Nginx 镜像,官方镜像已经包含了 Nginx 的最佳实践配置</li><li>用自定义配置完全替换默认的 Nginx 配置, 目标路径 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 是 Nginx 的主配置文件位置</li><li>EXPOSE 80 声明容器将监听 HTTP 默认端口, 对应 docker-compose.yml 中的端口映射, 实际访问会通过宿主机的 80 端口暴露服务</li></ul><h2 id="构建与部署流程"><a href="#构建与部署流程" class="headerlink" title="构建与部署流程"></a>构建与部署流程</h2><p>完整的构建和部署流程如下，在ghost项目目录下：</p><ol><li>停止现有服务：<code>docker-compose stop</code></li><li>强制删除容器：<code>docker-compose rm -f</code></li><li>重新构建镜像：<code>docker-compose build</code></li><li>启动服务：<code>docker-compose up -d</code></li><li>查看日志：<code>docker-compose logs</code></li></ol><p>这套命令序列确保了每次部署都是全新的状态，避免了旧容器和镜像带来的潜在问题。</p><h2 id="技术要点总结"><a href="#技术要点总结" class="headerlink" title="技术要点总结"></a>技术要点总结</h2><ol><li><strong>服务发现</strong>：Docker网络自动提供DNS解析，容器间通过服务名通信</li><li><strong>依赖管理</strong>：<code>depends_on</code>确保服务按正确顺序启动</li><li><strong>配置管理</strong>：各服务的配置通过Dockerfile和docker-compose.yml集中管理</li><li><strong>数据持久化</strong>：通过volume实现MySQL数据的持久化存储</li><li><strong>环境隔离</strong>：自定义网络隔离了服务间的通信</li></ol><h2 id="扩展思考"><a href="#扩展思考" class="headerlink" title="扩展思考"></a>扩展思考</h2><p>通过这个实战项目，我们不仅学会了Docker Compose的基本用法，更重要的是理解了如何设计一个可维护、可扩展的容器化应用架构。这种模式可以推广到其他类似的Web应用部署场景中。</p>]]></content>
      
      
      <categories>
          
          <category> 我的项目 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Ghost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot后端服务部署实战</title>
      <link href="/posts/c2c.html"/>
      <url>/posts/c2c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是我完成的第一个基于Java技术栈的后端开发项目，整合了SpringBoot框架和Mybatis持久层框架。</p><p>目前项目已完成基础功能开发并部署上线，测试地址为：<a href="https://mall.cngo.xyz/">https://mall.cngo.xyz/</a></p><h2 id="一、项目结构"><a href="#一、项目结构" class="headerlink" title="一、项目结构"></a>一、项目结构</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">project/<br>├── src/<br>│   └── main/<br>│   ├── java/com/miaoshaproject   # java源码<br>│   └── resources/<br>│       └── application.properties # SpringBoot应用程序配置文件 <br>├── pom.xml                       # Maven依赖管理<br>├── leanignore.txt                # 云引擎忽略文件<br>└── system.properties     # 云引擎配置文件<br></code></pre></td></tr></table></figure><blockquote><p>项目JDK版本为1.8，故需要在<code>system.properties</code>中设置<code>java.runtime.version=8</code></p></blockquote><h2 id="二、MySQL服务集成"><a href="#二、MySQL服务集成" class="headerlink" title="二、MySQL服务集成"></a>二、MySQL服务集成</h2><p>修改application.properties中配置的Mysql服务配置</p>   <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.name</span>=<span class="hljs-string">miaosha</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">$&#123;DB_URL&#125;          # 从环境变量读取，在云引擎官网配置</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">$&#123;DB_USERNAME&#125;</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">$&#123;DB_PASSWORD&#125;</span><br></code></pre></td></tr></table></figure><p>   <em>推荐使用<a href="https://sqlpub.com/">sqlpub.com</a>等云数据库服务</em></p><h2 id="三、项目构建"><a href="#三、项目构建" class="headerlink" title="三、项目构建"></a>三、项目构建</h2><div class="note note-waring">            <p>云引擎默认的构建命令为<code>mvn package --batch-mode</code>，项目为SpringBoot项目，构建完后报错</p><ol><li><code>no main manifest attribute, in test-0.0.1-SNAPSHOT.jar</code> 原因是找不到主类</li><li><code>java.lang.NoClassDefFoundError: org/springframework/boot/SpringApplication</code> jar包中缺少相关依赖</li></ol>          </div><h3 id="1-配置Spring-Boot打包插件"><a href="#1-配置Spring-Boot打包插件" class="headerlink" title="1.配置Spring Boot打包插件"></a>1.配置Spring Boot打包插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Boot 打包插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 使用你的 Spring Boot 版本 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.miaoshaproject.App<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span> <span class="hljs-comment">&lt;!-- 将普通 JAR 重新打包为可执行 JAR --&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-修改构建命令"><a href="#2-修改构建命令" class="headerlink" title="2.修改构建命令"></a>2.修改构建命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 三步合一命令（清理+打包+重打包）</span><br>mvn clean package spring-boot:repackage<br></code></pre></td></tr></table></figure><blockquote><p>现在生成的<code>miaosha-1.0-SNAPSHOT.jar</code>就可以独立运行了。</p></blockquote><h2 id="四、项目运行"><a href="#四、项目运行" class="headerlink" title="四、项目运行"></a>四、项目运行</h2><ol><li><p>修改运行命令为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar /home/leanengine/app/target/miaosha-1.0-SNAPSHOT.jar \<br>  --server.port=<span class="hljs-variable">$&#123;LEANCLOUD_APP_PORT&#125;</span> \  <span class="hljs-comment"># 必须读取环境变量端口</span><br>  --server.address=0.0.0.0              <span class="hljs-comment"># 监听所有网卡！</span><br></code></pre></td></tr></table></figure></li><li><p><strong>避坑指南</strong></p><ul><li>云引擎强制要求监听<code>0.0.0.0</code>而非<code>127.0.0.1</code>，SpringBoot框架默认是<code>127.0.0.1</code></li><li><code>LEANCLOUD_APP_PORT</code>是平台动态分配的HTTP端口，云引擎会监听该端口是否有http服务</li></ul></li></ol><blockquote><p>项目成功运行起来了❗</p></blockquote><h2 id="五、修复Bug"><a href="#五、修复Bug" class="headerlink" title="五、修复Bug"></a>五、修复Bug</h2><ol><li><p><strong>解决跨域Cookie丢失</strong> </p><div class="note note-waring">            <p>为了减轻云引擎的压力，采用了前后端分离部署方式，但是由于前后端域名不一致，存在跨域Cookie丢失问题，无法在Cookie中保存用户的登陆信息</p>          </div><p>解决方法：在登录接口（&#x2F;login）中，增加代码设置SameSite&#x3D;None</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置SameSite=None的Cookie - 兼容旧版Servlet API的方式</span><br><span class="hljs-keyword">if</span> (httpServletResponse != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sessionId</span> <span class="hljs-operator">=</span> httpServletRequest.getSession().getId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cookieValue</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;JSESSIONID=%s; Path=/; HttpOnly; Secure; SameSite=None&quot;</span>, sessionId);<br>    httpServletResponse.addHeader(<span class="hljs-string">&quot;Set-Cookie&quot;</span>, cookieValue);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这次部署，掌握了：</p><p>✅ Spring Boot可执行JAR的打包原理</p><p>✅ 云引擎的特殊要求与配置</p><p>✅ 跨域场景下Cookie的安全设置</p><p>✅ 外部数据库服务的快速接入  </p>]]></content>
      
      
      <categories>
          
          <category> 我的项目 </category>
          
          <category> 项目运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt同步播放器系统：设计与实现</title>
      <link href="/posts/4f01.html"/>
      <url>/posts/4f01.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目概述与架构设计"><a href="#项目概述与架构设计" class="headerlink" title="项目概述与架构设计"></a>项目概述与架构设计</h2><p>本系统是一个基于Qt框架的同步播放器解决方案，实现了媒体播放功能与网络同步控制的双重能力。系统采用客户端-服务器架构，允许一个播放器实例作为主控端（服务器），其他实例作为客户端实现播放状态的同步。</p><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p>系统采用<strong>模块化分层设计</strong>：</p><ul><li><strong>表示层</strong>：MainWindow类及其UI组件</li><li><strong>业务逻辑层</strong>：PlayerController实现播放控制</li><li><strong>网络通信层</strong>：TcpBase及其子类处理网络传输</li><li><strong>消息协议层</strong>：CommonMessage提供统一的消息格式</li></ul><h2 id="核心类设计与关系"><a href="#核心类设计与关系" class="headerlink" title="核心类设计与关系"></a>核心类设计与关系</h2><pre><code class=" mermaid">classDiagram    class MainWindow&#123;        -ui: Ui::MainWindow        -player: PlayerController*        -client: TcpClient*        -server: TcpServer*        -tcpCommon: TcpBase*        +onRecvNewMsg()        +onTimeOut()        +InitUI()    &#125;        class PlayerController&#123;        -axWidget: QAxWidget*        -playState: PlayerState        +getCurrentMediaInfo()        +setPlayState()        +onPlayStateChange()    &#125;        class TcpBase&#123;        #socket: QTcpSocket*        #source: MesSource        +sendMsg()        +closeConnetion()        +onRecvMsg()    &#125;        class TcpClient&#123;        +connectToHost()    &#125;        class TcpServer&#123;        -server: QTcpServer*        +listenToConnect()        +onNewConnectFromClient()    &#125;        class CommonMessage&#123;        -type: MessageType        -msg: QString        -timestamp        +messageToString()        +stringToMessage()    &#125;        MainWindow --&gt; PlayerController: 控制    MainWindow --&gt; TcpBase: 聚合    TcpBase &lt;|-- TcpClient: 继承    TcpBase &lt;|-- TcpServer: 继承    MainWindow ..&gt; CommonMessage: 使用    PlayerController ..&gt; CommonMessage: 产生    TcpBase ..&gt; CommonMessage: 传输</code></pre><h3 id="关键类职责"><a href="#关键类职责" class="headerlink" title="关键类职责"></a>关键类职责</h3><ol><li><p><strong>MainWindow</strong>：</p><ul><li>作为应用核心控制器</li><li>初始化UI和各个模块</li><li>实现消息统一分发</li><li>协调播放与网络同步</li></ul></li><li><p><strong>PlayerController</strong>：</p><ul><li>封装Windows Media Player功能</li><li>管理播放状态</li><li>转换播放器事件为系统消息</li><li>提供媒体信息查询接口</li></ul></li><li><p><strong>TcpBase及其子类</strong>：</p><ul><li>实现基础网络通信能力</li><li>客户端&#x2F;服务器双模式支持</li><li>处理连接状态和错误</li><li>消息收发功能</li></ul></li><li><p><strong>CommonMessage</strong>：</p><ul><li>定义系统消息标准格式</li><li>提供序列化&#x2F;反序列化方法</li><li>包含时间戳和消息类型等信息</li></ul></li></ol><h2 id="核心功能实现解析"><a href="#核心功能实现解析" class="headerlink" title="核心功能实现解析"></a>核心功能实现解析</h2><h3 id="1-消息驱动机制"><a href="#1-消息驱动机制" class="headerlink" title="1. 消息驱动机制"></a>1. 消息驱动机制</h3><p>系统采用<strong>统一消息总线</strong>设计，所有组件通过CommonMessage进行通信：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 典型消息处理流程</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PlayerController::onPlayStateChange</span><span class="hljs-params">(<span class="hljs-type">int</span> newState)</span></span>&#123;<br>    playState = (PlayerState)newState;<br>    CommonMessage msg = <span class="hljs-built_in">CommonMessage</span>(PlayerStateChange, QString::<span class="hljs-built_in">number</span>(playState));<br>    <span class="hljs-function">emit <span class="hljs-title">sendMsgToMain</span><span class="hljs-params">(LocalPlayer, msg)</span></span>; <span class="hljs-comment">// 发送信号</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::onRecvNewMsg</span><span class="hljs-params">(MesSource source, CommonMessage msg)</span></span>&#123;<br>    <span class="hljs-comment">// 根据来源和类型处理消息</span><br>    <span class="hljs-keyword">if</span>(source == LocalPlayer)&#123;<br>        <span class="hljs-comment">// 处理本地播放器消息</span><br>        <span class="hljs-keyword">if</span>(tcpCommon &amp;&amp; ui-&gt;ck_sync-&gt;<span class="hljs-built_in">isChecked</span>())&#123;<br>            tcpCommon-&gt;<span class="hljs-built_in">sendMsg</span>(CommonMessage::<span class="hljs-built_in">messageToString</span>(msg));<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 处理网络对端消息</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-网络同步实现"><a href="#2-网络同步实现" class="headerlink" title="2. 网络同步实现"></a>2. 网络同步实现</h3><p>系统提供两种网络模式：</p><p><strong>服务器模式</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">TcpServer::listenToConnect</span><span class="hljs-params">(QHostAddress addr, <span class="hljs-type">int</span> port)</span></span>&#123;<br>    <span class="hljs-type">bool</span> state = server-&gt;<span class="hljs-built_in">listen</span>(addr, port);<br>    <span class="hljs-keyword">if</span>(state)&#123;<br>        <span class="hljs-built_in">connect</span>(server, &amp;QTcpServer::newConnection, <br>                <span class="hljs-keyword">this</span>, &amp;TcpServer::onNewConnectFromClient);<br>    &#125;<br>    <span class="hljs-keyword">return</span> state;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::onNewConnectFromClient</span><span class="hljs-params">()</span></span>&#123;<br>    socket = server-&gt;<span class="hljs-built_in">nextPendingConnection</span>();<br>    <span class="hljs-comment">// 设置信号槽连接...</span><br>    <span class="hljs-function">emit <span class="hljs-title">sendMsgToMain</span><span class="hljs-params">(source, CommonMessage(NewConnection, peerInfo))</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>客户端模式</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">TcpClient::connectToHost</span><span class="hljs-params">(<span class="hljs-type">const</span> QHostAddress &amp;address, quint16 port)</span></span>&#123;<br>    socket-&gt;<span class="hljs-built_in">connectToHost</span>(address, port);<br>    <span class="hljs-keyword">if</span>(socket-&gt;<span class="hljs-built_in">waitForConnected</span>(<span class="hljs-number">1000</span>))&#123;<br>        <span class="hljs-built_in">connect</span>(socket, &amp;QTcpSocket::readyRead, <br>                <span class="hljs-keyword">this</span>, &amp;TcpClient::onRecvMsg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-播放器控制"><a href="#3-播放器控制" class="headerlink" title="3. 播放器控制"></a>3. 播放器控制</h3><p>PlayerController类封装了Windows Media Player的ActiveX控件（通过QAxWidget），提供以下功能：</p><ul><li>播放&#x2F;暂停&#x2F;停止控制</li><li>进度控制</li><li>全屏播放</li><li>媒体信息获取</li><li>状态变化通知</li></ul><p>PlayerController关键实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PlayerController::setCurrentPosition</span><span class="hljs-params">(QString pos)</span></span>&#123;<br>    controls-&gt;<span class="hljs-built_in">setProperty</span>(<span class="hljs-string">&quot;currentPosition&quot;</span>, pos.<span class="hljs-built_in">toDouble</span>());<br>&#125;<br><br><span class="hljs-function">MediaInfo <span class="hljs-title">PlayerController::getCurrentMediaInfo</span><span class="hljs-params">()</span></span>&#123;<br>    MediaInfo info;<br>    currentMedia = axWidget-&gt;<span class="hljs-built_in">querySubObject</span>(<span class="hljs-string">&quot;currentMedia&quot;</span>);<br>    info.title = currentMedia-&gt;<span class="hljs-built_in">dynamicCall</span>(<span class="hljs-string">&quot;getItemInfo(QString)&quot;</span>,<span class="hljs-string">&quot;title&quot;</span>).<span class="hljs-built_in">toString</span>();<br>    info.duration = currentMedia-&gt;<span class="hljs-built_in">dynamicCall</span>(<span class="hljs-string">&quot;getItemInfo(QString)&quot;</span>,<span class="hljs-string">&quot;duration&quot;</span>).<span class="hljs-built_in">toString</span>();<br>    <span class="hljs-keyword">return</span> info;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-状态同步"><a href="#4-状态同步" class="headerlink" title="4. 状态同步"></a>4. 状态同步</h3><p>通过定时器和消息机制实现状态同步：</p><ul><li>100ms定时器检查状态变化</li><li>同步标记控制是否发送同步消息</li><li>心跳包维持连接</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::onTimeOut</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 定时同步播放进度</span><br>    <span class="hljs-keyword">if</span>(player-&gt;<span class="hljs-built_in">getPlayState</span>() != IDLE)&#123;<br>        QString pos = player-&gt;<span class="hljs-built_in">getProcessBarInfo</span>();<br>        <span class="hljs-keyword">if</span>(tcpCommon &amp;&amp; ui-&gt;ck_sync-&gt;<span class="hljs-built_in">isChecked</span>())&#123;<br>            CommonMessage msg = <span class="hljs-built_in">CommonMessage</span>(PlayerProgess, pos);<br>            tcpCommon-&gt;<span class="hljs-built_in">sendMsg</span>(CommonMessage::<span class="hljs-built_in">messageToString</span>(msg));<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 心跳包</span><br>    <span class="hljs-keyword">if</span>(tcpCommon &amp;&amp; count % <span class="hljs-number">30</span> == <span class="hljs-number">0</span>)&#123;<br>        CommonMessage msg = <span class="hljs-built_in">CommonMessage</span>(HeartBeat, <span class="hljs-string">&quot;NONE&quot;</span>);<br>        tcpCommon-&gt;<span class="hljs-built_in">sendMsg</span>(CommonMessage::<span class="hljs-built_in">messageToString</span>(msg));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设计模式应用"><a href="#设计模式应用" class="headerlink" title="设计模式应用"></a>设计模式应用</h2><ol><li><p><strong>观察者模式</strong>：</p><ul><li>通过Qt信号槽实现组件间解耦</li><li>播放器状态变化自动通知观察者</li></ul></li><li><p><strong>策略模式</strong>：</p><ul><li>TcpClient和TcpServer实现不同的网络策略</li><li>运行时通过tcpCommon指针动态切换</li></ul></li><li><p><strong>适配器模式</strong>：</p><ul><li>PlayerController适配Windows Media Player接口</li><li>统一不同播放器的控制方式</li></ul></li><li><p><strong>状态模式</strong>：</p><ul><li>处理播放器的多种状态(播放&#x2F;暂停&#x2F;停止)</li><li>状态转换逻辑集中管理</li></ul></li></ol><h2 id="关键优势与创新点"><a href="#关键优势与创新点" class="headerlink" title="关键优势与创新点"></a>关键优势与创新点</h2><ol><li><strong>双模式网络设计</strong>：<ul><li>同一应用可随时切换客户端&#x2F;服务器角色</li><li>适应不同场景需求</li></ul></li><li><strong>精确状态同步</strong>：<ul><li>定时器驱动状态检查</li><li>进度同步精度可达100ms</li><li>心跳机制保障连接健康</li></ul></li><li><strong>灵活的同步控制</strong>：<ul><li>同步开关允许临时脱离同步</li><li>多种消息类型满足不同需求</li></ul></li><li><strong>健壮的错误处理</strong>：<ul><li>播放器错误隔离处理</li></ul></li></ol><h2 id="优化与扩展方向"><a href="#优化与扩展方向" class="headerlink" title="优化与扩展方向"></a>优化与扩展方向</h2><ol><li><strong>性能优化</strong>：<ul><li>引入多线程处理网络IO</li><li>实现视频帧精确同步</li></ul></li><li><strong>功能扩展</strong>：<ul><li>支持播放列表同步</li><li>增加多客户端管理</li></ul></li><li><strong>稳定性增强</strong>：<ul><li>实现断线自动重连</li><li>增加同步冲突解决机制</li></ul></li><li><strong>用户体验改进</strong>：<ul><li>添加同步延迟补偿</li><li>实现更友好的状态提示</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该Qt同步播放器项目展示了如何利用Qt框架构建复杂的多媒体网络应用。既可作为学习Qt高级开发的范例，也可作为实际同步播放应用的基础框架。项目的设计思路尤其值得借鉴，展现了如何将复杂需求分解为可管理的模块，并通过消息机制优雅地协调各组件工作。</p>]]></content>
      
      
      <categories>
          
          <category> 我的项目 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现Python自动扫雷（五）：扫雷主程序</title>
      <link href="/posts/6061.html"/>
      <url>/posts/6061.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、主程序和其他模块"><a href="#一、主程序和其他模块" class="headerlink" title="一、主程序和其他模块"></a>一、主程序和其他模块</h2><p>除了前面介绍的<strong>核心功能模块</strong>（地图管理、窗口控制、图像识别、扫雷策略等）外，程序还包括：</p><ol><li><strong>主程序(main.py)</strong> - 系统调度中枢</li><li><strong>配置模块(conf.py)</strong> - 全局参数管理</li><li><strong>日志模块(mylogger.py)</strong> - 系统运行监控</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">项目根目录<br>├── conf.py                     # 配置文件，包含全局变量和常量定义<br>├── CursorClick.py              # 鼠标点击操作模块，用于模拟鼠标点击<br>├── main.py                     # 主程序入口，负责程序的整体流程控制<br>├── MineCleaner.py              # 扫雷逻辑模块，负责扫雷过程中的清理操作<br>├── MineGroup.py                # 雷区分组模块，用于管理雷区的分组逻辑<br>├── MineMap.py                  # 雷区地图模块，用于管理雷区地图的状态<br>├── mylogger.py                 # 日志模块，用于记录程序运行过程中的日志信息<br>├── WindowManager.py            # 窗口管理模块，负责管理游戏窗口的定位和截图<br>├── Classify.py                 # 图像分类模块，用于识别雷区格子的状态<br>├── my<span class="hljs-emphasis">_model.h5                 # TensorFlow 模型文件，用于图像分类</span><br><span class="hljs-emphasis">└── my_</span>project.log              # 日志文件，记录程序运行过程中的日志信息<br></code></pre></td></tr></table></figure><h2 id="二、主程序解析"><a href="#二、主程序解析" class="headerlink" title="二、主程序解析"></a>二、主程序解析</h2><h3 id="2-1-main-py-系统主程序"><a href="#2-1-main-py-系统主程序" class="headerlink" title="2.1 main.py - 系统主程序"></a>2.1 main.py - 系统主程序</h3><p>完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> MineMap <span class="hljs-keyword">import</span> MineMap<br><span class="hljs-keyword">from</span> WindowManager <span class="hljs-keyword">import</span> WindowManager<br><span class="hljs-keyword">from</span> Classify <span class="hljs-keyword">import</span> OcrClassifier<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> mylogger <span class="hljs-keyword">import</span> logger<br><span class="hljs-keyword">from</span> MineCleaner <span class="hljs-keyword">import</span> MineCleaner<br><span class="hljs-keyword">import</span> sys<br><br>class_name = <span class="hljs-string">&quot;TkTopLevel&quot;</span><br>title_name = <span class="hljs-string">&quot;扫雷小游戏&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">map</span> = MineMap(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>)<br>        window = WindowManager(class_name, title_name)<br>        ocr = OcrClassifier(window, <span class="hljs-built_in">map</span>)<br>        op = MineCleaner(window, <span class="hljs-built_in">map</span>)<br>        start_time = time.time()<br>        classfiy_time = <span class="hljs-number">0</span><br>        clean_time = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 截图，每个都插入初始图片</span><br>        ocr.classify_all()<br>        <span class="hljs-comment"># 开始，随机点一个</span><br>        time1 = time.time()<br>        classfiy_time += time1 - start_time<br>        op.start_up()<br>        time2 = time.time()<br>        clean_time += time2 - time1<br>        c = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time3 = time.time()<br>            ocr.classify_all()<br>            time4 = time.time()<br>            classfiy_time += time4 - time3<br>            op.clean_mine()<br>            time5 = time.time()<br>            clean_time += time5 - time4<br>            <span class="hljs-keyword">if</span> window.check_main_window():<br>                <span class="hljs-keyword">break</span><br>            c += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># if c &gt; 6:</span><br>            <span class="hljs-comment">#     break</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.error(e)<br>    <span class="hljs-keyword">finally</span>:<br>        elapsed_time = time.time() - start_time<br>        logger.info(<span class="hljs-string">&quot;成功扫雷总用时：&#123;&#125;s, 识别用时：&#123;&#125;s, 扫雷用时：&#123;&#125;s&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">round</span>(elapsed_time,<span class="hljs-number">2</span>), <span class="hljs-built_in">round</span>(classfiy_time,<span class="hljs-number">2</span>), <span class="hljs-built_in">round</span>(clean_time,<span class="hljs-number">2</span>)))<br>        sys.exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="2-1-1-初始化流程"><a href="#2-1-1-初始化流程" class="headerlink" title="2.1.1 初始化流程"></a>2.1.1 初始化流程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">map</span> = MineMap(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>)  <span class="hljs-comment"># 16x16地图初始化</span><br>    window = WindowManager(class_name, title_name)  <span class="hljs-comment"># 游戏窗口控制</span><br>    ocr = OcrClassifier(window, <span class="hljs-built_in">map</span>)  <span class="hljs-comment"># 图像识别引擎</span><br>    op = MineCleaner(window, <span class="hljs-built_in">map</span>)  <span class="hljs-comment"># 扫雷策略引擎</span><br></code></pre></td></tr></table></figure><h4 id="2-1-2-主循环逻辑"><a href="#2-1-2-主循环逻辑" class="headerlink" title="2.1.2 主循环逻辑"></a>2.1.2 主循环逻辑</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    ocr.classify_all()  <span class="hljs-comment"># 全图识别</span><br>    op.clean_mine()  <span class="hljs-comment"># 执行扫雷</span><br>    <br>    <span class="hljs-comment"># 检查游戏结束条件</span><br>    <span class="hljs-keyword">if</span> window.check_main_window():<br>        <span class="hljs-keyword">break</span><br>    <br>    <span class="hljs-comment"># 性能监控</span><br>    c += <span class="hljs-number">1</span><br>    <span class="hljs-comment"># if c &gt; 6: break  # 调试用循环限制</span><br></code></pre></td></tr></table></figure><h3 id="2-2-conf-py-系统配置"><a href="#2-2-conf-py-系统配置" class="headerlink" title="2.2 conf.py - 系统配置"></a>2.2 conf.py - 系统配置</h3><h4 id="2-2-1-显示配置"><a href="#2-2-1-显示配置" class="headerlink" title="2.2.1 显示配置"></a>2.2.1 显示配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">zoomRate = <span class="hljs-number">1.25</span>  <span class="hljs-comment"># 屏幕缩放比例</span><br>block_width, block_height = <span class="hljs-number">20</span>, <span class="hljs-number">20</span>  <span class="hljs-comment"># 格子基准尺寸</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-游戏参数"><a href="#2-2-2-游戏参数" class="headerlink" title="2.2.2 游戏参数"></a>2.2.2 游戏参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">mineNumAll = <span class="hljs-number">40</span>  <span class="hljs-comment"># 总雷数</span><br>blocks_x = blocks_y = <span class="hljs-number">0</span>  <span class="hljs-comment"># 当前区块尺寸</span><br></code></pre></td></tr></table></figure><h4 id="2-2-3-路径配置"><a href="#2-2-3-路径配置" class="headerlink" title="2.2.3 路径配置"></a>2.2.3 路径配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">ReferPath = <span class="hljs-string">&quot;./Image/Reference/&quot;</span>  <span class="hljs-comment"># 参考图像路径</span><br>ErrorPath = <span class="hljs-string">&quot;./Image/Error/&quot;</span>  <span class="hljs-comment"># 错误图像保存路径</span><br>LowAcPath = <span class="hljs-string">&quot;./Image/Low_Accuracy/&quot;</span>  <span class="hljs-comment"># 低识别率图像路径</span><br></code></pre></td></tr></table></figure><h3 id="2-3-mylogger-py-日志管理系统"><a href="#2-3-mylogger-py-日志管理系统" class="headerlink" title="2.3 mylogger.py - 日志管理系统"></a>2.3 mylogger.py - 日志管理系统</h3><h4 id="2-3-1-日志配置"><a href="#2-3-1-日志配置" class="headerlink" title="2.3.1 日志配置"></a>2.3.1 日志配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_logger</span>():<br>    logger = logging.getLogger(<span class="hljs-string">&#x27;my_project&#x27;</span>)<br>    logger.setLevel(logging.DEBUG)<br>    <br>    <span class="hljs-comment"># 文件日志handler</span><br>    file_handler = logging.FileHandler(<span class="hljs-string">&#x27;my_project.log&#x27;</span>)<br>    <br>    <span class="hljs-comment"># 控制台日志handler </span><br>    console_handler = logging.StreamHandler()<br>    <br>    <span class="hljs-comment"># 统一日志格式</span><br>    formatter = logging.Formatter(<br>        <span class="hljs-string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span><br>    )<br></code></pre></td></tr></table></figure><h2 id="三、主程序关键点"><a href="#三、主程序关键点" class="headerlink" title="三、主程序关键点"></a>三、主程序关键点</h2><h3 id="3-1-性能监控体系"><a href="#3-1-性能监控体系" class="headerlink" title="3.1 性能监控体系"></a>3.1 性能监控体系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">start_time = time.time()<br>classfiy_time = <span class="hljs-number">0</span><br>clean_time = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    time3 = time.time()<br>    ocr.classify_all()  <span class="hljs-comment"># 图像识别</span><br>    time4 = time.time()<br>    classfiy_time += time4 - time3  <span class="hljs-comment"># 累计识别耗时</span><br>    <br>    op.clean_mine()  <span class="hljs-comment"># 扫雷操作</span><br>    time5 = time.time()<br>    clean_time += time5 - time4  <span class="hljs-comment"># 累计扫雷耗时</span><br></code></pre></td></tr></table></figure><h3 id="3-2-异常处理机制"><a href="#3-2-异常处理机制" class="headerlink" title="3.2 异常处理机制"></a>3.2 异常处理机制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 主业务流程</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    logger.error(e)  <span class="hljs-comment"># 错误日志记录</span><br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-comment"># 性能报告输出</span><br>    logger.info(<span class="hljs-string">f&quot;总用时：<span class="hljs-subst">&#123;<span class="hljs-built_in">round</span>(elapsed_time,<span class="hljs-number">2</span>)&#125;</span>s, &quot;</span><br>               <span class="hljs-string">f&quot;识别用时：<span class="hljs-subst">&#123;<span class="hljs-built_in">round</span>(classfiy_time,<span class="hljs-number">2</span>)&#125;</span>s, &quot;</span><br>               <span class="hljs-string">f&quot;扫雷用时：<span class="hljs-subst">&#123;<span class="hljs-built_in">round</span>(clean_time,<span class="hljs-number">2</span>)&#125;</span>s&quot;</span>)<br>    sys.exit(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 安全退出</span><br></code></pre></td></tr></table></figure><h3 id="3-3-游戏流程控制"><a href="#3-3-游戏流程控制" class="headerlink" title="3.3 游戏流程控制"></a>3.3 游戏流程控制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 初始点击策略</span><br>op.start_up()  <span class="hljs-comment"># 随机选择起始点</span><br><br><span class="hljs-comment"># 主循环控制</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> window.check_main_window():  <span class="hljs-comment"># 直到游戏结束</span><br>    ocr.classify_all()  <span class="hljs-comment"># 状态识别</span><br>    op.clean_mine()  <span class="hljs-comment"># 策略执行</span><br></code></pre></td></tr></table></figure><h2 id="四、运行流程"><a href="#四、运行流程" class="headerlink" title="四、运行流程"></a>四、运行流程</h2><ol><li><p><strong>初始化阶段</strong>：</p><ul><li>创建游戏地图模型</li><li>连接游戏窗口</li><li>加载识别模型</li><li>初始化策略引擎</li></ul></li><li><p><strong>启动阶段</strong>：</p><ul><li>全图初始识别</li><li>随机起始位置点击</li></ul></li><li><p><strong>主循环阶段</strong>：</p><ul><li>实时图像识别</li><li>智能策略决策</li><li>自动点击操作</li><li>状态监控</li></ul></li><li><p><strong>结束阶段</strong>：</p><ul><li>游戏结束检测</li><li>性能统计分析</li><li>系统安全退出</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 我的项目 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 扫雷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现Python自动扫雷（四）：扫雷核心逻辑</title>
      <link href="/posts/6060.html"/>
      <url>/posts/6060.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、系统架构总览"><a href="#一、系统架构总览" class="headerlink" title="一、系统架构总览"></a>一、系统架构总览</h2><p>本扫雷AI系统由三个核心模块组成，形成完整的自动化扫雷解决方案：</p><ol><li><strong>MineCleaner.py</strong> - 扫雷策略执行引擎</li><li><strong>MineGroup.py</strong> - 雷区关系链管理</li><li><strong>MineMap.py</strong> - 游戏地图状态维护</li></ol><h2 id="二、核心模块深度解析"><a href="#二、核心模块深度解析" class="headerlink" title="二、核心模块深度解析"></a>二、核心模块深度解析</h2><h3 id="2-1-MineMap-py-游戏地图模型"><a href="#2-1-MineMap-py-游戏地图模型" class="headerlink" title="2.1 MineMap.py - 游戏地图模型"></a>2.1 MineMap.py - 游戏地图模型</h3><h4 id="2-1-1-格子状态设计"><a href="#2-1-1-格子状态设计" class="headerlink" title="2.1.1 格子状态设计"></a>2.1.1 格子状态设计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MineGrid</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.flag = -<span class="hljs-number">1</span>  <span class="hljs-comment"># 初始状态</span><br>        <span class="hljs-comment"># 状态编码：</span><br>        <span class="hljs-comment"># -1:未打开 0:已打开无雷 </span><br>        <span class="hljs-comment"># 1-8:周围雷数 -4:标记为雷</span><br>        <span class="hljs-comment"># -2:待识别 -9:实际为雷</span><br>        self.lastImg = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 上次图像快照</span><br>        self.newImg = <span class="hljs-literal">None</span>   <span class="hljs-comment"># 当前图像</span><br>        self.isMine = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 实际是否为雷</span><br></code></pre></td></tr></table></figure><h4 id="2-1-2-关键方法实现"><a href="#2-1-2-关键方法实现" class="headerlink" title="2.1.2 关键方法实现"></a>2.1.2 关键方法实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_grid_info</span>(<span class="hljs-params">self, x, y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;获取指定格子周围雷区信息&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> (mines, unopened_num, marked_num, grids)<br>    <span class="hljs-comment"># 返回: 总雷数, 未打开数, 已标记数, 未打开格子坐标列表</span><br></code></pre></td></tr></table></figure><h3 id="2-2-MineGroup-py-雷区关系链管理"><a href="#2-2-MineGroup-py-雷区关系链管理" class="headerlink" title="2.2 MineGroup.py - 雷区关系链管理"></a>2.2 MineGroup.py - 雷区关系链管理</h3><h4 id="2-2-1-链式结构设计"><a href="#2-2-1-链式结构设计" class="headerlink" title="2.2.1 链式结构设计"></a>2.2.1 链式结构设计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MineChain</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;表示一组相关联的未打开格子&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, grids, mine_num</span>):<br>        self.grids = grids    <span class="hljs-comment"># 关联格子坐标列表</span><br>        self.mine_num = mine_num  <span class="hljs-comment"># 这些格子中的雷数</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-核心算法逻辑"><a href="#2-2-2-核心算法逻辑" class="headerlink" title="2.2.2 核心算法逻辑"></a>2.2.2 核心算法逻辑</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, grids, mine_num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;插入新的雷区关系链&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 实现链的合并、拆分和冲突检测</span><br>    <span class="hljs-keyword">if</span> self.search_same(grids, mine_num): <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> self.search_parent(grids, mine_num): <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> self.search_child(grids, mine_num): <span class="hljs-keyword">return</span><br>    self.chains[<span class="hljs-built_in">len</span>(grids)].append(MineChain(grids, mine_num))<br></code></pre></td></tr></table></figure><h3 id="2-3-MineCleaner-py-扫雷策略引擎"><a href="#2-3-MineCleaner-py-扫雷策略引擎" class="headerlink" title="2.3 MineCleaner.py - 扫雷策略引擎"></a>2.3 MineCleaner.py - 扫雷策略引擎</h3><h4 id="2-3-1-基础策略实现"><a href="#2-3-1-基础策略实现" class="headerlink" title="2.3.1 基础策略实现"></a>2.3.1 基础策略实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_mine</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;核心扫雷逻辑&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 情况1: 未打开格子数=剩余雷数 → 全部标记为雷</span><br>    <span class="hljs-keyword">if</span>(mine_num == unopend_num + marked_num):<br>        self.mark_all_mine(grids)<br>    <br>    <span class="hljs-comment"># 情况2: 已标记数=总雷数 → 安全打开剩余格子</span><br>    <span class="hljs-keyword">elif</span>(mine_num == marked_num):<br>        self.open_all_grids(grids)<br>    <br>    <span class="hljs-comment"># 情况3: 不确定状态 → 加入关系链</span><br>    <span class="hljs-keyword">else</span>:<br>        self.group.insert(grids, mine_num - marked_num)<br></code></pre></td></tr></table></figure><h4 id="2-3-2-概率决策机制"><a href="#2-3-2-概率决策机制" class="headerlink" title="2.3.2 概率决策机制"></a>2.3.2 概率决策机制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_open</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;基于概率的随机开启策略&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 计算每个未打开格子的地雷概率权重</span><br>    weights[x][y] = chain.mine_num / <span class="hljs-built_in">len</span>(chain.grids)<br>    <br>    <span class="hljs-comment"># 选择概率最小的格子开启</span><br>    min_weight = <span class="hljs-built_in">min</span>(weights[x][y] <span class="hljs-keyword">for</span> (x,y) <span class="hljs-keyword">in</span> unopened_lst)<br>    choices = [(x,y) <span class="hljs-keyword">for</span> (x,y) <span class="hljs-keyword">in</span> unopened_lst <br>              <span class="hljs-keyword">if</span> weights[x][y] == min_weight]<br>    xx, yy = random.choice(choices)<br>    self.open_grids(xx, yy)<br></code></pre></td></tr></table></figure><h2 id="三、关键技术亮点"><a href="#三、关键技术亮点" class="headerlink" title="三、关键技术亮点"></a>三、关键技术亮点</h2><h3 id="3-1-动态关系链管理"><a href="#3-1-动态关系链管理" class="headerlink" title="3.1 动态关系链管理"></a>3.1 动态关系链管理</h3><ol><li><strong>链式存储结构</strong>：按格子数量分层存储，提高查询效率</li><li><strong>智能合并拆分</strong>：自动处理父子链关系，维护最小完整链</li><li><strong>实时状态传播</strong>：当某格子状态确定时，自动更新相关链</li></ol><h3 id="3-2-双重验证机制"><a href="#3-2-双重验证机制" class="headerlink" title="3.2 双重验证机制"></a>3.2 双重验证机制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">need_grid_classify</span>(<span class="hljs-params">self, x, y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断是否需要重新识别格子&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">not</span> grid.isMine <span class="hljs-keyword">and</span> <br>            <span class="hljs-keyword">not</span> grid.flag == -<span class="hljs-number">4</span> <span class="hljs-keyword">and</span> <br>            (grid.flag == -<span class="hljs-number">2</span> <span class="hljs-keyword">or</span> <br>             <span class="hljs-keyword">not</span> self.compare_grid_img(x, y)))<br></code></pre></td></tr></table></figure><p>通过图像比对和状态标记双重验证，减少不必要的识别操作</p><h3 id="3-3-渐进式决策流程"><a href="#3-3-渐进式决策流程" class="headerlink" title="3.3 渐进式决策流程"></a>3.3 渐进式决策流程</h3><ol><li>优先处理确定性情况（必为雷或必安全）</li><li>对不确定情况建立概率关系模型</li><li>当无确定解时，选择风险最低的格子开启</li></ol><h2 id="四、性能优化策略"><a href="#四、性能优化策略" class="headerlink" title="四、性能优化策略"></a>四、性能优化策略</h2><h3 id="4-1-图像缓存机制"><a href="#4-1-图像缓存机制" class="headerlink" title="4.1 图像缓存机制"></a>4.1 图像缓存机制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_grid_img</span>(<span class="hljs-params">self, x, y, img</span>):<br>    grid.lastImg = grid.newImg  <span class="hljs-comment"># 保留上一帧图像</span><br>    grid.newImg = img          <span class="hljs-comment"># 更新当前图像</span><br></code></pre></td></tr></table></figure><p>通过缓存历史图像，实现差异比对，减少处理量</p><h3 id="4-2-分层链式存储"><a href="#4-2-分层链式存储" class="headerlink" title="4.2 分层链式存储"></a>4.2 分层链式存储</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">self.chains = [[],[],[],[],[],[],[],[],[],[],[],[]]<br><span class="hljs-comment"># 按链长度分层存储，提高查询效率</span><br></code></pre></td></tr></table></figure><h3 id="4-3-懒惰更新策略"><a href="#4-3-懒惰更新策略" class="headerlink" title="4.3 懒惰更新策略"></a>4.3 懒惰更新策略</h3><p>仅在格子状态变化或图像更新时才触发重新识别</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>本系统通过将扫雷问题转化为关系链管理问题，实现了高效可靠的自动化扫雷。其模块化设计使得各部分可独立优化，为后续功能扩展奠定了良好基础。</p>]]></content>
      
      
      <categories>
          
          <category> 我的项目 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 扫雷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现Python自动扫雷（三）：基于TensorFlow识别雷块</title>
      <link href="/posts/6059.html"/>
      <url>/posts/6059.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、系统架构概述"><a href="#一、系统架构概述" class="headerlink" title="一、系统架构概述"></a>一、系统架构概述</h2><p>本扫雷AI识别系统由以下几个核心组件构成：</p><ol><li><strong>图像预处理模块</strong>：负责将游戏截图转换为模型可处理的格式</li><li><strong>TensorFlow模型模块</strong>：加载预训练模型并进行预测</li><li><strong>地图管理模块</strong>：维护游戏地图状态并与识别系统交互</li><li><strong>窗口交互模块</strong>：从游戏窗口获取实时图像数据</li></ol><h2 id="二、核心代码解析"><a href="#二、核心代码解析" class="headerlink" title="二、核心代码解析"></a>二、核心代码解析</h2><h3 id="2-1-图像预处理函数"><a href="#2-1-图像预处理函数" class="headerlink" title="2.1 图像预处理函数"></a>2.1 图像预处理函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">im_array</span>(<span class="hljs-params">im</span>):<br>    im_L = im.convert(<span class="hljs-string">&quot;L&quot;</span>)  <span class="hljs-comment"># 转换为灰度图像</span><br>    Core = im_L.getdata()<br>    arr1 = np.array(Core, dtype=<span class="hljs-string">&#x27;float32&#x27;</span>) / <span class="hljs-number">255.0</span>  <span class="hljs-comment"># 归一化</span><br>    list_img = arr1.tolist()<br>    images = np.array(list_img).reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">25</span>, <span class="hljs-number">25</span>,<span class="hljs-number">1</span>)  <span class="hljs-comment"># 调整为模型输入格式</span><br>    <span class="hljs-keyword">return</span> images<br></code></pre></td></tr></table></figure><p><strong>关键技术点</strong>：</p><ul><li>图像灰度化处理减少计算复杂度</li><li>像素值归一化到[0,1]范围提高模型稳定性</li><li>调整图像维度匹配模型输入要求(25×25×1)</li></ul><h3 id="2-2-OCR分类器类"><a href="#2-2-OCR分类器类" class="headerlink" title="2.2 OCR分类器类"></a>2.2 OCR分类器类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">OcrClassifier</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, window, <span class="hljs-built_in">map</span>: MineMap</span>):<br>        self.model = tf.keras.models.load_model(<span class="hljs-string">&#x27;my_model.h5&#x27;</span>)<br>        logger.info(<span class="hljs-string">&quot;tf.keras.models模型加载完成！&quot;</span>)<br>        self.window = window<br>        self.dict_label=&#123;<span class="hljs-number">0</span>:<span class="hljs-number">0</span>, <span class="hljs-number">1</span>:<span class="hljs-number">1</span>, <span class="hljs-number">2</span>:<span class="hljs-number">2</span>, <span class="hljs-number">3</span>:<span class="hljs-number">3</span>, <span class="hljs-number">4</span>:<span class="hljs-number">4</span>, <span class="hljs-number">5</span>:<span class="hljs-number">5</span>, <span class="hljs-number">6</span>:-<span class="hljs-number">9</span>, <span class="hljs-number">7</span>:-<span class="hljs-number">1</span>&#125;<br>        self.imgs = <span class="hljs-literal">None</span><br>        self.<span class="hljs-built_in">map</span> = <span class="hljs-built_in">map</span><br></code></pre></td></tr></table></figure><p><strong>类成员说明</strong>：</p><ul><li><code>model</code>：预训练的TensorFlow Keras模型</li><li><code>dict_label</code>：模型输出到游戏逻辑的映射字典</li><li><code>window</code>：窗口管理对象，用于获取游戏截图</li><li><code>map</code>：地图管理对象，维护游戏状态</li><li><code>imgs</code>：缓存当前游戏区域图像</li></ul><h3 id="2-3-分类预测方法"><a href="#2-3-分类预测方法" class="headerlink" title="2.3 分类预测方法"></a>2.3 分类预测方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">classify</span>(<span class="hljs-params">self, im</span>):<br>    img = im_array(im)  <span class="hljs-comment"># 图像预处理</span><br>    predictions_single = self.model.predict(img)  <span class="hljs-comment"># 模型预测</span><br>    <span class="hljs-keyword">return</span> self.dict_label[np.argmax(predictions_single)]  <span class="hljs-comment"># 获取最终分类</span><br></code></pre></td></tr></table></figure><p><strong>工作流程</strong>：</p><ol><li>输入原始图像(25×25像素)</li><li>调用<code>im_array</code>进行预处理</li><li>使用加载的模型进行预测</li><li>将预测结果映射为游戏逻辑可识别的标签</li></ol><h3 id="2-4-全图分类方法"><a href="#2-4-全图分类方法" class="headerlink" title="2.4 全图分类方法"></a>2.4 全图分类方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">classify_all</span>(<span class="hljs-params">self</span>):<br>    self.get_cropped_image()  <span class="hljs-comment"># 获取当前游戏区域截图</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.<span class="hljs-built_in">map</span>.width):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.<span class="hljs-built_in">map</span>.height):<br>            self.<span class="hljs-built_in">map</span>.set_grid_img(i, j, self.imgs[i][j])<br>            <span class="hljs-keyword">if</span>(self.<span class="hljs-built_in">map</span>.need_grid_classify(i, j)):<br>                ans = self.classify(self.imgs[i][j])<br>                logger.info(<span class="hljs-string">&quot;(&#123;&#125;,&#123;&#125;)处预测值：&quot;</span>.<span class="hljs-built_in">format</span>(i,j) + <span class="hljs-built_in">str</span>(ans))<br>                self.<span class="hljs-built_in">map</span>.set_grid_flag(i, j, ans)<br></code></pre></td></tr></table></figure><p><strong>算法逻辑</strong>：</p><ol><li>获取当前游戏区域截图并切分为网格</li><li>遍历每个网格单元</li><li>检查该单元是否需要重新分类</li><li>调用分类器进行预测并更新地图状态</li><li>记录分类日志</li></ol><h2 id="三、性能优化考虑"><a href="#三、性能优化考虑" class="headerlink" title="三、性能优化考虑"></a>三、性能优化考虑</h2><ol><li><p><strong>GPU加速</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 可选的GPU设备配置代码</span><br>gpus = tf.config.experimental.list_physical_devices(device_type=<span class="hljs-string">&#x27;GPU&#x27;</span>)<br>tf.config.experimental.set_visible_devices(devices=gpus[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>], device_type=<span class="hljs-string">&#x27;GPU&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>缓存机制</strong>：已识别且未变化的格子可跳过重复识别</p></li></ol><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>该系统与之前实现的窗口管理和点击操作模块相结合，可构建完整的扫雷AI解决方案。下一步可研究游戏策略算法，如基于概率的推理和模式识别。</p>]]></content>
      
      
      <categories>
          
          <category> 我的项目 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 扫雷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现Python自动扫雷（二）：窗口识别、截图与点击</title>
      <link href="/posts/6058.html"/>
      <url>/posts/6058.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>上一篇文章中介绍了扫雷游戏的开发，本文将详细介绍如何通过Python实现扫雷游戏的窗口识别、屏幕截图和鼠标点击操作，这是实现扫雷的基础组件。</p><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p>我们的实现分为两个核心模块：</p><ol><li><strong>CursorClick.py</strong> - 负责底层鼠标操作</li><li><strong>WindowManager.py</strong> - 负责窗口管理和图像处理</li></ol><h2 id="一、鼠标点击模块实现"><a href="#一、鼠标点击模块实现" class="headerlink" title="一、鼠标点击模块实现"></a>一、鼠标点击模块实现</h2><h3 id="1-1-核心功能"><a href="#1-1-核心功能" class="headerlink" title="1.1 核心功能"></a>1.1 核心功能</h3><p><code>CursorClick.py</code>模块封装了Windows系统级的鼠标操作，主要特点包括：</p><ul><li>支持左键和右键两种点击方式</li><li>点击后自动恢复鼠标原位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> win32api<br><span class="hljs-keyword">import</span> win32con<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> mylogger <span class="hljs-keyword">import</span> logger<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">click</span>(<span class="hljs-params">px, py, <span class="hljs-built_in">type</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        Pos = win32api.GetCursorPos()  <span class="hljs-comment"># 记录原位置</span><br>        win32api.SetCursorPos((<span class="hljs-built_in">int</span>(px), <span class="hljs-built_in">int</span>(py)))<br><br>        <span class="hljs-comment"># 根据按钮类型选择点击事件</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&#x27;left&#x27;</span>:<br>            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>            time.sleep(<span class="hljs-number">0.1</span>)  <span class="hljs-comment"># 100ms</span><br>            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&#x27;right&#x27;</span>:<br>            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTDOWN, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>            time.sleep(<span class="hljs-number">0.1</span>)  <span class="hljs-comment"># 100ms</span><br>            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><br>        win32api.SetCursorPos(Pos)  <span class="hljs-comment"># 回到原位置</span><br>        time.sleep(<span class="hljs-number">0.1</span>)  <span class="hljs-comment"># 100ms</span><br>        logger.info(<span class="hljs-string">f&quot;点击成功！坐标: (<span class="hljs-subst">&#123;px&#125;</span>, <span class="hljs-subst">&#123;py&#125;</span>)&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.error(<span class="hljs-string">f&quot;点击失败！错误信息: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="1-2-技术细节"><a href="#1-2-技术细节" class="headerlink" title="1.2 技术细节"></a>1.2 技术细节</h3><ol><li><strong>坐标系统</strong>：使用Windows API获取和设置鼠标位置，坐标单位为屏幕像素</li><li><strong>点击实现</strong>：通过<code>mouse_event</code>函数模拟鼠标按下和释放动作</li><li><strong>稳定性保障</strong>：<ul><li>每次操作前后添加100ms延迟</li><li>点击后恢复鼠标原位置避免干扰用户</li></ul></li><li><strong>错误处理</strong>：捕获所有异常并通过日志系统记录</li></ol><h2 id="二、窗口管理模块实现"><a href="#二、窗口管理模块实现" class="headerlink" title="二、窗口管理模块实现"></a>二、窗口管理模块实现</h2><h3 id="2-1-核心功能"><a href="#2-1-核心功能" class="headerlink" title="2.1 核心功能"></a>2.1 核心功能</h3><p><code>WindowManager.py</code>模块负责游戏窗口的识别和管理，主要功能包括：</p><ul><li>查找和激活游戏窗口</li><li>检测游戏状态（胜利&#x2F;失败）</li><li>截取游戏区域图像</li><li>将游戏区域切分为16×16的网格</li><li>在指定网格位置执行点击操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> win32gui<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageGrab<br><span class="hljs-keyword">from</span> CursorClick <span class="hljs-keyword">import</span> click<br><span class="hljs-keyword">from</span> mylogger <span class="hljs-keyword">import</span> logger<br><br>zoomRate = <span class="hljs-number">1.25</span>  <span class="hljs-comment"># 应对屏幕缩放问题</span><br>grid_origin_width = <span class="hljs-number">20</span><br>grid_origin_height = <span class="hljs-number">20</span><br>grid_width = <span class="hljs-built_in">int</span>(zoomRate * grid_origin_width)<br>grid_height = <span class="hljs-built_in">int</span>(zoomRate * grid_origin_height)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crop_grid_img</span>(<span class="hljs-params">img, x, y</span>):  <span class="hljs-comment"># 切分雷块返回图像</span><br>    rect = (x * grid_width, y * grid_height,<br>            (x + <span class="hljs-number">1</span>) * grid_width, (y + <span class="hljs-number">1</span>) * grid_height)<br>    <span class="hljs-keyword">return</span> img.crop(rect)<br><br><span class="hljs-string">&quot;&quot;&quot;窗口管理器，负责管理游戏窗口和点击&quot;&quot;&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowManager</span>:<br>    <span class="hljs-comment"># 初始化代码...</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_window_foreground</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.hwndMain:<br>            self.find_main_window()<br>        <span class="hljs-keyword">try</span>:<br>            win32gui.SetForegroundWindow(self.hwndMain)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            logger.error(<span class="hljs-string">&quot;置顶窗口过程发生错误&quot;</span>, e)<br>            sys.exit()<br>            <br>    <span class="hljs-comment"># 其他方法...</span><br></code></pre></td></tr></table></figure><h3 id="2-2-窗口管理实现"><a href="#2-2-窗口管理实现" class="headerlink" title="2.2 窗口管理实现"></a>2.2 窗口管理实现</h3><h4 id="2-2-1-窗口查找与置顶"><a href="#2-2-1-窗口查找与置顶" class="headerlink" title="2.2.1 窗口查找与置顶"></a>2.2.1 窗口查找与置顶</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_main_window</span>(<span class="hljs-params">self</span>):<br>    self.hwndMain = win32gui.FindWindow(self.class_name, self.title_name)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.hwndMain:<br>        logger.error(<span class="hljs-string">&quot;未找到主窗口&quot;</span>)<br>        sys.exit()<br>    logger.info(<span class="hljs-string">&quot;找到主窗口&quot;</span>)<br>    <br>    leftMain, topMain, rightMain, bottomMain = win32gui.GetWindowRect(self.hwndMain)<br>    logger.info(<span class="hljs-string">f&quot;主窗口坐标：<span class="hljs-subst">&#123;leftMain&#125;</span> <span class="hljs-subst">&#123;rightMain&#125;</span> <span class="hljs-subst">&#123;topMain&#125;</span> <span class="hljs-subst">&#123;bottomMain&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_game_window</span>(<span class="hljs-params">self</span>):<br>    hwndChild = win32gui.FindWindowEx(self.hwndMain, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;TkChild&quot;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hwndChild:<br>        logger.error(<span class="hljs-string">&quot;未找到子窗口&quot;</span>)<br>        sys.exit()<br>    logger.info(<span class="hljs-string">&quot;找到子窗口&quot;</span>)<br><br>    self.leftGame, self.topGame, self.rightGame, self.bottomGame = win32gui.GetWindowRect(hwndChild)<br>    logger.info(<span class="hljs-string">f&quot;子窗口坐标：<span class="hljs-subst">&#123;self.leftGame&#125;</span> <span class="hljs-subst">&#123;self.rightGame&#125;</span> <span class="hljs-subst">&#123;self.topGame&#125;</span> <span class="hljs-subst">&#123;self.bottomGame&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>技术要点</strong>：</p><ul><li>使用<code>FindWindow</code>和<code>FindWindowEx</code>查找窗口句柄</li><li>通过<code>GetWindowRect</code>获取窗口位置和尺寸</li><li>分层查找：先找主窗口，再找游戏区域子窗口</li></ul><h4 id="2-2-2-游戏状态检测"><a href="#2-2-2-游戏状态检测" class="headerlink" title="2.2.2 游戏状态检测"></a>2.2.2 游戏状态检测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_main_window</span>(<span class="hljs-params">self</span>):<br>    flag = self.find_fail_window()<br>    <span class="hljs-keyword">if</span> flag:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    flag = self.find_success_window()<br>    <span class="hljs-keyword">if</span> flag:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    self.set_window_foreground()<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_fail_window</span>(<span class="hljs-params">self</span>):<br>    hwndFail = win32gui.FindWindow(<span class="hljs-string">&quot;#32770&quot;</span>, <span class="hljs-string">&quot;失败&quot;</span>)<br>    <span class="hljs-keyword">if</span> hwndFail:<br>        hwndButton = win32gui.FindWindowEx(hwndFail, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Button&quot;</span>, <span class="hljs-string">&quot;确定&quot;</span>)<br>        <span class="hljs-keyword">if</span> hwndButton:<br>            left, top, right, bottom = win32gui.GetWindowRect(hwndButton)<br>            click((left + right) / <span class="hljs-number">2</span>, (top + bottom) / <span class="hljs-number">2</span>, <span class="hljs-string">&quot;left&quot;</span>)<br>            logger.info(<span class="hljs-string">&quot;扫雷失败&quot;</span>)<br>            sys.exit()<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_success_window</span>(<span class="hljs-params">self</span>):<br>    hwndSuccess = win32gui.FindWindow(<span class="hljs-string">&quot;#32770&quot;</span>, <span class="hljs-string">&quot;成功&quot;</span>)<br>    <span class="hljs-keyword">if</span> hwndSuccess:<br>        hwndButton = win32gui.FindWindowEx(hwndSuccess, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Button&quot;</span>, <span class="hljs-string">&quot;确定&quot;</span>)<br>        <span class="hljs-keyword">if</span> hwndButton:<br>            left, top, right, bottom = win32gui.GetWindowRect(hwndButton)<br>            click((left + right) / <span class="hljs-number">2</span>, (top + bottom) / <span class="hljs-number">2</span>, <span class="hljs-string">&quot;left&quot;</span>)<br>            logger.info(<span class="hljs-string">&quot;扫雷成功&quot;</span>)<br>            sys.exit()<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p><strong>技术要点</strong>：</p><ul><li>通过检查失败和成功窗口识别游戏状态</li></ul><h3 id="2-3-图像处理实现"><a href="#2-3-图像处理实现" class="headerlink" title="2.3 图像处理实现"></a>2.3 图像处理实现</h3><h4 id="2-3-1-游戏区域截图"><a href="#2-3-1-游戏区域截图" class="headerlink" title="2.3.1 游戏区域截图"></a>2.3.1 游戏区域截图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_img_blob</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">try</span>:<br>        self.set_window_foreground()<br>        self.find_game_window()<br>        (left, top, right, bottom) = rect = (<br>            <span class="hljs-built_in">round</span>(self.leftGame * zoomRate + <span class="hljs-number">17</span> * zoomRate), <br>            <span class="hljs-built_in">round</span>(self.topGame * zoomRate + <span class="hljs-number">46</span> * zoomRate),<br>            <span class="hljs-built_in">round</span>(self.leftGame * zoomRate + <span class="hljs-number">17</span> * zoomRate + grid_width * <span class="hljs-number">16</span>), <br>            <span class="hljs-built_in">round</span>(self.topGame * zoomRate + <span class="hljs-number">46</span> * zoomRate + grid_height * <span class="hljs-number">16</span>)<br>        )<br>        img = ImageGrab.grab()<br>        cropped_img = img.crop(rect)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.error(<span class="hljs-string">f&quot;处理窗口或截图过程发生错误：<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    blocks_x = (right - left) // grid_width<br>    blocks_y = (bottom - top) // grid_height<br>    blocks_img = [[crop_grid_img(cropped_img, x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(blocks_x)] <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(blocks_y)]<br>    <span class="hljs-keyword">return</span> blocks_img<br></code></pre></td></tr></table></figure><p><strong>技术要点</strong>：</p><ul><li>使用PIL库的<code>ImageGrab</code>截取屏幕</li><li>根据游戏窗口位置计算游戏区域坐标</li><li>考虑屏幕缩放因素(zoomRate)</li><li>将游戏区域切分为16×16网格</li></ul><h4 id="2-3-2-网格点击操作"><a href="#2-3-2-网格点击操作" class="headerlink" title="2.3.2 网格点击操作"></a>2.3.2 网格点击操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">click_grid</span>(<span class="hljs-params">self, x, y, <span class="hljs-built_in">type</span></span>):<br>    logger.info(<span class="hljs-string">f&quot;点击格子：<span class="hljs-subst">&#123;x&#125;</span> <span class="hljs-subst">&#123;y&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>&#125;</span>&quot;</span>)<br>    self.set_window_foreground()<br>    self.find_game_window()<br>    (left, top, right, bottom) = rect = (<br>        <span class="hljs-built_in">round</span>(self.leftGame + <span class="hljs-number">17</span>), <br>        <span class="hljs-built_in">round</span>(self.topGame + <span class="hljs-number">46</span>),<br>        <span class="hljs-built_in">round</span>(self.leftGame + <span class="hljs-number">17</span> + grid_origin_width * <span class="hljs-number">16</span>), <br>        <span class="hljs-built_in">round</span>(self.topGame + <span class="hljs-number">46</span> + grid_origin_height * <span class="hljs-number">16</span>)<br>    )<br>    click(left + (y+<span class="hljs-number">0.5</span>) * grid_origin_width, top + (x+<span class="hljs-number">0.5</span>) * grid_origin_height, <span class="hljs-built_in">type</span>)<br>    self.check_main_window()<br></code></pre></td></tr></table></figure><p><strong>技术要点</strong>：</p><ul><li>将网格坐标转换为屏幕坐标</li><li>点击网格中心点(坐标+0.5)</li><li>操作后检查游戏状态</li></ul><h2 id="三、关键技术点"><a href="#三、关键技术点" class="headerlink" title="三、关键技术点"></a>三、关键技术点</h2><h3 id="3-1-屏幕缩放处理"><a href="#3-1-屏幕缩放处理" class="headerlink" title="3.1 屏幕缩放处理"></a>3.1 屏幕缩放处理</h3><p>现代高分辨率显示器常使用缩放功能，我们通过<code>zoomRate</code>参数(1.25)来解决这个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">zoomRate = <span class="hljs-number">1.25</span>  <span class="hljs-comment"># 应对屏幕缩放问题</span><br>grid_origin_width = <span class="hljs-number">20</span><br>grid_origin_height = <span class="hljs-number">20</span><br>grid_width = <span class="hljs-built_in">int</span>(zoomRate * grid_origin_width)<br>grid_height = <span class="hljs-built_in">int</span>(zoomRate * grid_origin_height)<br></code></pre></td></tr></table></figure><h3 id="3-2-坐标计算"><a href="#3-2-坐标计算" class="headerlink" title="3.2 坐标计算"></a>3.2 坐标计算</h3><p>游戏区域定位基于经验值(17,46)，这是扫雷游戏的标准布局：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 游戏区域左上角坐标计算</span><br>leftGame * zoomRate + <span class="hljs-number">17</span> * zoomRate<br>topGame * zoomRate + <span class="hljs-number">46</span> * zoomRate<br></code></pre></td></tr></table></figure><h3 id="3-3-错误处理与日志"><a href="#3-3-错误处理与日志" class="headerlink" title="3.3 错误处理与日志"></a>3.3 错误处理与日志</h3><p>整个系统采用统一的错误处理策略：</p><ol><li>使用try-catch捕获所有异常</li><li>通过logger记录操作日志和错误信息</li><li>关键错误直接退出程序(sys.exit)</li></ol><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本文实现的扫雷游戏自动化模块具有以下特点：</p><ol><li><strong>稳定性</strong>：完善的错误处理和操作延迟确保可靠运行</li><li><strong>灵活性</strong>：可适应不同的屏幕缩放设置</li><li><strong>模块化</strong>：清晰的职责分离，便于扩展</li></ol><p>下一篇将介绍使用TensorFlow实现扫雷游戏中雷块内容的识别</p><div class="note note-success">            <p>本文窗口管理、截图和点击操作的实现思路也可以应用于其他Windows应用的自动化测试和操作。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 我的项目 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 扫雷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现Python自动扫雷（一）：基础游戏搭建</title>
      <link href="/posts/6057.html"/>
      <url>/posts/6057.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>扫雷作为Windows经典的益智游戏，承载了许多人的童年回忆。最近我突发奇想，决定用Python从零开始实现一个扫雷游戏，并在此基础上开发一个能自动玩扫雷的AI。这个系列将记录我的完整开发过程，今天先分享基础扫雷游戏的实现。</p><iframe   style="width: 100%; aspect-ratio: 16 / 9;"   src="//player.bilibili.com/player.html?isOutside=true&aid=113668322822087&bvid=BV1bnkJYJEvY&cid=27391428665&p=1&autoplay=true&muted=true"   scrolling="no"   border="0"   frameborder="no"   framespacing="0"   allowfullscreen="true"></iframe><h2 id="游戏设计思路"><a href="#游戏设计思路" class="headerlink" title="游戏设计思路"></a>游戏设计思路</h2><p>扫雷游戏的核心逻辑可以分解为以下几个部分：</p><ol><li><strong>游戏地图生成</strong>：随机布置地雷并计算每个格子的数字</li><li><strong>用户交互界面</strong>：显示游戏界面并处理鼠标点击</li><li><strong>游戏逻辑处理</strong>：处理点击事件，判断胜负</li><li><strong>递归展开</strong>：实现点击空白格子时的自动展开功能</li></ol><center><img src="/assets/img/1743385569539.png" style="max-width:250px; height:auto;" /><div>图1：游戏主界面</div></center><h2 id="关键技术实现"><a href="#关键技术实现" class="headerlink" title="关键技术实现"></a>关键技术实现</h2><h3 id="1-数据结构设计"><a href="#1-数据结构设计" class="headerlink" title="1. 数据结构设计"></a>1. 数据结构设计</h3><p>我使用了五个二维数组来管理游戏状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">control_list = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]  <span class="hljs-comment"># 存储雷和数字分布</span><br>show_list = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]    <span class="hljs-comment"># 控制格子显示状态</span><br>button_list = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]  <span class="hljs-comment"># 按钮对象数组</span><br>label_list = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]   <span class="hljs-comment"># 标签对象数组</span><br>mark_list = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]    <span class="hljs-comment"># 标记状态数组</span><br></code></pre></td></tr></table></figure><p>这种设计将游戏数据与显示元素分离，便于管理和维护。</p><h3 id="2-地雷随机分布"><a href="#2-地雷随机分布" class="headerlink" title="2. 地雷随机分布"></a>2. 地雷随机分布</h3><p><code>randomization()</code>函数负责随机布置地雷并计算每个格子的数字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">randomization</span>(<span class="hljs-params">c_list</span>):<br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> num &lt; <span class="hljs-number">40</span>:  <span class="hljs-comment"># 布置40个地雷</span><br>        x = random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">15</span>)<br>        y = random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">15</span>)<br>        <span class="hljs-keyword">if</span> c_list[x][y] == <span class="hljs-number">0</span>:<br>            num += <span class="hljs-number">1</span><br>            c_list[x][y] = -<span class="hljs-number">1</span>  <span class="hljs-comment"># -1表示地雷</span><br>    <br>    <span class="hljs-comment"># 计算每个非雷格子周围的雷数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            <span class="hljs-keyword">if</span> c_list[i][j] &gt; -<span class="hljs-number">1</span>:<br>                <span class="hljs-comment"># 检查8个相邻格子</span><br>                ...<br></code></pre></td></tr></table></figure><h3 id="3-递归展开算法"><a href="#3-递归展开算法" class="headerlink" title="3. 递归展开算法"></a>3. 递归展开算法</h3><p>当玩家点击空白格子时，游戏会自动展开所有相邻的空白区域，直到遇到数字边界。这是通过<code>rec()</code>递归函数实现的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rec</span>(<span class="hljs-params">r,c</span>):<br>    <span class="hljs-keyword">global</span> t<br>    <span class="hljs-keyword">if</span> control_list[r][c] &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> show_list[r][c] == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># 显示数字格子</span><br>        ...<br>    <span class="hljs-keyword">elif</span> control_list[r][c] == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> show_list[r][c] == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># 显示空白格子并递归检查相邻8个格子</span><br>        ...<br>        <span class="hljs-keyword">if</span> r &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> c &gt; <span class="hljs-number">0</span>:<br>            rec(r-<span class="hljs-number">1</span>,c-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> r &gt; <span class="hljs-number">0</span>:<br>            rec(r-<span class="hljs-number">1</span>,c)<br>        <span class="hljs-comment"># 其他6个方向的检查...</span><br></code></pre></td></tr></table></figure><h3 id="4-游戏界面搭建"><a href="#4-游戏界面搭建" class="headerlink" title="4. 游戏界面搭建"></a>4. 游戏界面搭建</h3><p>使用Tkinter构建游戏窗口，包含以下关键组件：</p><ul><li>16×16的格子矩阵（使用Button和Label实现）</li><li>顶部状态栏（地雷计数器、笑脸按钮、计时器）</li><li>底部状态提示文字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建主窗口</span><br>root = Tk()<br>root.title(<span class="hljs-string">&quot;扫雷小游戏&quot;</span>)<br>root.geometry(<span class="hljs-string">&quot;360x410&quot;</span>)<br><br><span class="hljs-comment"># 创建游戏画布</span><br>cv1 = Canvas(root, bd=<span class="hljs-number">15</span>, bg=<span class="hljs-string">&quot;#FFFFFF&quot;</span>, relief=RIDGE, cursor=<span class="hljs-string">&quot;cross&quot;</span>, width=<span class="hljs-number">321</span>, height=<span class="hljs-number">350</span>)<br>cv1.create_line(<span class="hljs-number">15</span>,<span class="hljs-number">45</span>,<span class="hljs-number">337</span>,<span class="hljs-number">45</span>)<br>cv1.place(x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 添加状态标签</span><br>w = Label(root, text=<span class="hljs-string">&quot;你所作的选择，决定你的命运！&quot;</span>, font=(<span class="hljs-string">&quot;楷体&quot;</span>,<span class="hljs-number">12</span>))<br>w.place(x=<span class="hljs-number">60</span>,y=<span class="hljs-number">385</span>)<br></code></pre></td></tr></table></figure><h2 id="游戏特色功能"><a href="#游戏特色功能" class="headerlink" title="游戏特色功能"></a>游戏特色功能</h2><ol><li><strong>右键标记</strong>：玩家可以右键点击格子标记可疑的地雷位置</li><li><strong>计时系统</strong>：记录游戏用时</li><li><strong>地雷计数器</strong>：显示剩余未标记的地雷数</li><li><strong>重新开始</strong>：通过笑脸按钮一键重置游戏</li></ol><h2 id="遇到的问题与解决"><a href="#遇到的问题与解决" class="headerlink" title="遇到的问题与解决"></a>遇到的问题与解决</h2><p>在开发过程中，我遇到了一些典型问题：</p><ol><li><strong>递归深度限制</strong>：最初递归展开算法会导致堆栈溢出，后来通过优化递归条件解决</li><li><strong>游戏状态同步</strong>：多个数组之间的状态同步容易出错，通过封装操作函数降低复杂度</li><li><strong>界面闪烁</strong>：频繁更新界面导致闪烁，合理使用<code>place_forget()</code>和<code>place()</code>方法解决</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这个基础扫雷游戏的实现，我巩固了Python GUI编程和递归算法的应用。完整的代码已上传至<a href="https://github.com/yourname/minesweeper">GitHub仓库</a>，欢迎参考。</p><p>在下一篇文章中，我将介绍如何实现游戏界面的截图和识别功能，为自动扫雷AI打下基础。</p><div class="note note-success">            <p><strong>小贴士</strong>：扫雷游戏的核心算法其实并不复杂，关键在于如何优雅地处理用户交互和游戏状态的同步。Tkinter虽然简单，但足以实现一个功能完整的游戏。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 我的项目 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 扫雷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【牛客】BM48数据流中的中位数</title>
      <link href="/posts/3e6e.html"/>
      <url>/posts/3e6e.html</url>
      
        <content type="html"><![CDATA[<div><a target="_blank" href="https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1?tpId=295&tqId=23457&ru=/exam/oj&qru=/ta/format-top101/question-ranking&sourceUrl=%2Fexam%2Foj" style="position: relative; display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-align-items: center; -webkit-box-align: center; -ms-flex-align: center; align-items: center; width: 390px; min-height: 84px; border-radius: 8px; max-width: 100%; overflow: hidden; margin: 16px auto; padding: 12px 12px 9px 12px; background-color: #ddd;"><span class="LinkCard-contents"><span style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; max-height: 40px; line-height: 1.25; color: #121212;">数据流中的中位数-牛客网</span><span style="display: -webkit-box; font-size: 13px; height: 18px; line-height: 18px; color: #999; word-break: break-all; text-overflow: ellipsis; overflow: hidden; -webkit-line-clamp: 1; -webkit-box-orient: vertical;"><span style="display: inline-flex; align-items: center;"><svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="14" height="14"><path d="M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z"></path></svg></span><span>"https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1?tpId=295&tqId=23457&ru=/exam/oj&qru=/ta/format-top101/question-ranking&sourceUrl=%2Fexam%2Foj"</span></span></span></a></div><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。</p><p>数据范围：数据流中数个数满足 1≤n≤1000  ，大小满足 val≤1000 </p><p>进阶： 空间复杂度 O(n)  ， 时间复杂度 O(nlogn) </p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：<br>[<span class="hljs-number">5,2,3,4</span>,<span class="hljs-number">1,6,7,0</span>,<span class="hljs-number">8</span>]<br>返回值：<br>&quot;<span class="hljs-number">5.00 3.50</span> <span class="hljs-number">3.00 3.50</span> <span class="hljs-number">3.00 3.50</span> <span class="hljs-number">4.00 3.50</span> <span class="hljs-number">4</span>.<span class="hljs-number">00</span> &quot;<br>说明：<br>数据流里面不断吐出的是<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>...,则得到的平均数分别为<span class="hljs-number">5</span>,(<span class="hljs-number">5</span>+<span class="hljs-number">2</span>)/<span class="hljs-number">2</span>,<span class="hljs-number">3</span>...     <br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//小根堆，存储大于等于middle的部分</span><br>PriorityQueue&lt;Integer&gt; min_q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br><span class="hljs-comment">//大根堆，存储小于middle的部分</span><br>PriorityQueue&lt;Integer&gt; max_q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(Collections.reverseOrder());<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(Integer num)</span> &#123;<br>    <span class="hljs-type">Double</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> GetMedian();<br>    <span class="hljs-comment">//判断新的数放在哪个堆</span><br>    <span class="hljs-keyword">if</span>(num &gt;= middle)&#123;<br>        min_q.offer(num);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        max_q.offer(num);<br>    &#125;<br>    <span class="hljs-comment">//调整两个堆大小</span><br>    <span class="hljs-keyword">if</span>(max_q.size() &gt; min_q.size())&#123;<br>        min_q.offer(max_q.poll());<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(min_q.size() &gt; max_q.size()+<span class="hljs-number">1</span>)&#123;<br>        max_q.offer(min_q.poll());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> Double <span class="hljs-title function_">GetMedian</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span>(min_q.size() == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(max_q.size() == min_q.size())&#123;<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Double.valueOf(max_q.peek());<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Double.valueOf(min_q.peek());<br>        <span class="hljs-keyword">return</span> (a+b)/<span class="hljs-number">2.0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Double.valueOf(min_q.peek());<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 牛客网 </tag>
            
            <tag> 大根堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【牛客】BM38在二叉树中找到两个节点的最近公共祖先</title>
      <link href="/posts/36e2.html"/>
      <url>/posts/36e2.html</url>
      
        <content type="html"><![CDATA[<div><a target="_blank" href="https://www.nowcoder.com/practice/e0cc33a83afe4530bcec46eba3325116?tpId=295&tqId=1024325&ru=/exam/oj&qru=/ta/format-top101/question-ranking&sourceUrl=%2Fexam%2Foj" style="position: relative; display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-align-items: center; -webkit-box-align: center; -ms-flex-align: center; align-items: center; width: 390px; min-height: 84px; border-radius: 8px; max-width: 100%; overflow: hidden; margin: 16px auto; padding: 12px 12px 9px 12px; background-color: #ddd;"><span class="LinkCard-contents"><span style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; max-height: 40px; line-height: 1.25; color: #121212;">在二叉树中找到两个节点的最近公共祖先-牛客网</span><span style="display: -webkit-box; font-size: 13px; height: 18px; line-height: 18px; color: #999; word-break: break-all; text-overflow: ellipsis; overflow: hidden; -webkit-line-clamp: 1; -webkit-box-orient: vertical;"><span style="display: inline-flex; align-items: center;"><svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="14" height="14"><path d="M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z"></path></svg></span><span>"https://www.nowcoder.com/practice/e0cc33a83afe4530bcec46eba3325116?tpId=295&tqId=1024325&ru=/exam/oj&qru=/ta/format-top101/question-ranking&sourceUrl=%2Fexam%2Foj"</span></span></span></a></div><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定一棵二叉树(保证非空)以及这棵树上的两个节点对应的val值 o1 和 o2，请找到 o1 和 o2 的最近公共祖先节点。</p><p>数据范围：树上节点数满足 1≤<em>n</em>≤105 , 节点值val满足区间 [0,n)</p><p>要求：时间复杂度 O*(*n)</p><p>注：本题保证二叉树中每个节点的val值均不相同。</p><p>如当输入{3,5,1,6,2,0,8,#,#,7,4},5,1时，二叉树{3,5,1,6,2,0,8,#,#,7,4}如下图所示：</p><p><img src="https://uploadfiles.nowcoder.com/images/20211014/423483716_1634206667843/D2B5CA33BD970F64A6301FA75AE2EB22" alt="img"></p><p>所以节点值为5和节点值为1的节点的最近公共祖先节点的节点值为3，所以对应的输出为3。</p><p>节点本身可以视为自己的祖先</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入：<br>&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,#,#,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>&#125;,<span class="hljs-number">5</span>,<span class="hljs-number">1</span><br>返回值：<br><span class="hljs-number">3</span>    <br></code></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入：<br>&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,#,#,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>&#125;,<span class="hljs-number">2</span>,<span class="hljs-number">7</span><br>返回值：<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lowestCommonAncestor</span> <span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> o1, <span class="hljs-type">int</span> o2)</span> &#123;<br>        <span class="hljs-comment">// list记录搜索路径</span><br>        ArrayList&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        find(root, o1, list1);<br>        find(root, o2, list2);<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> root.val;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> Math.min(list1.size(), list2.size());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-comment">//System.out.println(i+&quot; | &quot;+list1.get(i)+&quot; | &quot;+list2.get(i));</span><br>            <span class="hljs-comment">//这里的 equals 不能用 ==</span><br>            <span class="hljs-keyword">if</span>(list1.get(i).equals(list2.get(i)))&#123;<br>                ps = list1.get(i);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ps;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">find</span><span class="hljs-params">(TreeNode node, <span class="hljs-type">int</span> o, ArrayList&lt;Integer&gt; list)</span>&#123;<br>        list.add(node.val);<br>        <span class="hljs-keyword">if</span>(node.val == o)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span> &amp;&amp; find(node.left, o, list))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span> &amp;&amp; find(node.right, o, list))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        list.remove(list.size()-<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 牛客网 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【牛客】BM30二叉搜索树与双向链表</title>
      <link href="/posts/7a58.html"/>
      <url>/posts/7a58.html</url>
      
        <content type="html"><![CDATA[<p>中等 通过率：31.03% 时间限制：1秒 空间限制：256M<br>知识点<a href="https://www.nowcoder.com/exam/oj?tag=594">分治</a></p><div><a target="_blank" href="https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=295&tqId=1512964&ru=%2Fpractice%2F5e2135f4d2b14eb8a5b06fab4c938635&qru=%2Fta%2Fformat-top101%2Fquestion-ranking&sourceUrl=%2Fexam%2Foj" style="position: relative; display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-align-items: center; -webkit-box-align: center; -ms-flex-align: center; align-items: center; width: 390px; min-height: 84px; border-radius: 8px; max-width: 100%; overflow: hidden; margin: 16px auto; padding: 12px 12px 9px 12px; background-color: #ddd;"><span class="LinkCard-contents"><span style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; max-height: 40px; line-height: 1.25; color: #121212;">二叉搜索树与双向链表-牛客网</span><span style="display: -webkit-box; font-size: 13px; height: 18px; line-height: 18px; color: #999; word-break: break-all; text-overflow: ellipsis; overflow: hidden; -webkit-line-clamp: 1; -webkit-box-orient: vertical;"><span style="display: inline-flex; align-items: center;"><svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="14" height="14"><path d="M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z"></path></svg></span><span>"https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=295&tqId=1512964&ru=%2Fpractice%2F5e2135f4d2b14eb8a5b06fab4c938635&qru=%2Fta%2Fformat-top101%2Fquestion-ranking&sourceUrl=%2Fexam%2Foj"</span></span></span></a></div><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。如下图所示</p><p><img src="https://uploadfiles.nowcoder.com/images/20210605/557336_1622886924427/E1F1270919D292C9F48F51975FD07CE2" alt="img"></p><p>数据范围：输入二叉树的节点数 0≤<em>n</em>≤1000，二叉树中每个节点的值 0≤<em>val</em>≤1000<br>要求：空间复杂度<em>O</em>(1)（<strong>即在原树上操作</strong>），时间复杂度<em>O</em>(<em>n</em>)</p><p>注意:</p><p>1.要求不能创建任何新的结点，只能调整树中结点指针的指向。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继<br>2.返回链表中的第一个节点的指针<br>3.函数返回的TreeNode，有左右指针，其实可以看成一个双向链表的数据结构<br>4.你不用输出双向链表，程序会根据你的返回值自动打印输出</p><h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>二叉树的根节点</p><h3 id="返回值描述："><a href="#返回值描述：" class="headerlink" title="返回值描述："></a>返回值描述：</h3><p>双向链表的其中一个头节点。</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">14</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>&#125;输入：<br>返回值：<span class="hljs-selector-tag">From</span> <span class="hljs-attribute">left</span> <span class="hljs-selector-tag">to</span> <span class="hljs-attribute">right</span> are:<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">12</span>,<span class="hljs-number">14</span>,<span class="hljs-number">16</span>;<span class="hljs-selector-tag">From</span> <span class="hljs-attribute">right</span> <span class="hljs-selector-tag">to</span> <span class="hljs-attribute">left</span> are:<span class="hljs-number">16</span>,<span class="hljs-number">14</span>,<span class="hljs-number">12</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>;<br>说明：输入题面图中二叉树，输出的时候将双向链表的头节点返回即可。    <br></code></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">输入：&#123;<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,#,<span class="hljs-number">3</span>,#,<span class="hljs-number">2</span>,#,<span class="hljs-number">1</span>&#125;<br>返回值：<span class="hljs-selector-tag">From</span> <span class="hljs-attribute">left</span> <span class="hljs-selector-tag">to</span> <span class="hljs-attribute">right</span> are:<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>;<span class="hljs-selector-tag">From</span> <span class="hljs-attribute">right</span> <span class="hljs-selector-tag">to</span> <br>说明：<span class="hljs-attribute">left</span> are:<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>;<br>                    <span class="hljs-number">5</span><br>                  /<br>                <span class="hljs-number">4</span><br>              /<br>            <span class="hljs-number">3</span><br>          /<br>        <span class="hljs-number">2</span><br>      /<br>    <span class="hljs-number">1</span><br>树的形状如上图  <br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TreeNode</span> <span class="hljs-variable">ROOT</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <br><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">Convert</span><span class="hljs-params">(TreeNode pRootOfTree)</span> &#123;<br>    <span class="hljs-keyword">if</span>(pRootOfTree == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    Sort(<span class="hljs-literal">null</span>, pRootOfTree);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.ROOT;<br>&#125;<br><br><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">Sort</span><span class="hljs-params">(TreeNode head, TreeNode node)</span>&#123;<br>    <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>)&#123;<br>        head = Sort(head, node.left);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(head != <span class="hljs-literal">null</span>)&#123;<br>        head.right = node;<br>        node.left = head;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        node.left = <span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">this</span>.ROOT = node;<br>    &#125;<br><br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> node;<br>    <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>)&#123;<br>        end = Sort(node, node.right);<br>    &#125;<br>    <span class="hljs-keyword">return</span> end;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 牛客网 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【牛客】BM20数组中的逆序对</title>
      <link href="/posts/7360.html"/>
      <url>/posts/7360.html</url>
      
        <content type="html"><![CDATA[<h2 id="BM20-数组中的逆序对"><a href="#BM20-数组中的逆序对" class="headerlink" title="BM20 数组中的逆序对"></a>BM20 数组中的逆序对</h2><p>中等 通过率：16.61% 时间限制：3秒 空间限制：256M<br>知识点<a href="https://www.nowcoder.com/exam/oj?tag=578">数组</a></p><div><a target="_blank" href="https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5?tpId=295&tqId=23260&ru=/exam/oj&qru=/ta/format-top101/question-ranking&sourceUrl=%2Fexam%2Foj" style="position: relative; display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-align-items: center; -webkit-box-align: center; -ms-flex-align: center; align-items: center; width: 390px; min-height: 84px; border-radius: 8px; max-width: 100%; overflow: hidden; margin: 16px auto; padding: 12px 12px 9px 12px; background-color: #ddd;"><span class="LinkCard-contents"><span style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; max-height: 40px; line-height: 1.25; color: #121212;">数组中的逆序对-牛客网</span><span style="display: -webkit-box; font-size: 13px; height: 18px; line-height: 18px; color: #999; word-break: break-all; text-overflow: ellipsis; overflow: hidden; -webkit-line-clamp: 1; -webkit-box-orient: vertical;"><span style="display: inline-flex; align-items: center;"><svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="14" height="14"><path d="M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z"></path></svg></span><span>"https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5?tpId=295&tqId=23260&ru=/exam/oj&qru=/ta/format-top101/question-ranking&sourceUrl=%2Fexam%2Foj"</span></span></span></a></div><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P mod 1000000007</p><p>数据范围： 对于 50% 的数据, <em>size</em>≤10<sup>4</sup><br>对于 100% 的数据, <em>size</em>≤10<sup>5</sup><br>数组中所有数字的值满足 0≤<em>val</em>≤10<sup>9</sup></p><p>要求：空间复杂度 O(n)，时间复杂度 O(nlogn)</p><h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>题目保证输入的数组中没有的相同的数字</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：[<span class="hljs-number">1,2,3,4</span>,<span class="hljs-number">5,6,7,0</span>]<br>返回值：<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">输入：<span class="hljs-selector-attr">[1,2,3]</span><br>返回值：<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="暴力方法："><a href="#暴力方法：" class="headerlink" title="暴力方法："></a>暴力方法：</h3><p>按住一个arr[i], 依次判断{i+1 … n-1]是否满足条件。n为数组的大小，对于10^5数据，O(N^2)算法显然超时。</p><h3 id="归并排序思想："><a href="#归并排序思想：" class="headerlink" title="归并排序思想："></a>归并排序思想：</h3><blockquote><p>可以参考：<a href="https://blog.csdn.net/justidle/article/details/104203958">排序——归并排序（Merge sort）-CSDN博客</a></p></blockquote><p>归并排序的过程，主要有以下两个操作：</p><ul><li>递归划分整个区间为基本相等的左右两个区间</li><li>合并两个有序区间</li></ul><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment">     * @param nums int整型vector </span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">InversePairs</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-comment">// 创建记录逆序数的变量</span><br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 直接在最外层开辟一个足够大的临时数组，然后传引用到函数</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">tmp</span><span class="hljs-params">(nums.size())</span></span>;<br><br>    <span class="hljs-built_in">mergeSort</span>(nums, tmp, <span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>, ret);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递归划分整个区间"><a href="#递归划分整个区间" class="headerlink" title="递归划分整个区间"></a>递归划分整个区间</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * @param arr vector&lt;int&gt;原数组</span><br><span class="hljs-comment">     * @param tmp vector&lt;int&gt;临时数组 </span><br><span class="hljs-comment">     * @param l int整型 左端点 </span><br><span class="hljs-comment">     * @param r int整型 右端点</span><br><span class="hljs-comment">     * @param ret int整型 逆序对计数</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, vector&lt;<span class="hljs-type">int</span>&gt; &amp;tmp, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span>&amp; ret)</span></span>&#123;<br>    <span class="hljs-comment">// 递归结束条件</span><br>    <span class="hljs-keyword">if</span>(l &gt;= r)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 一分为二</span><br>    <span class="hljs-type">int</span> mid = l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 左半部分数组排序</span><br>    <span class="hljs-built_in">mergeSort</span>(arr, tmp, l, mid, ret);<br>    <span class="hljs-comment">// 右半部分数组排序</span><br>    <span class="hljs-built_in">mergeSort</span>(arr, tmp, mid+<span class="hljs-number">1</span>, r, ret);<br>    <span class="hljs-comment">// 将排序好的左右数组合并排序</span><br>    <span class="hljs-built_in">merge</span>(arr, tmp, l, mid, r, ret);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="合并两个有序区间"><a href="#合并两个有序区间" class="headerlink" title="合并两个有序区间"></a>合并两个有序区间</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, vector&lt;<span class="hljs-type">int</span>&gt; &amp;tmp, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span>&amp; ret)</span></span>&#123;<br>    <span class="hljs-type">int</span> i = l, j = mid + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 左右数组同时遍历，按大小加入临时数组</span><br>    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &gt; arr[j])&#123;<br>            <span class="hljs-comment">//左数组的元素比右数组大，因为左右数组各自已经排序</span><br>            <span class="hljs-comment">//此时可知这段数组存在(mid + 1 - i)个逆序对</span><br>            ret += (mid + <span class="hljs-number">1</span> - i);<br>            ret %= kmod;<br>            tmp[k++] = arr[j++];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            tmp[k++] = arr[i++];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 存入剩下的数组元素</span><br>    <span class="hljs-keyword">while</span>(i &lt;= mid)&#123;<br>        tmp[k++] = arr[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(j &lt;= r)&#123;<br>        tmp[k++] = arr[j++];<br>    &#125;<br><br>    <span class="hljs-comment">//临时数组拷贝回原数组，完成排序</span><br>    <span class="hljs-keyword">for</span>(k = <span class="hljs-number">0</span>, i = l; i &lt;= r; i++, k++)&#123;<br>        arr[i] = tmp[k];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：O(NlogN)<br>空间复杂度：O(N)</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 牛客网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云音乐下载公式</title>
      <link href="/posts/95e.html"/>
      <url>/posts/95e.html</url>
      
        <content type="html"><![CDATA[<h3 id="个人音乐站点读取歌单"><a href="#个人音乐站点读取歌单" class="headerlink" title="个人音乐站点读取歌单"></a>个人音乐站点读取歌单</h3><div><a target="_blank" href=https://music.cngo.xyz/ style="position: relative; display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-align-items: center; -webkit-box-align: center; -ms-flex-align: center; align-items: center; width: 390px; min-height: 84px; border-radius: 8px; max-width: 100%; overflow: hidden; margin: 16px auto; padding: 12px 12px 9px 12px; background-color: #ddd;"><span class="LinkCard-contents"><span style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; max-height: 40px; line-height: 1.25; color: #121212;">Music - 用音乐感染人心</span><span style="display: -webkit-box; font-size: 13px; height: 18px; line-height: 18px; color: #999; word-break: break-all; text-overflow: ellipsis; overflow: hidden; -webkit-line-clamp: 1; -webkit-box-orient: vertical;"><span style="display: inline-flex; align-items: center;"><svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="14" height="14"><path d="M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z"></path></svg></span><span>https://music.cngo.xyz/</span></span></span></a></div><p>输入示例：</p><ul><li>网易：<a href="https://music.163.com/#/playlist?id=8152976493">https://music.163.com/#/playlist?id=8152976493</a></li><li>腾讯：<a href="https://y.qq.com/n/ryqq/playlist/7149783625">https://y.qq.com/n/ryqq/playlist/7149783625</a></li></ul><div class="layui-form" style="display: flex;">  <input id="playlistInput" type="text" name="" placeholder="输入歌单网址" class="layui-input" style="margin-right: 15px;">  <button type="button" onclick="getPlaylist()" class="layui-btn layui-bg-blue">Get</button></div><script>function getPlaylist() {    var url = document.getElementById("playlistInput").value;    const qqRegex = /https:\/\/y\.qq\.com\/n\/ryqq\/playlist\/(\d+)/;     const neteaseRegex = /https:\/\/music\.163\.com\/#\/playlist\?id=(\d+)/;      let match;    if ((match = qqRegex.exec(url)) !== null) {          window.open(`https://music.cngo.xyz/?server=tencent&id=${match[1]}`);    }      else if ((match = neteaseRegex.exec(url)) !== null) {         window.open(`https://music.cngo.xyz/?server=netease&id=${match[1]}`);    }      else {         swal("Something wrong!", "请输入正确的歌单url", "error");        return;     } }</script><h3 id="网易云下载公式"><a href="#网易云下载公式" class="headerlink" title="网易云下载公式"></a>网易云下载公式</h3><h4 id="1-心雨-杨钰莹-毛宁"><a href="#1-心雨-杨钰莹-毛宁" class="headerlink" title="1.心雨 - 杨钰莹&#x2F;毛宁"></a>1.心雨 - 杨钰莹&#x2F;毛宁</h4><div style="width: auto; display: table; margin-left: auto; margin-right: auto;"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=317151&auto=1&height=66"></iframe></div><p>网址：<a href="http://music.163.com/#/song?id=317151">http://music.163.com/#/song?id=317151</a></p><p>真实地址：<a href="http://music.163.com/song/media/outer/url?id=317151.mp3">http://music.163.com/song/media/outer/url?id=317151.mp3</a></p><h4 id="2-最近-我是张怡啊"><a href="#2-最近-我是张怡啊" class="headerlink" title="2.最近 - 我是张怡啊"></a>2.最近 - 我是张怡啊</h4><div style="width: auto; display: table; margin-left: auto; margin-right: auto;"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1360892929&auto=1&height=66"></iframe></div><p>网址：<a href="https://music.163.com/#/song?id=1360892929">https://music.163.com/#/song?id=1360892929</a></p><p>真实地址：<a href="http://music.163.com/song/media/outer/url?id=1360892929.mp3">http://music.163.com/song/media/outer/url?id=1360892929.mp3</a></p><h4 id="一键下载"><a href="#一键下载" class="headerlink" title="一键下载"></a>一键下载</h4><style>.layui-input, .layui-textarea {    display: block;    width: 100%;    padding-left: 10px;}.layui-input, .layui-select, .layui-textarea {    /* height: 38px; */    /* line-height: 1.3; */    line-height: 38px\9;    /* border-width: 1px; */    border-style: solid;    background-color: #fff;    color: rgba(0,0,0,.85);    border-radius: 2px;    border-color: #eee;}.layui-btn {    display: inline-block;    vertical-align: middle;    height: 38px;    line-height: 38px;    border: 1px solid transparent;    padding: 0 18px;    background-color: #16baaa;    color: #fff;    white-space: nowrap;    text-align: center;    font-size: 14px;    border-radius: 2px;    cursor: pointer;    -moz-user-select: none;    -webkit-user-select: none;    -ms-user-select: none;}.layui-bg-blue {    background-color: #1e9fff!important;    color: #fff!important;</style><div class="layui-form" style="display: flex;">  <input id="urlinput" type="text" name="" placeholder="输入网址或歌曲id" class="layui-input" style="margin-right: 15px;">  <button type="button" onclick="getWyUrl()" class="layui-btn layui-bg-blue">Get</button></div><script>function getWyUrl() {    var value = document.getElementById("urlinput").value;    if(value.indexOf("music.163.com") !== -1){        value = value.split("id=")[1];    }    var reg = /^[\d]+$/    if(reg.test(value) == false){        swal("Something wrong!", "请输入正确的url或歌曲id", "error");        return;    }    var url = `http://music.163.com/song/media/outer/url?id=${value}.mp3`    window.open(url)}</script>]]></content>
      
      
      <categories>
          
          <category> 日常杂谈 </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网易云 </tag>
            
            <tag> 下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化篇（五）：为博客添加 PJAX</title>
      <link href="/posts/d023.html"/>
      <url>/posts/d023.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-PJAX？"><a href="#什么是-PJAX？" class="headerlink" title="什么是 PJAX？"></a>什么是 PJAX？</h2><p>PJAX（PushState + AJAX）是一种结合了HTML5的pushState API和AJAX技术的网页加载方法。它通过在后台异步加载页面内容，然后只更新页面中需要改变的部分，同时通过pushState更新浏览器地址栏，从而实现了更快的页面切换体验。</p><p>传统的网页导航会导致整个页面重新加载，包括CSS、JavaScript和重复的页面结构（如页眉、页脚）。而PJAX只加载变化的内容部分，保持其他部分不变，大大减少了数据传输量和渲染时间。</p><h2 id="为什么要在博客中添加-PJAX？"><a href="#为什么要在博客中添加-PJAX？" class="headerlink" title="为什么要在博客中添加 PJAX？"></a>为什么要在博客中添加 PJAX？</h2><p><strong>主要为了保持音乐播放器播放状态不被中断</strong></p><div class="note note-primary">            <p>由于博主也是第一次接触Pjax，在使用Pjax时，发现页面的许多脚本无法正常执行，具体问题包括：黑暗模式切换、图片懒加载、一言、搜索、AI 摘要、标签云、时钟、DPLAYER、公式和流程图等。由于这些问题，一度想放弃 Pjax 方案。不过，经过进一步的探索和尝试，发现通过调整脚本加载顺序、绑定事件监听等方式，可以逐步解决这些问题，最终成功让 Pjax 与这些功能兼容。</p>          </div><h2 id="基本实现步骤"><a href="#基本实现步骤" class="headerlink" title="基本实现步骤"></a>基本实现步骤</h2><ol><li><h3 id="引入PJAX库："><a href="#引入PJAX库：" class="headerlink" title="引入PJAX库："></a><strong>引入PJAX库</strong>：</h3></li></ol><p>参考安知鱼主题的实现方式，引入<a href="https://cdn.cbd.int/pjax@0.2.8/pjax.min.js">Pjax库</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, <br><span class="hljs-string">`</span><br><span class="hljs-string">&lt;script src=&quot;https://cdn.cbd.int/pjax@0.2.8/pjax.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;script src=&quot;/assets/js/pjax.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">`</span>, <br><span class="hljs-string">&#x27;default&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li><h3 id="编写Pjax处理逻辑："><a href="#编写Pjax处理逻辑：" class="headerlink" title="编写Pjax处理逻辑："></a><strong>编写Pjax处理逻辑</strong>：</h3></li></ol><p>完整代码(&#x2F;assets&#x2F;js&#x2F;pjax.js)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> enable = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;enable-pjax&quot;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">eval</span>(enable) === <span class="hljs-literal">false</span>) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">createScript</span>(<span class="hljs-string">&#x27;/assets/js/DPlayer.min.js&#x27;</span>)<br>    <span class="hljs-keyword">var</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;loading&#x27;</span>);<br>    <br>    <span class="hljs-keyword">var</span> pjaxSelectors = [<span class="hljs-string">&quot;head &gt; title&quot;</span>, <span class="hljs-string">&quot;#web_bg&quot;</span>, <span class="hljs-string">&quot;.header-inner&quot;</span>, <span class="hljs-string">&quot;#container&quot;</span>, <span class="hljs-string">&quot;.pjax-reload&quot;</span>]<br><br>    <span class="hljs-keyword">var</span> pjax = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pjax</span>(&#123;<br>        <span class="hljs-attr">elements</span>: <span class="hljs-string">&#x27;a:not([target=&quot;_blank&quot;])&#x27;</span>,<br>        <span class="hljs-attr">selectors</span>: pjaxSelectors,<br>        <span class="hljs-attr">cacheBust</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">analytics</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">scrollRestoration</span>: <span class="hljs-literal">false</span><br>    &#125;)<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:send&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        box.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;flex&#x27;</span><br>    &#125;)<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:complete&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">events</span>.<span class="hljs-title function_">registerScrollTopArrowEvent</span>();<br>        <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">events</span>.<span class="hljs-title function_">registerImageLoadedEvent</span>();<br>        <span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;.scroll-down-bar&quot;</span>).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">events</span>.<span class="hljs-title function_">registerScrollDownArrowEvent</span>();<br>        &#125;<br>        box.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;script[data-pjax]&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> newScript = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>            <span class="hljs-keyword">const</span> content = item.<span class="hljs-property">text</span> || item.<span class="hljs-property">textContent</span> || item.<span class="hljs-property">innerHTML</span> || <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(item.<span class="hljs-property">attributes</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">attr</span> =&gt;</span> newScript.<span class="hljs-title function_">setAttribute</span>(attr.<span class="hljs-property">name</span>, attr.<span class="hljs-property">value</span>))<br>            newScript.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(content))<br>            item.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">replaceChild</span>(newScript, item)<br>        &#125;)<br>    &#125;)<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:error&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">request</span>.<span class="hljs-property">status</span> === <span class="hljs-number">404</span>) &#123;<br>            pjax.<span class="hljs-title function_">loadUrl</span>(<span class="hljs-string">&#x27;/404.html&#x27;</span>)<br>        &#125;<br>    &#125;)<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:success&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;.mermaid&quot;</span>).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">let</span> i = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;mermaid&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)&#123;<br>                    mermaid.<span class="hljs-title function_">init</span>()<br>                    <span class="hljs-built_in">clearInterval</span>(i)<br>                &#125;<br>            &#125;, <span class="hljs-number">1000</span>)<br>        &#125;        <br>    &#125;)<br>&#125;)();<br></code></pre></td></tr></table></figure><h4 id="1-初始化检查"><a href="#1-初始化检查" class="headerlink" title="1. 初始化检查"></a>1. 初始化检查</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> enable = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;enable-pjax&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">eval</span>(enable) === <span class="hljs-literal">false</span>) <span class="hljs-keyword">return</span>;<br></code></pre></td></tr></table></figure><ul><li>从本地存储中读取 <code>enable-pjax</code> 设置</li><li>如果该值为 <code>false</code>，则直接退出，不启用 PJAX</li><li>使用 <code>eval()</code> 将存储的字符串转换为布尔值（注意：实际项目中应避免直接使用 <code>eval</code>，可以用 <code>JSON.parse</code> 替代）</li></ul><h4 id="2-加载依赖"><a href="#2-加载依赖" class="headerlink" title="2. 加载依赖"></a>2. 加载依赖</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Fluid</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">createScript</span>(<span class="hljs-string">&#x27;/assets/js/DPlayer.min.js&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>动态加载 DPlayer 脚本（一个视频播放器库）</li><li>处理包含视频内容的页面</li></ul><h4 id="3-PJAX-配置"><a href="#3-PJAX-配置" class="headerlink" title="3. PJAX 配置"></a>3. PJAX 配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;loading&#x27;</span>);<br><span class="hljs-keyword">var</span> pjaxSelectors = [<span class="hljs-string">&quot;head &gt; title&quot;</span>, <span class="hljs-string">&quot;#web_bg&quot;</span>, <span class="hljs-string">&quot;.header-inner&quot;</span>, <span class="hljs-string">&quot;#container&quot;</span>, <span class="hljs-string">&quot;.pjax-reload&quot;</span>]<br><br><span class="hljs-keyword">var</span> pjax = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pjax</span>(&#123;<br>    <span class="hljs-attr">elements</span>: <span class="hljs-string">&#x27;a:not([target=&quot;_blank&quot;])&#x27;</span>,<br>    <span class="hljs-attr">selectors</span>: pjaxSelectors,<br>    <span class="hljs-attr">cacheBust</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">analytics</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">scrollRestoration</span>: <span class="hljs-literal">false</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><code>loading</code> 元素是页面加载动画容器</li><li><code>pjaxSelectors</code> 定义了哪些部分的内容会被 PJAX 替换：<ul><li>页面标题 (<code>head &gt; title</code>)</li><li>背景元素 (<code>#web_bg</code>)</li><li>头部内容 (<code>.header-inner</code>)</li><li>主容器 (<code>#container</code>)</li><li>需要重新加载的 PJAX 元素 (<code>.pjax-reload</code>)</li></ul></li><li>PJAX 初始化配置：<ul><li><code>elements</code>: 哪些链接触发 PJAX（排除 target&#x3D;”_blank” 的链接）</li><li><code>selectors</code>: 要替换的内容选择器</li><li><code>cacheBust</code>: 不添加缓存破坏参数</li><li><code>analytics</code>: 不使用默认的分析跟踪</li><li><code>scrollRestoration</code>: 禁用浏览器自动滚动恢复</li></ul></li></ul><h4 id="4-PJAX-事件处理"><a href="#4-PJAX-事件处理" class="headerlink" title="4. PJAX 事件处理"></a>4. PJAX 事件处理</h4><h5 id="发送请求时-pjax-send"><a href="#发送请求时-pjax-send" class="headerlink" title="发送请求时 (pjax:send)"></a>发送请求时 (<code>pjax:send</code>)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:send&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    box.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;flex&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>显示加载动画</li></ul><h5 id="请求完成时-pjax-complete"><a href="#请求完成时-pjax-complete" class="headerlink" title="请求完成时 (pjax:complete)"></a>请求完成时 (<code>pjax:complete</code>)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:complete&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">events</span>.<span class="hljs-title function_">registerScrollTopArrowEvent</span>();<br>    <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">events</span>.<span class="hljs-title function_">registerImageLoadedEvent</span>();<br>    <span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;.scroll-down-bar&quot;</span>).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">events</span>.<span class="hljs-title function_">registerScrollDownArrowEvent</span>();<br>    &#125;<br>    box.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;script[data-pjax]&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> newScript = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>        <span class="hljs-keyword">const</span> content = item.<span class="hljs-property">text</span> || item.<span class="hljs-property">textContent</span> || item.<span class="hljs-property">innerHTML</span> || <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(item.<span class="hljs-property">attributes</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">attr</span> =&gt;</span> newScript.<span class="hljs-title function_">setAttribute</span>(attr.<span class="hljs-property">name</span>, attr.<span class="hljs-property">value</span>))<br>        newScript.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(content))<br>        item.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">replaceChild</span>(newScript, item)<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>重新注册滚动到顶部按钮事件</li><li>重新注册图片加载事件</li><li>如果有向下滚动按钮，注册相应事件</li><li>隐藏加载动画</li><li>处理带有 <code>data-pjax</code> 属性的脚本：<ul><li>创建新脚本元素</li><li>复制原脚本的内容和所有属性</li><li>替换原脚本（确保脚本在新内容中执行）</li></ul></li></ul><h5 id="发生错误时-pjax-error"><a href="#发生错误时-pjax-error" class="headerlink" title="发生错误时 (pjax:error)"></a>发生错误时 (<code>pjax:error</code>)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:error&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (e.<span class="hljs-property">request</span>.<span class="hljs-property">status</span> === <span class="hljs-number">404</span>) &#123;<br>        pjax.<span class="hljs-title function_">loadUrl</span>(<span class="hljs-string">&#x27;/404.html&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>如果请求返回 404 错误，加载 404 页面</li></ul><h5 id="请求成功时-pjax-success"><a href="#请求成功时-pjax-success" class="headerlink" title="请求成功时 (pjax:success)"></a>请求成功时 (<code>pjax:success</code>)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:success&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;.mermaid&quot;</span>).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">let</span> i = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;mermaid&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)&#123;<br>                mermaid.<span class="hljs-title function_">init</span>()<br>                <span class="hljs-built_in">clearInterval</span>(i)<br>            &#125;<br>        &#125;, <span class="hljs-number">1000</span>)<br>    &#125;        <br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>如果页面包含 Mermaid 图表（<code>.mermaid</code> 元素）：<ul><li>每隔 1 秒检查一次 mermaid 是否已加载</li><li>一旦检测到 mermaid，初始化图表并清除定时器</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Google reCAPTCHA验证无法加载的问题</title>
      <link href="/posts/965.html"/>
      <url>/posts/965.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>由于国内网络限制，访问Google reCAPTCHA人机验证服务时会出现加载失败的情况，影响网站注册、登录等功能的正常使用。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="使用Header-Editor插件重定向"><a href="#使用Header-Editor插件重定向" class="headerlink" title="使用Header Editor插件重定向"></a>使用Header Editor插件重定向</h3><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><ol><li><p><strong>获取插件</strong>：</p><ul><li>Firefox用户：<a href="http://addons.mozilla.org/firefox/addon/header-editor/">从Mozilla商店安装</a></li><li>Chrome用户：<a href="http://chrome.google.com/webstore/detail/header-editor/eningockdidmgiojffjmkdblpjocbhgh">从Chrome商店安装</a></li></ul></li><li><p><strong>配置规则</strong>：</p><ul><li><p>打开插件后进入”管理”&gt;”导入和导出”</p></li><li><p>输入以下规则地址并下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>azurezeng.github.io<span class="hljs-regexp">/static/</span>HE-GoogleRedirect.json<br></code></pre></td></tr></table></figure></li><li><p>该规则包含对Google APIs、reCaptcha和Content Security的重定向配置</p></li></ul></li><li><p><strong>保存生效</strong>：</p><ul><li>导入规则后保存设置</li><li>刷新需要使用reCAPTCHA的页面即可正常显示验证码</li></ul></li></ol><h4 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h4><p>此方案通过将Google reCAPTCHA的请求地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.google.com<span class="hljs-regexp">/recaptcha/</span>api.js<br></code></pre></td></tr></table></figure><p>重定向到可访问的替代地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>recaptcha.net<span class="hljs-regexp">/recaptcha/</span>api.js<br></code></pre></td></tr></table></figure><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><ul><li>支持Chrome桌面版</li><li>支持Firefox桌面版和移动版</li></ul><blockquote><p>提示：此方法通过社区维护的规则实现，若失效可尝试更新规则或寻找其他替代方案。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常杂谈 </category>
          
          <category> Google </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reCAPTCHA </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub Actions自动编译部署hexo博客</title>
      <link href="/posts/428a.html"/>
      <url>/posts/428a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>为什么要使用GitHub Actions自动编译部署hexo博客？</strong></p><p> <a href="/posts/aa1a.html">本博客是如何搭建的</a></p><table><thead><tr><th align="left">本地部署</th><th align="left">GitHub Actions</th></tr></thead><tbody><tr><td align="left">需手动执行 <code>hexo clean &amp;&amp; hexo g -d</code></td><td align="left">代码推送后自动触发编译部署</td></tr><tr><td align="left">本地需安装 Node.js&#x2F;Hexo 环境</td><td align="left">云端自动配置纯净构建环境</td></tr><tr><td align="left">编译依赖本地电脑性能</td><td align="left">利用 GitHub 服务器资源，速度更快</td></tr><tr><td align="left">多设备工作需同步环境</td><td align="left">任何设备只需 <code>git push</code> 即可更新博客</td></tr></tbody></table><h2 id="具体实现方案"><a href="#具体实现方案" class="headerlink" title="具体实现方案"></a>具体实现方案</h2><ol><li><p><strong>两个独立仓库</strong>：</p><ul><li><p><code>hexo-source</code>（私有）：存放 Hexo 源码（Markdown 文章、主题、配置文件等）</p></li><li><p><code>username.github.io</code>（公开）：存放编译后的静态文件（自动通过 GitHub Pages 托管）</p><div class="note note-info">            <p>GitHub 规定免费用户的 Pages 服务必须使用公开仓库（私有仓库需 Pro 订阅），该方案可以既保护源码隐私，又符合 Pages 的公开要求</p>          </div></li></ul></li><li><p><strong>自动化流程</strong>：</p><ul><li>当向 <code>hexo-source</code> 推送代码时，自动触发 GitHub Actions 完成以下操作：<ol><li>安装 Node.js 环境</li><li>编译 Hexo 生成静态文件</li><li>将生成的 <code>public/</code> 内容推送到 <code>username.github.io</code> 仓库</li></ol></li></ul></li></ol><h2 id="详细配置步骤"><a href="#详细配置步骤" class="headerlink" title="详细配置步骤"></a>详细配置步骤</h2><h3 id="1-创建SSH密钥对"><a href="#1-创建SSH密钥对" class="headerlink" title="1. 创建SSH密钥对"></a>1. 创建SSH密钥对</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -f ~/.ssh/hexo_deploy_key<br></code></pre></td></tr></table></figure><h3 id="2-配置密钥"><a href="#2-配置密钥" class="headerlink" title="2. 配置密钥"></a>2. 配置密钥</h3><ol><li>将公钥(<code>hexo_deploy_key.pub</code>)添加到<strong>静态网页仓库</strong>的Deploy Keys<ul><li>勾选”Allow write access”</li></ul></li><li>将私钥(<code>hexo_deploy_key</code>)添加到<strong>源代码仓库</strong>的Secrets<ul><li>命名为<code>HEXO_DEPLOY_PRIVATE_KEY</code></li></ul></li></ol><h3 id="3-配置Hexo"><a href="#3-配置Hexo" class="headerlink" title="3. 配置Hexo"></a>3. 配置Hexo</h3><p>在<code>_config.yml</code>中设置部署目标git<strong>静态网页仓库</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:yourname/yourname.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h3 id="4-创建GitHub-Actions工作流"><a href="#4-创建GitHub-Actions工作流" class="headerlink" title="4.创建GitHub Actions工作流"></a>4.创建GitHub Actions工作流</h3><p>在博客文件目录新建<code>/.github/workflows/deploy.yml</code></p><p>内容示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span> <span class="hljs-string">site</span> <span class="hljs-string">to</span> <span class="hljs-string">Pages</span> <span class="hljs-comment"># 脚本 workflow 名称</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>] <span class="hljs-comment"># 当监测 main分支 的 push</span><br>    <span class="hljs-attr">paths:</span> <span class="hljs-comment"># 监测所有 source 目录下的文件变动，所有 yml,json 后缀文件的变动。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.json&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**.yml&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/source/**&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/scripts/**&#x27;</span><br><br><span class="hljs-comment"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages</span><br><span class="hljs-attr">permissions:</span><br>  <span class="hljs-attr">contents:</span> <span class="hljs-string">read</span><br>  <span class="hljs-attr">pages:</span> <span class="hljs-string">write</span><br>  <span class="hljs-attr">id-token:</span> <span class="hljs-string">write</span><br><br><span class="hljs-comment"># Default to bash</span><br><span class="hljs-attr">defaults:</span><br>  <span class="hljs-attr">run:</span><br>    <span class="hljs-attr">shell:</span> <span class="hljs-string">bash</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span> <span class="hljs-comment"># 任务名称</span><br>    <span class="hljs-attr">timeout-minutes:</span> <span class="hljs-number">30</span> <span class="hljs-comment"># 设置 30 分钟超时</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span> <span class="hljs-comment"># 指定最新 ubuntu 系统</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># If your repository depends on submodule, please see: https://github.com/actions/checkout</span><br>          <span class="hljs-attr">submodules:</span> <span class="hljs-string">recursive</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">20</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-comment"># Examples: 20, 18.19, &gt;=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node</span><br>          <span class="hljs-comment"># Ref: https://github.com/actions/setup-node#supported-version-syntax</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;20&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">NPM</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Hexo-cli</span> <span class="hljs-comment"># 安装 Hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install -g hexo-cli --save</span><br><span class="hljs-string">          echo &quot;install hexo successful&quot;</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Blog</span> <span class="hljs-comment"># 编译创建静态博客文件</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          hexo clean</span><br><span class="hljs-string">          hexo generate</span><br><span class="hljs-string">          echo &quot;build blog successful&quot;</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">ssh</span> <span class="hljs-string">Permission</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">ACTION_DEPLOY_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          rm -rf /home/runner/.ssh</span><br><span class="hljs-string">          mkdir -p /home/runner/.ssh/</span><br><span class="hljs-string">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; /home/runner/.ssh/id_rsa</span><br><span class="hljs-string">          chmod 700 /home/runner/.ssh</span><br><span class="hljs-string">          chmod 600 /home/runner/.ssh/id_rsa</span><br><span class="hljs-string">          ssh-keyscan github.com &gt;&gt; /home/runner/.ssh/known_hosts</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">Github</span> <span class="hljs-comment"># 设置 git 信息并推送静态博客文件</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git config --global user.email &quot;deploy@qq.com&quot;</span><br><span class="hljs-string">          git config --global user.name &quot;deploy&quot;</span><br><span class="hljs-string">          hexo deploy</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Deploy Successful!&quot;</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p><code>echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; /home/runner/.ssh/id_rsa</code>实现从secret中读取ssh私钥，从而获取推送到<strong>静态网页仓库</strong>的权限</p>          </div><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.cnblogs.com/ssgeek/p/15009012.html">利用Github Action实现Github到Gitee的持续同步 - SSgeek</a> </li><li><a href="https://www.cnblogs.com/Fungit/p/github-acionts-automatically-compile-deploy.html">使用GitHub Actions自动编译部署hexo博客 - Fungit</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化篇（四）：文章页面调整</title>
      <link href="/posts/d022.html"/>
      <url>/posts/d022.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hexo 主题:<a href="https://easyhexo.com/4-High-order-hexo-gamer/4-2-theme-develop/">编写自己的 Hexo 主题 | Easy Hexo 👨‍💻</a></p><p>ejs：<a href="https://ejs.bootcss.com/">EJS – 嵌入式 JavaScript 模板引擎 | EJS 中文文档 (bootcss.com)</a></p></blockquote><h3 id="修改左侧栏内容，新增容器side-container"><a href="#修改左侧栏内容，新增容器side-container" class="headerlink" title="修改左侧栏内容，新增容器side_container"></a>修改左侧栏内容，新增容器side_container</h3><p>左边栏对应主题ejs文件，修改如下</p><p><code>aside</code>是<code>positon</code>属性为<code>sticky</code>的特殊部件</p><p><code>blog\themes\fluid\layout\_partials\post\sidebar-left.ejs</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!-- 添加公告栏时钟 --&gt;<br>&lt;div id=&quot;clockdiv&quot; class=&quot;side_container&quot; style=&quot;margin-right: -1rem; margin-top: 2rem; text-align: center; left: 5rem&quot;&gt;<br>  &lt;canvas id=&quot;dom&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;时钟canvas&lt;/canvas&gt;<br>&lt;/div&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clock.js&quot;&gt;&lt;/script&gt;<br><br>&lt;aside class=&quot;sidebar&quot; style=&quot;margin-right: -1rem; margin-top: 15px; left: 5rem&quot;&gt;<br><br>  &lt;div class=&quot;side_container&quot; &gt;<br>    &lt;%- partial(&#x27;_partials/post/toc&#x27;) %&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class=&quot;side_container category-bar&quot; style=&quot;margin-top: 2rem;&quot; &gt;<br>    &lt;%- partial(&#x27;_partials/post/category-bar&#x27;) %&gt;<br>  &lt;/div&gt;<br>&lt;/aside&gt;<br></code></pre></td></tr></table></figure><h3 id="修改side-container容器css样式"><a href="#修改side-container容器css样式" class="headerlink" title="修改side_container容器css样式"></a>修改side_container容器css样式</h3><p><code>blog\themes\fluid\source\css\_pages\_base\_widget\toc.styl</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.sidebar</span><br>  <span class="hljs-attribute">position</span> -webkit-sticky<br>  <span class="hljs-attribute">position</span> sticky<br>  <span class="hljs-attribute">top</span> <span class="hljs-number">2rem</span><br>  <span class="hljs-attribute">padding</span> <span class="hljs-number">3rem</span> <span class="hljs-number">0</span><br>  <span class="hljs-attribute">z-index</span> <span class="hljs-number">3</span><br><br><span class="hljs-selector-class">.side_container</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1rem</span><br>  <span class="hljs-attribute">background-color</span> <span class="hljs-built_in">var</span>(--board-bg-color)<br>  <span class="hljs-attribute">transition</span> background-color .<span class="hljs-number">2s</span> ease-in-out<br>  <span class="hljs-attribute">border-radius</span> <span class="hljs-number">0.5rem</span><br>  -webkit-<span class="hljs-attribute">box-shadow</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> <span class="hljs-number">15px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.24</span>), <span class="hljs-number">0</span> <span class="hljs-number">17px</span> <span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.19</span>)<br>  <span class="hljs-attribute">box-shadow</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> <span class="hljs-number">15px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.24</span>), <span class="hljs-number">0</span> <span class="hljs-number">17px</span> <span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.19</span>)<br></code></pre></td></tr></table></figure><h3 id="调整左栏和文章栏位置"><a href="#调整左栏和文章栏位置" class="headerlink" title="调整左栏和文章栏位置"></a>调整左栏和文章栏位置</h3><div class="note note-danger">            <p>下面这种修改方法已弃用，存在缩放变形问题</p>          </div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 文章栏修改 */</span><br><span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">103%</span>;<br>    <span class="hljs-attribute">right</span>: -<span class="hljs-number">18%</span>; <br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">767px</span>) &#123;<br>    <span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">424px</span>) &#123;<br>    <span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 侧边栏修改 */</span><br><span class="hljs-selector-class">.side-col</span><span class="hljs-selector-class">.d-none</span><span class="hljs-selector-class">.d-lg-block</span><span class="hljs-selector-class">.col-lg-2</span> &#123;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">12%</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他调整"><a href="#其他调整" class="headerlink" title="其他调整"></a>其他调整</h3><ul><li><p>waifu.css 调整看板娘大小，对话框大小</p></li><li><p>szgotop.css 调整悬挂的猫位置</p></li></ul><h3 id="新的修改方法"><a href="#新的修改方法" class="headerlink" title="新的修改方法"></a>新的修改方法</h3><p>修改 <code>blog\themes\fluid\layout\_partials\post\sidebar-left.ejs</code>，新增一栏占位，右栏删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;div class=&quot;row nomargin-x&quot;&gt;<br>    //新增一栏占左位<br>    &lt;div class=&quot;side-col d-none d-lg-block col-lg-1&quot;&gt;<br>    &lt;/div&gt;<br>    <br>    //左栏<br>    &lt;div class=&quot;side-col d-none d-lg-block col-lg-2&quot;&gt;<br>      &lt;%- inject_point(&#x27;postLeft&#x27;) %&gt;<br>    &lt;/div&gt;<br><br>    //文章栏<br>    &lt;div class=&quot;col-lg-8 nopadding-x-md&quot;&gt;<br>     <br>    &lt;/div&gt;<br><br>    //右栏<br>    &lt;div class=&quot;side-col d-none d-lg-block col-lg-2&quot;&gt;<br>      &lt;%- inject_point(&#x27;postRight&#x27;) %&gt;<br>    &lt;/div&gt;<br></code></pre></td></tr></table></figure><p>增加css样式，减小文字页边距，增加@media (min-width: 992px)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 减小文字页边距 */</span><br><span class="hljs-selector-class">.post-content</span>&#123;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">8%</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">8%</span>;<br>&#125;<br><br><span class="hljs-comment">/* 侧边栏和文章栏修改 */</span><br><span class="hljs-comment">/* 原992 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">992px</span>)&#123; <br>    <span class="hljs-selector-class">.col-lg-1</span>&#123;<br>        -ms-<span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10%</span>; <br>        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10%</span>; <br>        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">10%</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.col-lg-2</span> &#123;<br>        -ms-<span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">16.666667%</span>;<br>        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">16.666667%</span>;<br>        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">16.666667%</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.col-lg-8</span>&#123;<br>        -ms-<span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">70%</span>;<br>        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">70%</span>;<br>        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">70%</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="新增最近文章和相关文章"><a href="#新增最近文章和相关文章" class="headerlink" title="新增最近文章和相关文章"></a>新增最近文章和相关文章</h3><p>借鉴 <code>archive-list.ejs</code> 和 <code>category-list.ejs</code></p><p>修改 <code>blog\themes\fluid\layout\_partials\post\sidebar-left.ejs</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!-- 添加公告栏时钟 --&gt;<br>  &lt;div id=&quot;clockdiv&quot; class=&quot;side_container&quot; style=&quot;margin-right: -1rem; margin-top: 2rem; text-align: center; left: 5rem&quot;&gt;<br>    &lt;canvas id=&quot;dom&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;时钟canvas&lt;/canvas&gt;<br>  &lt;/div&gt;<br>  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/clock.js&quot;&gt;&lt;/script&gt;<br><br>  &lt;aside class=&quot;sidebar&quot; style=&quot;margin-right: -1rem; margin-top: 15px; left: 5rem&quot;&gt;<br>    &lt;div class=&quot;side_container&quot; &gt;<br>      &lt;%- partial(&#x27;_partials/post/toc&#x27;) %&gt;<br>    &lt;/div&gt;<br><br>    &lt;div class=&quot;side_container category-bar&quot; style=&quot;margin-top: 2rem;&quot; &gt;<br>      &lt;p&gt;<br>        &lt;i class=&quot;iconfont icon-list&quot;&gt;&lt;/i&gt;<br>        &lt;a style=&quot;font-weight: 700; font-size: 1.25em; text-indent: 2em; text-align: justify!important;&quot;&gt;相关文章 &lt;/a&gt;<br>      &lt;/p&gt;      <br>      &lt;%- partial(&#x27;_partials/custom/relative-post&#x27;) %&gt;<br>    &lt;/div&gt;  <br><br>    &lt;div class=&quot;side_container category-bar&quot; style=&quot;margin-top: 2rem;&quot; &gt;<br>      &lt;p&gt;<br>        &lt;i class=&quot;iconfont icon-list&quot;&gt;&lt;/i&gt;<br>        &lt;a style=&quot;font-weight: 700; font-size: 1.25em; text-indent: 2em; text-align: justify!important;&quot;&gt;近期文章 &lt;/a&gt;<br>      &lt;/p&gt;<br>      &lt;div class=&quot;list-group&quot;&gt;<br>        &lt;% site.posts.sort(&#x27;-date&#x27;).slice(0,5).each(function (post) &#123; %&gt;<br>          &lt;a href=&quot;&lt;%= url_for(post.path) %&gt;&quot; class=&quot;list-group-item list-group-item-action&quot;&gt;<br>            &lt;time style=&quot;flex: 0 0 3.5rem;&quot;&gt;&lt;%= date(post.date, &quot;MM-DD&quot;) %&gt;&lt;/time&gt;<br>            &lt;div class=&quot;list-group-item-title&quot;&gt;&lt;%= post.title %&gt;&lt;/div&gt;<br>          &lt;/a&gt;<br>        &lt;% &#125;) %&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/aside&gt;<br></code></pre></td></tr></table></figure><p>新增 <code>blog\themes\fluid\layout\_partials\custom\relative-post.ejs</code>，获取同子分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;%<br>var parent = page.categories.filter(c =&gt; c)<br>if(parent[&quot;length&quot;] &gt; 1)&#123;<br>    parent = page.categories.filter(c =&gt; c.parent)<br>&#125;<br><br>var filterIds = page.categories.map(c =&gt; c._id)<br>filterIds.push(page._id)<br>%&gt;<br><br>&lt;%- partial(&#x27;_partials/custom/relative-post-list&#x27;, &#123;<br>    curCats  : parent,<br>    params: &#123;<br>      type     : &#x27;post&#x27;,<br>      filterIds: filterIds,<br>      postLimit: theme.post.category_bar.post_limit,<br>      postOrderBy: theme.post.category_bar.post_order_by || config.index_generator.order_by<br>    &#125;<br>&#125;) %&gt;<br></code></pre></td></tr></table></figure><p>新增 <code>blog\themes\fluid\layout\_partials\custom\relative-post-list.ejs</code>，获取同子分类文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;% function render_categories(curCats, params = &#123;&#125;, depth = 0) &#123; %&gt;<br>    &lt;% return curCats.each((cat) =&gt; &#123; %&gt;<br>        &lt;% var subCats = site.categories.find(&#123; parent: cat._id &#125;).sort(params.orderBy || &#x27;name&#x27;).filter(cat =&gt; cat.length) %&gt;<br>        &lt;% var collapsed = subCats.length === 0 || depth &gt;= theme.category.collapse_depth %&gt;<br>        &lt;% if ((params.filterIds || []).includes(cat._id)) collapsed = false %&gt;<br>        <br>        &lt;div class=&quot;category-collapse collapse &lt;%= collapsed ? &#x27;&#x27; : &#x27;show&#x27; %&gt;&quot; id=&quot;collapse-&lt;%= md5(cat.name) %&gt;&quot;<br>                role=&quot;tabpanel&quot; aria-labelledby=&quot;heading-&lt;%= md5(cat.name) %&gt;&quot;&gt;<br>            &lt;% var posts = cat.posts.sort(params.postOrderBy || &#x27;-date&#x27;) %&gt;<br>            &lt;%- render_posts(posts, cat, params) %&gt;<br>        &lt;/div&gt;<br>    &lt;% &#125;) %&gt;<br>&lt;% &#125; %&gt;<br>  <br>&lt;% function render_posts(posts, cat, params) &#123; %&gt;<br>&lt;div class=&quot;category-post-list&quot;&gt;<br>    &lt;% var limit = 5 /*params.postLimit*/ %&gt;<br>    &lt;% for (var idx = 0; idx &lt; posts.length; idx++) &#123; %&gt;<br>        &lt;% var post = posts.data[idx] %&gt;<br>        &lt;% if (idx &amp;&amp; limit &amp;&amp; idx &gt;= limit) &#123; %&gt;<br>            &lt;a href=&quot;&lt;%= url_for(cat.path) %&gt;&quot; class=&quot;list-group-item list-group-item-action&quot;&gt;<br>            &lt;span class=&quot;category-post&quot;&gt;&lt;%- __(&#x27;category.more&#x27;) %&gt;&lt;/span&gt;<br>            &lt;/a&gt;<br>            &lt;% break %&gt;<br>        &lt;% &#125; else &#123; %&gt;<br>            &lt;a href=&quot;&lt;%= url_for(post.path) %&gt;&quot; title=&quot;&lt;%= post.title %&gt;&quot;<br>                class=&quot;list-group-item list-group-item-action<br>                &lt;%= (params.filterIds || []).includes(post._id) ? &#x27;active&#x27; : &#x27;&#x27;  %&gt;&quot;&gt;<br>            &lt;span class=&quot;category-post&quot; style=&quot;white-space: nowrap; overflow: hidden; text-overflow: ellipsis;&quot;&gt;&lt;%= post.title %&gt;&lt;/span&gt;<br>            &lt;/a&gt;<br>        &lt;% &#125; %&gt;<br>    &lt;% &#125; %&gt;<br>&lt;/div&gt;<br>&lt;% &#125; %&gt;<br>  <br>&lt;div class=&quot;category-list&quot;&gt;<br>&lt;%- render_categories(curCats, params) %&gt;<br>&lt;/div&gt;<br><br>&lt;% function shuffleArray(array) &#123;<br>    for (let i = array.length - 1; i &gt; 0; i--) &#123;<br>      const j = Math.floor(Math.random() * (i + 1));<br>      [array[i], array[j]] = [array[j], array[i]];<br>    &#125;<br>    return array;<br>  &#125; %&gt;<br></code></pre></td></tr></table></figure><p>侧栏左右翻页，参考<a href="https://bambrow.com/20200726-hexo-blog-toggles/">Hexo 静态博客添加可折叠内容 | Bambrow’s Blog</a></p><h3 id="动态标签栏"><a href="#动态标签栏" class="headerlink" title="动态标签栏"></a>动态标签栏</h3><p>hexo cloud tag</p><p>标签云</p><p><a href="https://github.com/D0n9X1n/hexo-tag-cloud">https://github.com/D0n9X1n/hexo-tag-cloud</a></p>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化篇（三）：初级主题魔改</title>
      <link href="/posts/5a79.html"/>
      <url>/posts/5a79.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、页面加载动画"><a href="#一、页面加载动画" class="headerlink" title="一、页面加载动画"></a>一、页面加载动画</h2><blockquote><p><a href="https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify/">🔗Hexo博客Fluid主题魔改记录 - KEVIN’S BLOG (kevinchu.top)</a></p></blockquote><h3 id="1-基础配置步骤"><a href="#1-基础配置步骤" class="headerlink" title="1. 基础配置步骤"></a>1. 基础配置步骤</h3><ol><li>创建<code>loading.ejs</code>文件于<code>themes\fluid\layout\_partials\</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;%<br>    play_time=theme.loading.play_time || 500<br>%&gt;<br><br>&lt;style type=&quot;text/css&quot;&gt;<br>    @keyframes spin3D &#123;<br>        from &#123;<br>            transform: rotate3d(0.5, 0.5, 0.5, 360deg);<br>        &#125;<br><br>        to &#123;<br>            transform: rotate3d(0deg);<br>        &#125;<br>    &#125;<br><br>    #loading &#123;<br>        height: 100%;<br>        background-color: #172d4781;<br>        backdrop-filter: saturate(100%) blur(10px);<br>        display: flex;<br>        justify-content: center;<br>        align-items: center;<br>        position: fixed;<br>        top: 0;<br>        left: 0;<br>        right: 0;<br>        overflow: hidden;<br>        z-index: 99999999;<br>    &#125;<br><br>    .spinner-box &#123;<br>        width: 300px;<br>        height: 300px;<br>        display: flex;<br>        justify-content: center;<br>        align-items: center;<br>        background-color: transparent;<br>    &#125;<br><br>    .leo &#123;<br>        position: absolute;<br>        display: flex;<br>        justify-content: center;<br>        align-items: center;<br>        border-radius: 50%;<br>    &#125;<br><br>    .blue-orbit &#123;<br>        width: 175px;<br>        height: 175px;<br>        border: 2px solid #1a91fa;<br>        animation: spin3D 3s linear .2s infinite;<br>    &#125;<br><br>    .green-orbit &#123;<br>        width: 135px;<br>        height: 135px;<br>        border: 2px solid #00ffdd;<br>        animation: spin3D 2s linear 0s infinite;<br>    &#125;<br><br>    .red-orbit &#123;<br>        width: 100px;<br>        height: 100px;<br>        border: 2px solid #d75151;<br>        animation: spin3D 1s linear 0s infinite;<br>    &#125;<br><br>    .white-orbit-a &#123;<br>        width: 70px;<br>        height: 70px;<br>        border: 1px solid #faf5f5;<br>        animation: spin3D 3s linear 0s infinite;<br>    &#125;<br><br>    .white-orbit-b &#123;<br>        width: 70px;<br>        height: 70px;<br>        border: 1px solid #faf5f5;<br>        animation: spin3D 1.5s linear 0s infinite;<br>    &#125;<br><br>    .nucleus &#123;<br>        width: 1px;<br>        height: 1px;<br>        border: 1px solid #ffffff;<br>        animation: spin3D 1s linear 0s infinite;<br>    &#125;<br>&lt;/style&gt;<br><br>&lt;div id=&quot;loading&quot;&gt;<br>    &lt;div class=&quot;spinner-box&quot;&gt;<br>        &lt;div class=&quot;blue-orbit leo&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;green-orbit leo&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;red-orbit leo&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;white-orbit-a leo&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;white-orbit-b leo&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;nucleus leo&quot;&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    (function () &#123;<br>        const loaded = function () &#123;<br>            window.onload = function () &#123;<br>                const loader = document.getElementById(&quot;loading&quot;);<br>                loader.className = &quot;fadeout&quot;;<br>                setTimeout(function () &#123;<br>                    loader.style.display = &quot;none&quot;;<br>                &#125;, <br>                &lt;%- play_time %&gt;<br>                );<br>            &#125;<br>        &#125;;<br>        loaded();<br>    &#125;)();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>在<code>layout.ejs</code>的<code>&lt;body&gt;</code>标签内首行插入：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;% if (theme.loading.enable) &#123; %&gt;<br>  &lt;%- partial(&#x27;_partials/loading.ejs&#x27;) %&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><h3 id="2-动画控制脚本"><a href="#2-动画控制脚本" class="headerlink" title="2. 动画控制脚本"></a>2. 动画控制脚本</h3><p>增加超过1s移除功能，需放于较前位置加载：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//移除加载动画</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;loading&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h3 id="3-主题配置项"><a href="#3-主题配置项" class="headerlink" title="3. 主题配置项"></a>3. 主题配置项</h3><p>修改主题配置文件<code>_config.fluid.yml</code>，添加loading动画的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 加载动画</span><br><span class="hljs-attr">loading:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 动画时长，从动画开始播放计算，不包含页面加载时间，单位ms</span><br>  <span class="hljs-attr">play_time:</span> <span class="hljs-number">500</span><br></code></pre></td></tr></table></figure><h2 id="二、全屏背景方案"><a href="#二、全屏背景方案" class="headerlink" title="二、全屏背景方案"></a>二、全屏背景方案</h2><h3 id="1-全屏背景固定方案"><a href="#1-全屏背景固定方案" class="headerlink" title="1. 全屏背景固定方案"></a>1. 全屏背景固定方案</h3><p>全屏背景：<a href="https://qingshaner.com/Hexo%20Fluid%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF%E5%9B%BA%E5%AE%9A(ES6%E6%94%B9%E5%86%99%E7%89%88)%E4%B8%8E%E6%AF%9B%E7%8E%BB%E7%92%83%E5%BA%95%E9%A1%B5/">春草明年绿💔王孙归不归 (qingshaner.com)</a></p><ol><li>创建<code>injector.js</code>：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">root</span>: siteRoot = <span class="hljs-string">&quot;/&quot;</span> &#125; = hexo.<span class="hljs-property">config</span>;<br><span class="hljs-comment">//插入背景图片容器</span><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&quot;body_begin&quot;</span>, <span class="hljs-string">`&lt;div id=&quot;web_bg&quot;&gt;&lt;/div&gt;`</span>);<br><span class="hljs-comment">//插入背景图片js，在加载完成修改全屏，后续已经改成css样式</span><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&quot;body_end&quot;</span>,<span class="hljs-string">`&lt;script src=&quot;<span class="hljs-subst">$&#123;siteRoot&#125;</span>js/backgroundize.js&quot;&gt;&lt;/script&gt;`</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>背景控制脚本<code>backgroundize.js</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span><br>  .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#web_bg&#x27;</span>)<br>  .<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">`background-image: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">document</span>.querySelector(<span class="hljs-string">&#x27;.banner&#x27;</span>).style.background.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]&#125;</span>;position: fixed;width: 100%;height: 100%;z-index: -1;background-size: cover;`</span>);<br><br><span class="hljs-comment">//隐藏原来的banner</span><br><span class="hljs-variable language_">document</span><br>  .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#banner&quot;</span>)<br>  .<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;background-image: url()&#x27;</span>)<br><br><span class="hljs-variable language_">document</span><br>  .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#banner .mask&quot;</span>)<br>  .<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;background-color:rgba(0,0,0,0)&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-毛玻璃效果"><a href="#2-毛玻璃效果" class="headerlink" title="2. 毛玻璃效果"></a>2. 毛玻璃效果</h3><ol><li>透明背景</li></ol><p><code>_config.fluid.yml</code>修改背景色为透明</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 主面板背景色</span><br><span class="hljs-comment"># Color of main board</span><br><span class="hljs-attr">board_color:</span> <span class="hljs-string">&quot;#ffffff80&quot;</span><br><span class="hljs-attr">board_color_dark:</span> <span class="hljs-string">&quot;#00000080&quot;</span><br></code></pre></td></tr></table></figure><p>2.毛玻璃滤镜</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">css`文件夹新建`cloudedGlass<span class="hljs-selector-class">.css</span><br><span class="hljs-selector-id">#board</span> &#123;<br>  -webkit-backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);<br>  backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.引入css<br><code>_config.fluid.yml</code>引入</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attribute">custom_css</span><span class="hljs-punctuation">: </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/cloudedGlass.css</span><br></code></pre></td></tr></table></figure><p><strong>参考链接:</strong></p><p><a href="https://aigisss.com/blog/posts/1563abd8.html">《背景固定 (AIGISSS)》</a></p><p><a href="https://blog.fufu.ink/2023/04/walinedecoration.html">https://blog.fufu.ink/2023/04/walinedecoration.html</a>)</p><h2 id="导航栏标题霓虹灯特效"><a href="#导航栏标题霓虹灯特效" class="headerlink" title="导航栏标题霓虹灯特效"></a>导航栏标题霓虹灯特效</h2><p>修改<code>themes\fluid\source\css\_pages\_base\_widget\header.styl</code>，在里面追加样式(注意缩进)：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.navbar-title</span><br>  <span class="hljs-attribute">outline</span> none<br>  <span class="hljs-attr">--c</span> lightseagreen<br>  <span class="hljs-attribute">text-shadow</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">var</span>(--c),<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-built_in">var</span>(--c),<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">40px</span> <span class="hljs-built_in">var</span>(--c),<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">80px</span> <span class="hljs-built_in">var</span>(--c),<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">160px</span> <span class="hljs-built_in">var</span>(--c)<br>  <span class="hljs-attribute">animation</span> animate <span class="hljs-number">5s</span> linear infinite<br><br><span class="hljs-keyword">@keyframes</span> animate&#123;<br>  to&#123;<br>      <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">hue-rotate</span>(<span class="hljs-number">360deg</span>)<br>  &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>然后修改<code>themes\fluid\layout\_partials\header\navigation.ejs</code>，<br>找到对应导航栏标题的标签内容：<br><code>&lt;strong&gt;&lt;%= theme.navbar.blog_title || config.title %&gt;&lt;/strong&gt;</code><br>给其添加上class属性，修改为：<br><code>&lt;strong class=&quot;navbar-title&quot;&gt;&lt;%= theme.navbar.blog_title || config.title %&gt;&lt;/strong&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化篇（二）：实用功能组件</title>
      <link href="/posts/5a78.html"/>
      <url>/posts/5a78.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、萌萌哒看板娘"><a href="#一、萌萌哒看板娘" class="headerlink" title="一、萌萌哒看板娘"></a>一、萌萌哒看板娘</h2><h3 id="1-安装步骤"><a href="#1-安装步骤" class="headerlink" title="1. 安装步骤"></a>1. 安装步骤</h3><ol><li><p>下载<a href="https://github.com/stevenjoezhang/live2d-widget">stevenjoezhang&#x2F;live2d-widget</a></p></li><li><p>解压到<code>/source/live2d-widget</code>目录</p></li><li><p>修改<code>autoload.js</code>：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const live2d_path <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/live2d-widget/&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-API配置优化"><a href="#2-API配置优化" class="headerlink" title="2. API配置优化"></a>2. API配置优化</h3><p><code>autoload.js</code>下的第34行是填写了live2d模型的API，如果你在国内可能<code>jsdelivr.net</code>CDN不仅不能加速，还会减速，我们把他注释掉，然后使用fghrsh的API接口：<a href="https://www.fghrsh.net/post/170.html"><code>live2d.fghrsh.net</code></a>。或者你拥有自己的服务器，也可以自己搭建<a href="https://github.com/fghrsh/live2d_api">live2d API项目</a>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">initWidget</span>(&#123;<br>  <span class="hljs-attr">waifuPath</span>: live2d_path + <span class="hljs-string">&quot;waifu-tips.json&quot;</span>,<br>  <span class="hljs-attr">apiPath</span>: <span class="hljs-string">&quot;https://live2d.fghrsh.net/api/&quot;</span>,<br>  // <span class="hljs-attr">cdnPath</span>: <span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/fghrsh/live2d_api/&quot;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-主题引入方式"><a href="#3-主题引入方式" class="headerlink" title="3. 主题引入方式"></a>3. 主题引入方式</h3><p>在布局文件中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入jQuery和font-awesome。你的主题如果默认引入了，那请不要重复引入。2020年1月1日起，该项目不再依赖于 jQuery。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;script <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>&gt;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 和 waifu.css。</p>          </div><h3 id="4-参考教程"><a href="#4-参考教程" class="headerlink" title="4. 参考教程"></a>4. 参考教程</h3><p>配置博客：<a href="https://www.cnblogs.com/cxfs/p/16620809.html">给你的hexo添加live2D看板娘 - 遗失的美好灬 - 博客园 (cnblogs.com)</a></p><p>加强版项目地址：<a href="https://github.com/stevenjoezhang/live2d-widget">stevenjoezhang&#x2F;live2d-widget: 把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ | Live2D widget for web platform (github.com)</a></p><p>看板娘拖拽功能： <a href="https://github.com/pymastera/live2d-widget/pull/2/files">https://github.com/pymastera/live2d-widget/pull/2/files</a></p><p>纯本地版：<a href="https://blog.csdn.net/qq_57421630/article/details/127162328">【live2D看板娘】为你的网站添加萌萌的二次元板娘，这都拿不下你？-CSDN博客</a></p><h2 id="二、音乐播放器"><a href="#二、音乐播放器" class="headerlink" title="二、音乐播放器"></a>二、音乐播放器</h2><h3 id="1-推荐方案"><a href="#1-推荐方案" class="headerlink" title="1. 推荐方案"></a>1. 推荐方案</h3><ul><li><strong>MetingJS</strong>：<a href="https://github.com/xizeyoupan/MetingJS"><a href="https://github.com/xizeyoupan/MetingJS">xizeyoupan&#x2F;MetingJS: :cake: A powerful plugin connect APlayer and Meting (github.com)</a></a></li><li><strong>部署API</strong>：<a href="https://github.com/imsyy/Meting-API/">imsyy&#x2F;Meting-API: 🐳 Meting API 的容器化与部署 (github.com)</a>](<a href="https://github.com/imsyy/Meting-API/">https://github.com/imsyy/Meting-API/</a>)</li><li><strong>美化调整</strong>：<a href="https://blog.saop.cc/p/8dc9/">Butterfly主题Aplayer播放器的美化与调整 | 定の栈 (saop.cc)</a></li></ul><h3 id="2-明月浩空播放器"><a href="#2-明月浩空播放器" class="headerlink" title="2. 明月浩空播放器"></a>2. 明月浩空播放器</h3><p><a href="https://myhkw.cn/">🎵明月浩空网-永久免费的HTML5网站音乐播放器 (myhkw.cn)</a></p><h3 id="3-自动播放失效问题解决"><a href="#3-自动播放失效问题解决" class="headerlink" title="3. 自动播放失效问题解决"></a>3. 自动播放失效问题解决</h3><p>原因：hexo-neat插件将 autoplay&#x3D;true 压缩成了 autoplay</p><p>设置collapseBooleanAttributes &#x3D; false</p><h2 id="三、实用小功能组件"><a href="#三、实用小功能组件" class="headerlink" title="三、实用小功能组件"></a>三、实用小功能组件</h2><h3 id="1-一言"><a href="#1-一言" class="headerlink" title="1. 一言"></a>1. 一言</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitokoto&quot;</span>&gt;</span>:D 获取中...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-悬挂的喵"><a href="#2-悬挂的喵" class="headerlink" title="2. 悬挂的喵"></a>2. 悬挂的喵</h3><p>参考博客园：<a href="https://blog.csdn.net/fshool/article/details/104688363">博客园使用悬挂猫(上吊猫)置顶插件-CSDN博客</a>，可实现快速返回顶部的功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 悬挂的喵 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/szgotop.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/css/szgotop.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back-to-top cd-top faa-float animated cd-is-visible&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;top: -900px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-粒子时钟"><a href="#3-粒子时钟" class="headerlink" title="3. 粒子时钟"></a>3. 粒子时钟</h3><p><a href="https://www.cnblogs.com/xiaohuochai/p/6368039.html">canvas粒子时钟 - 小火柴的蓝色理想 - 博客园 (cnblogs.com)</a></p><h3 id="4-天气模块"><a href="#4-天气模块" class="headerlink" title="4. 天气模块"></a>4. 天气模块</h3><p>使用<a href="https://www.seniverse.com/">心知天气</a>提供的免费API</p><h2 id="四、风格代码块"><a href="#四、风格代码块" class="headerlink" title="四、风格代码块"></a>四、风格代码块</h2><h3 id="行内代码颜色"><a href="#行内代码颜色" class="headerlink" title="行内代码颜色"></a>行内代码颜色</h3><p>默认的行内代码颜色和正文颜色是继承关系，且行内代码背景色也不明显，因此视觉上难以区分。但是配置文件中又没有对应选项可以修改，查阅 GitHub 的 Issue 发现，有人曾提供过一个解决方案。</p><p>打开路径 <code>hewei2001/themes/fluid/source/css/_pages/_base</code> 下的 <code>base.styl</code> 文件，找到 <code>code</code> 配置项，修改颜色为 <code>#E05B35</code>。</p><h3 id="Mac风格代码块"><a href="#Mac风格代码块" class="headerlink" title="Mac风格代码块"></a>Mac风格代码块</h3><p>在主题文件<code>\source\css</code>目录下新建样式文件，如<code>macpanel.styl</code>，内容参考：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.highlight</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#21252b</span><br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">30px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">4</span>)<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">30px</span><br><br>    <span class="hljs-selector-pseudo">&amp;::before</span><br>      <span class="hljs-attribute">background</span>: <span class="hljs-number">#fc625d</span><br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span><br>      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">#fdbc40</span>, <span class="hljs-number">40px</span> <span class="hljs-number">0</span> <span class="hljs-number">#35cd4b</span><br>      <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27; &#x27;</span><br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span><br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">12px</span><br>      <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">20px</span><br>      <span class="hljs-attribute">position</span>: absolute<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">12px</span><br></code></pre></td></tr></table></figure><p>修改主题配置文件<code>_config.fluid.yml</code>，找到<code>custom_css</code>配置项，引入刚刚新建的样式文件（此处引入<code>.styl</code>文件无需加后缀）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/macpanel</span><br></code></pre></td></tr></table></figure><p>继续修改<code>_config.fluid.yml</code>，找到<code>code.highlightjs</code>配置项，将代码高亮风格修改暗色风格（dark系列），如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">highlightjs:</span><br>  <span class="hljs-comment"># 在链接中挑选 style 填入</span><br>  <span class="hljs-comment"># Select a style in the link</span><br>  <span class="hljs-comment"># See: https://highlightjs.org/static/demo/</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;github dark dimmed&quot;</span><br>  <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;dark&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：如果选用其他代码高亮风格，有可能会造成代码背景是偏白色的，与黑色的Mac栏不搭。</p></blockquote><h2 id="五、AI摘要"><a href="#五、AI摘要" class="headerlink" title="五、AI摘要"></a>五、AI摘要</h2><p>参考教程</p><p><a href="https://mabbs.github.io/2024/07/03/ai-summary.html">使用Cloudflare Workers制作博客AI摘要 | Mayx的博客 (mabbs.github.io)</a></p><p><a href="https://github.com/FloatSheep/Qwen-Post-Summary">https://github.com/FloatSheep/Qwen-Post-Summary</a></p><p>文章页面中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>AI摘要：<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ai-output&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: justify&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="六、评论系统"><a href="#六、评论系统" class="headerlink" title="六、评论系统"></a>六、评论系统</h2><p>参考Fluid主题教程配置</p><h3 id="Waline评论系统美化"><a href="#Waline评论系统美化" class="headerlink" title="Waline评论系统美化"></a>Waline评论系统美化</h3><ul><li>贴图功能实现</li><li>自定义样式参考：<br><a href="https://blog.fufu.ink/2023/04/walinedecoration.html">Waline美化教程</a></li></ul><blockquote><p>提示：所有自定义样式建议通过主题的<code>_config.yml</code>中的<code>custom_css</code>配置项引入，避免直接修改主题源文件。<a href="https://blog.fufu.ink/2023/04/walinedecoration.html">https://blog.fufu.ink/2023/04/walinedecoration.html</a>)</p></blockquote><h3 id="waline评论和leancloud计数问题"><a href="#waline评论和leancloud计数问题" class="headerlink" title="waline评论和leancloud计数问题"></a>waline评论和leancloud计数问题</h3><p>原因：不同静态页面托管平台对html后缀处理不统一，导致同一页面waline的Path参数不一致</p><p>修改waline.ejs中<code>waline.init()</code>中的Path为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPath</span>(<span class="hljs-params">path</span>)&#123;<br>    <span class="hljs-keyword">if</span>(path.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;/index.html&quot;</span>))&#123;<br>        <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(path.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;.html&quot;</span>))&#123;<br>        <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">5</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> path;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、页脚信息"><a href="#七、页脚信息" class="headerlink" title="七、页脚信息"></a>七、页脚信息</h2><h3 id="1-网站运行时间"><a href="#1-网站运行时间" class="headerlink" title="1. 网站运行时间"></a>1. 网站运行时间</h3><p>在页脚添加网站运行时间统计</p><h3 id="2-萌国备案"><a href="#2-萌国备案" class="headerlink" title="2. 萌国备案"></a>2. 萌国备案</h3><p><a href="https://moe.one/thread-433.htm">萌ICP备案指南</a><br>图标包下载：<a href="https://icp.gov.moe/moe-icon.zip">moe-icon.zip</a><a href="https://icp.gov.moe/?keyword=20240658">https://icp.gov.moe/?keyword=20240658</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化篇（一）：简单JS与CSS引入</title>
      <link href="/posts/5a77.html"/>
      <url>/posts/5a77.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo引入自定义HTML，JS，CSS"><a href="#Hexo引入自定义HTML，JS，CSS" class="headerlink" title="Hexo引入自定义HTML，JS，CSS"></a>Hexo引入自定义HTML，JS，CSS</h2><h3 id="使用Injector注入器（推荐）"><a href="#使用Injector注入器（推荐）" class="headerlink" title="使用Injector注入器（推荐）"></a>使用Injector注入器（推荐）</h3><p>在博客根目录<code>scripts</code>文件夹下创建任意名称的js文件：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xquery">hexo.extend.injector.register(<span class="hljs-string">&#x27;body_end&#x27;</span>, <br>`<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/custom.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>`, <br><span class="hljs-string">&#x27;default&#x27;</span>);<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>body_end</code>：注入位置（可替换为<code>head_end</code>等）</li><li>&#96;&#96;：注入内容</li><li><code>default</code>：作用范围（全局）</li></ul><p><a href="https://hexo.io/zh-cn/api/injector">官方Injector文档参考</a></p><h3 id="使用css-js引入的方法"><a href="#使用css-js引入的方法" class="headerlink" title="使用css&#x2F;js引入的方法"></a>使用css&#x2F;js引入的方法</h3><p>在<code>/source/assets/js/</code>文件夹下新建js文件，写入相应代码内容。配置好代码文件后打开主题配置文件_config.yml找到”custom_js”和”custom_css”下面进行引入。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">custom_js:<br>  - <span class="hljs-regexp">/assets/</span>js/custom.js<br>  - https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/npm/</span>aplayer<span class="hljs-regexp">/dist/</span>APlayer.min.js  <span class="hljs-comment">#引入外部js</span><br>custom_css:<br>  - <span class="hljs-regexp">/assets/</span>css/custom.css<br></code></pre></td></tr></table></figure><h2 id="常用特效资源"><a href="#常用特效资源" class="headerlink" title="常用特效资源"></a>常用特效资源</h2><h3 id="JS特效"><a href="#JS特效" class="headerlink" title="JS特效"></a>JS特效</h3><div class="note note-info">            <p>建议添加defer属性，defer可以实现延迟执行脚本，下载则不会被阻塞。可防止<strong>阻塞HTM 的DOM构建</strong></p><p><code>&lt;script defer src=&quot;app.js&quot;&gt;&lt;/script&gt;</code></p>          </div><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">樱花特效：https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>Ukenn2112<span class="hljs-regexp">/UkennWeb@3.0/i</span>ndex/web.js<br>鼠标移动小星星特效：https:<span class="hljs-regexp">//</span>static.kevinchu.top<span class="hljs-regexp">/blog/</span>assets<span class="hljs-regexp">/js/</span>stars.js<br>礼花打字特效：https:<span class="hljs-regexp">//</span>static.kevinchu.top<span class="hljs-regexp">/blog/</span>assets<span class="hljs-regexp">/js/</span>typing-effect.js<br>小雪花飘落效果：https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>EmoryHuang<span class="hljs-regexp">/BlogBeautify@1.1/</span>snowflake.min.js<br>鼠标点击出字（defer）：https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>EmoryHuang<span class="hljs-regexp">/BlogBeautify@1.1/</span>containsWord.min.js<br>鼠标点击爱心（defer）：https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>EmoryHuang<span class="hljs-regexp">/BlogBeautify@1.1/</span>love.min.js <br></code></pre></td></tr></table></figure><p>更多特效参考：<a href="https://chen320.github.io/2022/07/14/Hexo-Fluid%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/">Hexo-Fluid博客主题美化 - Chen’s Blog (chen320.github.io)</a></p><p>鼠标点击特效（烟花特效）：<a href="https://blog.csdn.net/qq_43562785/article/details/109511585">纯Javascript实现鼠标点击特效（烟花特效）_js鼠标点击效果-CSDN博客</a></p><h4 id="浏览器标题恶搞"><a href="#浏览器标题恶搞" class="headerlink" title="浏览器标题恶搞"></a>浏览器标题恶搞</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">OriginTitle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>;<br><span class="hljs-keyword">var</span> titleTime;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">hidden</span>) &#123;<br>        $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/img/favicon.png&quot;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;╭(°A°`)╮ 页面崩溃啦 ~&#x27;</span>;<br>        <span class="hljs-built_in">clearTimeout</span>(titleTime);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/img/favicon.png&quot;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~&#x27;</span> + <span class="hljs-title class_">OriginTitle</span>;<br>        titleTime = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title class_">OriginTitle</span>;<br>        &#125;, <span class="hljs-number">2000</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="CSS渲染"><a href="#CSS渲染" class="headerlink" title="CSS渲染"></a>CSS渲染</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">鼠标：https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>EmoryHuang<span class="hljs-regexp">/BlogBeautify@1.1/</span>shubiao.css<br>滚动条颜色：https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>EmoryHuang<span class="hljs-regexp">/BlogBeautify@1.1/</span>scroll.css<br>头部打字机颜色效果渐变：https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>EmoryHuang<span class="hljs-regexp">/BlogBeautify@1.1/g</span>radient.css<br><span class="hljs-regexp">//</span> 增加下面的css,针对文章标题<br><span class="hljs-comment">#subtitle &#123;</span><br>     background-size: auto !important;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="标题颜色-首行缩进-代码框表格框折叠"><a href="#标题颜色-首行缩进-代码框表格框折叠" class="headerlink" title="标题颜色,首行缩进,代码框表格框折叠:"></a>标题颜色,首行缩进,代码框表格框折叠:</h4><p><a href="https://gilgamesh-lzq.github.io/blog/6560820db005/">hexo博客fluid主题美化 - Gilgamesh’s Blog (gilgamesh-lzq.github.io)</a></p><h4 id="设置表格最大高度"><a href="#设置表格最大高度" class="headerlink" title="设置表格最大高度"></a>设置表格最大高度</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 代码和表格设置最大高度，高度或宽度超出都不会显示在页面中，可以通过滚动条查看 */</span><br><span class="hljs-selector-tag">figure</span> <span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">word-break</span>: initial;<br>    <span class="hljs-attribute">overflow-x</span>: auto;<br>    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">30em</span>;<br>    <span class="hljs-attribute">overflow-y</span>: auto <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="黑暗模式作用域（适配黑暗模式）"><a href="#黑暗模式作用域（适配黑暗模式）" class="headerlink" title="黑暗模式作用域（适配黑暗模式）:"></a>黑暗模式作用域（适配黑暗模式）:</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 黑暗模式作用域 */</span><br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> <span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">background-image</span>: none;<br>&#125;<br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> <span class="hljs-selector-id">#board</span>&#123;<br>    <span class="hljs-attribute">background-image</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义博客字体"><a href="#自定义博客字体" class="headerlink" title="自定义博客字体"></a>自定义博客字体</h2><p>Web字体在线生成：<a href="https://transfonter.org/">Online @font-face generator — Transfonter</a></p><p> <a href="https://blog.csdn.net/sinat_36728518/article/details/135382779">CSS免费在线字体格式转换器 CSS @font-face 生成器_font-face生成器-CSDN博客</a></p><p>两个实现了自定义字体的博客：</p><p> <a href="https://largesse.netlify.app/posts/3c2a5351">Hexo Fluid主题 添加自定义字体 - Largesse’s blog</a></p><p><a href="https://www.erenship.com/posts/40222.html">Hexo’s Fluid 主题私人定制（持续更新） - Eren の 宇宙船 (erenship.com)</a></p><h2 id="压缩静态资源"><a href="#压缩静态资源" class="headerlink" title="压缩静态资源"></a>压缩静态资源</h2><div class="note note-warning">            <p>博客中有大量 HTML、CSS、JS 文件，这些文件为了阅读方便会加入许多回车和空行，但在页面解析时其实会浪费部分时间，此外如果有许多插图，也会拖慢网页加载，并占据 GitHub 仓库的存储空间。</p>          </div><p>目前有关插件有 <code>gulp</code>、<code>hexo-neat</code>、<code>hexo-all-minifier</code>。推荐采用集成度比较高的 <code>hexo-all-minifier</code> 来实现，由于在安装依赖包过程报错，本站最终采用了 <code>hexo-neat</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-all-minifier --save  <span class="hljs-comment"># 出现 npm ERR! code ELIFECYCLE 错误</span><br>$ npm install hexo-neat --save          <span class="hljs-comment"># 换成这个后成功安装</span><br></code></pre></td></tr></table></figure><p>在配置文件 <code>_config.yml</code> 中增加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-neat</span><br><span class="hljs-comment">## Docs: https://github.com/rozbo/hexo-neat</span><br><span class="hljs-attr">neat_enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 压缩 html</span><br><span class="hljs-attr">neat_html:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br><span class="hljs-comment"># 压缩 css  </span><br><span class="hljs-attr">neat_css:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.css&#x27;</span><br><span class="hljs-comment"># 压缩 js</span><br><span class="hljs-attr">neat_js:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mangle:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">output:</span><br>  <span class="hljs-attr">compress:</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/jquery.fancybox.pack.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/index.js&#x27;</span> <br></code></pre></td></tr></table></figure><h2 id="Fluid主题美化参考"><a href="#Fluid主题美化参考" class="headerlink" title="Fluid主题美化参考"></a>Fluid主题美化参考</h2><ul><li><p><a href="https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify/">🔗Hexo博客Fluid主题魔改记录 - KEVIN’S BLOG (kevinchu.top)</a></p></li><li><p><a href="https://www.erenship.com/posts/40222.html">🔗Hexo’s Fluid 主题私人定制（持续更新） - Eren の 宇宙船 (erenship.com)</a></p></li><li><p><a href="https://emoryhuang.cn/blog/1729600336.html">🔗Hexo + Fluid 美化 | EmoryHuang’s Blog</a></p></li><li><p><a href="https://www.jianshu.com/p/ba692a97a602">🔗让你的 Hexo 博客更美观的 N 种配置（基于 Fluid 主题扩展） - 简书 (jianshu.com)</a></p></li><li><p><a href="https://kiyanyang.github.io/posts/f92be1eb/">🔗Hexo-Fluid 博客美化和修改 | Kiyan’s Blog (kiyanyang.github.io)</a></p></li><li><p><a href="https://gilgamesh-lzq.github.io/blog/6560820db005/">🔗hexo博客fluid主题美化 - Gilgamesh’s Blog (gilgamesh-lzq.github.io)</a></p></li><li><p>🔗<a href="https://chen320.github.io/2022/07/14/Hexo-Fluid%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/">Hexo-Fluid博客主题美化 - Chen’s Blog (chen320.github.io)</a></p></li><li><p>🔗<a href="https://www.cnblogs.com/zhangshuhao1116/p/14913401.html">博客园美化：添加公告栏时钟控件 - Shu_HowZ - 博客园 (cnblogs.com)</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费开源CDN服务指南</title>
      <link href="/posts/1db4.html"/>
      <url>/posts/1db4.html</url>
      
        <content type="html"><![CDATA[<h2 id="jsDelivr-开源项目CDN首选"><a href="#jsDelivr-开源项目CDN首选" class="headerlink" title="jsDelivr - 开源项目CDN首选"></a>jsDelivr - 开源项目CDN首选</h2><p><strong>官网</strong>: <a href="https://www.jsdelivr.com/">jsDelivr</a><br><strong>特点</strong>:</p><ul><li>支持NPM、GitHub、WordPress资源</li><li>单文件体积限制&lt;50MB</li><li>全球CDN加速</li></ul><p><strong>GitHub资源引用格式</strong>:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/u</span>ser<span class="hljs-regexp">/repo@version/</span>file<br></code></pre></td></tr></table></figure><p><strong>实用技巧</strong>:</p><ol><li>自动压缩: 在JS&#x2F;CSS文件后加<code>.min</code></li><li>目录查看: URL末尾加<code>/</code></li><li>版本控制: 支持语义化版本范围</li></ol><p><strong>示例</strong>:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>jquery<span class="hljs-regexp">/jquery@3.2.1/</span>dist/jquery.min.js<br>https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/g</span>rowvv<span class="hljs-regexp">/img@master/im</span>ages/<span class="hljs-number">20200118222911</span>.jpeg<br></code></pre></td></tr></table></figure><blockquote><p>以图片为例：</p><p>原github链接：<a href="https://raw.githubusercontent.com/growvv/img/master/images/20200118222911.jpeg">https://raw.githubusercontent.com/growvv/img/master/images/20200118222911.jpeg</a></p><p>CDN后的链接：<a href="https://cdn.jsdelivr.net/gh/growvv/img@master/images/20200118222911.jpeg">https://cdn.jsdelivr.net/gh/growvv/img@master/images/20200118222911.jpeg</a></p></blockquote><h2 id="unpkg-npm生态专用CDN"><a href="#unpkg-npm生态专用CDN" class="headerlink" title="unpkg - npm生态专用CDN"></a>unpkg - npm生态专用CDN</h2><p><strong>特点</strong>:</p><ul><li>专为npm包设计</li><li>Cloudflare全球节点(亚洲用户访问香港节点)</li></ul><p><strong>示例</strong>:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://unpkg.com/jquery@<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span>/dist/jquery.min.js<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>除了<code>jsdelivr</code>， 推荐几个免费的且不限流量的CDN，还有 <code>staticaly</code> <code>githack</code> 都是全球通用的，</p><h2 id="Statically-多平台支持"><a href="#Statically-多平台支持" class="headerlink" title="Statically - 多平台支持"></a>Statically - 多平台支持</h2><p><strong>官网</strong>: <a href="https://statically.io/">Statically</a><br><strong>支持平台</strong>:</p><ul><li>GitHub&#x2F;GitLab&#x2F;Bitbucket</li><li>WordPress插件&#x2F;主题</li><li>图片代理</li></ul><p><strong>引用格式</strong>:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># GitHub CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/gh/<span class="hljs-symbol">:user/</span><span class="hljs-symbol">:repo/</span><span class="hljs-symbol">:tag/</span><span class="hljs-symbol">:file</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/gh/growvv/growvv.github.io/master/<span class="hljs-title class_">README</span>.md<br><br><span class="hljs-comment"># GitLab CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/gl/<span class="hljs-symbol">:user/</span><span class="hljs-symbol">:repo/</span><span class="hljs-symbol">:tag/</span><span class="hljs-symbol">:file</span><br><br><span class="hljs-comment"># Bitbucket CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/bb/<span class="hljs-symbol">:user/</span><span class="hljs-symbol">:repo/</span><span class="hljs-symbol">:tag/</span><span class="hljs-symbol">:file</span><br><br><span class="hljs-comment"># WordPress CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/wp/c/<span class="hljs-symbol">:version/wp-includes/</span><span class="hljs-symbol">:file</span>  <br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/wp/p/<span class="hljs-symbol">:plugin_name/</span><span class="hljs-symbol">:version/</span><span class="hljs-symbol">:file</span>  <br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/wp/t/<span class="hljs-symbol">:theme_name/</span><span class="hljs-symbol">:version/</span><span class="hljs-symbol">:file</span><br><br><span class="hljs-comment"># Imgpx CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/img/<span class="hljs-symbol">:image_url</span><br><br><span class="hljs-comment"># Favicons CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/favicons/<span class="hljs-symbol">:favicon_url</span><br></code></pre></td></tr></table></figure><h2 id="GitHack-原始文件直连"><a href="#GitHack-原始文件直连" class="headerlink" title="GitHack - 原始文件直连"></a>GitHack - 原始文件直连</h2><p><strong>官网</strong>: <a href="https://raw.githack.com/">GitHack</a><br><strong>特点</strong>:</p><ul><li>直接提供原始文件</li><li>支持GitHub&#x2F;Bitbucket&#x2F;GitLab</li></ul><p><strong>示例</strong>:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text"># Github CDN<br>//主分支<br>https://rawcdn.githack.com/liub1934/LB-Blog/master/wp-content/themes/Memory/emoji/xiaodianshi/baiyan.png<br><br>//版本分支<br>https://rawcdn.githack.com/liub1934/LB-Blog/8806f440d3f9a7cc3e6125d7d75564e40262c6a8/wp-content/themes/Memory/emoji/xiaodianshi/baiyan.png<br></code></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>: 生产环境建议指定具体版本号，避免使用latest获取最新版本可能导致的兼容性问题。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常杂谈 </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome扩展开发实战：CSDN免关注阅读&amp;破解复制插件</title>
      <link href="/posts/716.html"/>
      <url>/posts/716.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>这是一个针对CSDN博客平台的Chrome扩展，主要功能包括：</p><ul><li>解除”关注博主才能阅读全文”的限制</li><li>破解文章复制限制</li><li>自动清除各类弹窗广告</li><li>优化阅读界面</li></ul><h2 id="核心文件结构"><a href="#核心文件结构" class="headerlink" title="核心文件结构"></a>核心文件结构</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">└─ CSDN取消关注限制<br>   ├─ manifest<span class="hljs-selector-class">.json</span>       <span class="hljs-comment">// 扩展配置文件</span><br>   ├─ <span class="hljs-attribute">background</span><span class="hljs-selector-class">.js</span>       <span class="hljs-comment">// 后台服务脚本</span><br>   ├─ <span class="hljs-attribute">content</span>-script<span class="hljs-selector-class">.js</span>   <span class="hljs-comment">// 页面注入脚本</span><br>   ├─ popup<span class="hljs-selector-class">.html</span>          <span class="hljs-comment">// 弹出窗口界面</span><br>   ├─ popup<span class="hljs-selector-class">.js</span>           <span class="hljs-comment">// 弹出窗口逻辑</span><br>   ├─ style<span class="hljs-selector-class">.css</span>           <span class="hljs-comment">// 样式文件</span><br>   └─ images              <span class="hljs-comment">// 图标资源</span><br></code></pre></td></tr></table></figure><h2 id="关键技术实现"><a href="#关键技术实现" class="headerlink" title="关键技术实现"></a>关键技术实现</h2><h3 id="1-清单配置-manifest-json"><a href="#1-清单配置-manifest-json" class="headerlink" title="1. 清单配置 (manifest.json)"></a>1. 清单配置 (manifest.json)</h3><p><code>manifest.json</code> 是 Chrome 浏览器扩展的核心文件，包含了扩展的元数据、版本信息、所需权限、背景脚本、内容脚本等。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-comment">// 插件的名称</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CNDS无需关注&quot;</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-comment">// 插件描述</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;解锁关注后查看限制&quot;</span><span class="hljs-punctuation">,</span><br>        <br>    <span class="hljs-comment">// 插件的版本</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.1&quot;</span><span class="hljs-punctuation">,</span><br>        <br>    <span class="hljs-comment">// 清单文件的版本，一般为3，2已经弃用</span><br>    <span class="hljs-attr">&quot;manifest_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-comment">// 图标，一般偷懒全部用一个尺寸的也没问题</span><br>    <span class="hljs-attr">&quot;icons&quot;</span><span class="hljs-punctuation">:</span> <br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;16&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/images/icon.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;48&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/images/icon.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;128&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/images/icon.png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-comment">// 会一直常驻的后台JS或后台页面</span><br>    <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;service_worker&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./background.js&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <br><span class="hljs-comment">// 浏览器右上角图标设置</span><br>    <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;default_popup&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;popup.html&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;default_icon &quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/images/icon.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;default_title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CNDS无需关注&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <br>    <span class="hljs-comment">// 权限申请</span><br>    <span class="hljs-attr">&quot;permissions&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;storage&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;tabs&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;scripting&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;notifications&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <br><span class="hljs-comment">//可以访问的网站</span><br>    <span class="hljs-attr">&quot;host_permissions&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;&lt;all_urls&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://blog.csdn.net/&quot;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>完整的配置文档请戳<a href="https://developer.chrome.com/extensions/manifest">这里</a>。</p><h3 id="2-后台服务-background-js"><a href="#2-后台服务-background-js" class="headerlink" title="2. 后台服务 (background.js)"></a>2. 后台服务 (background.js)</h3><p><code>background.js</code> 是扩展的后台脚本，它在扩展的生命周期内持续运行，不受页面加载和卸载的影响。它通常用于处理非页面特定的逻辑，如监听浏览器事件、跨页面通信、管理扩展的状态、存储数据等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//安装时默认启用</span><br>chrome.<span class="hljs-property">runtime</span>.<span class="hljs-property">onInstalled</span>.<span class="hljs-title function_">addListener</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>        <span class="hljs-title class_">Enabled</span>: <span class="hljs-literal">true</span>,      <span class="hljs-comment">//启用扩展</span><br>        <span class="hljs-title class_">Auto</span><span class="hljs-attr">_expand</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//自动展开</span><br>        <span class="hljs-title class_">Enable</span><span class="hljs-attr">_copy</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">//破解复制</span><br>        <span class="hljs-title class_">Clear</span><span class="hljs-attr">_doms</span>: <span class="hljs-literal">true</span>,   <span class="hljs-comment">//清除弹窗</span><br>    &#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;OK: Extension is installed!&#x27;</span>);<br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">//监听tab页面加载，正则匹配CSDN网址</span><br>chrome.<span class="hljs-property">tabs</span>.<span class="hljs-property">onUpdated</span>.<span class="hljs-title function_">addListener</span>(<span class="hljs-function">(<span class="hljs-params">tabId, changeInfo, tab</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/blog.csdn.net/</span>.<span class="hljs-title function_">test</span>(tab.<span class="hljs-property">url</span>) &amp;&amp; <span class="hljs-regexp">/article/</span>.<span class="hljs-title function_">test</span>(tab.<span class="hljs-property">url</span>) &amp;&amp; changeInfo.<span class="hljs-property">status</span> === <span class="hljs-string">&quot;complete&quot;</span>) &#123;<br>        chrome.<span class="hljs-property">scripting</span>.<span class="hljs-title function_">executeScript</span>(&#123;<br>            <span class="hljs-attr">target</span>: &#123;<br>                <span class="hljs-attr">tabId</span>: tabId<br>            &#125;,<br>            <span class="hljs-attr">files</span>: [<span class="hljs-string">&quot;./content-script.js&quot;</span>],<br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;INJECTED SCRIPT SUCC.&quot;</span>);<br>        &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err));<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-页面注入脚本-content-script-js"><a href="#3-页面注入脚本-content-script-js" class="headerlink" title="3. 页面注入脚本 (content-script.js)"></a>3. 页面注入脚本 (content-script.js)</h3><p><code>content-script.js</code>是内容脚本，它会被注入到匹配的页面上下文中执行。内容脚本可以直接访问和操作页面的DOM，因此它们通常用于修改页面内容、监听用户交互、与页面JavaScript交互等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs javascript">chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">get</span>([<span class="hljs-string">&#x27;Enabled&#x27;</span>, <span class="hljs-string">&#x27;Auto_expand&#x27;</span>, <span class="hljs-string">&#x27;Enable_copy&#x27;</span>, <span class="hljs-string">&#x27;Clear_doms&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (value.<span class="hljs-property">Enabled</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;扩展开始执行&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (value.<span class="hljs-property">Enable_copy</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行破解复制&quot;</span>);<br>            <span class="hljs-comment">//enableCopy();   //启用复制</span><br>            <span class="hljs-title function_">enableCopy2</span>();<br>        &#125;<br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行破解关注&quot;</span>);<br>        <span class="hljs-keyword">if</span> (value.<span class="hljs-property">Auto_expand</span>) &#123;<br>            <span class="hljs-title function_">expand</span>(); <span class="hljs-comment">//自动展开</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">modify</span>(); <span class="hljs-comment">//修改防止默认跳转</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (value.<span class="hljs-property">Clear_doms</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行清除弹窗&quot;</span>);<br>            <span class="hljs-title function_">removeDoms</span>(); <span class="hljs-comment">//移除登录弹窗等</span><br><br>            <span class="hljs-comment">//创建新的dom监听器</span><br>            <span class="hljs-keyword">let</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(<span class="hljs-function">(<span class="hljs-params">mutationsList</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> mutation <span class="hljs-keyword">of</span> mutationsList) &#123;<br>                    <span class="hljs-keyword">if</span> (mutation.<span class="hljs-property">type</span> == <span class="hljs-string">&#x27;childList&#x27;</span>) &#123; <span class="hljs-comment">//只监听一级</span><br>                        <span class="hljs-title function_">removeDoms</span>();<br>                    &#125;<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">// 开始监听属性变化</span><br>            observer.<span class="hljs-title function_">observe</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>, &#123;<br>                <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span><br>            &#125;);<br>            <span class="hljs-comment">// beforeDestory(() =&gt; &#123;</span><br>            <span class="hljs-comment">//     observer.disconnect(); //取消对所有dom的监听</span><br>            <span class="hljs-comment">//     observer = null;</span><br>            <span class="hljs-comment">// &#125;);</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;未启用扩展功能&quot;</span>);<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">modify</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> follow_text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;follow-text&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (follow_text.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    follow_text = follow_text[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (follow_text.<span class="hljs-property">textContent</span> == <span class="hljs-string">&quot;关注博主即可阅读全文&quot;</span>) &#123;<br>        follow_text.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>            event.<span class="hljs-title function_">stopPropagation</span>(); <span class="hljs-comment">//禁止默认跳转</span><br>            <span class="hljs-title function_">expand</span>(); <span class="hljs-comment">//展开</span><br>        &#125;);<br>        <span class="hljs-keyword">let</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;chevrondown&#x27;</span>)[<span class="hljs-number">0</span>]; <span class="hljs-comment">//&quot;关注博主即可阅读全文&quot;旁向下的箭头图标</span><br>        img.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>            event.<span class="hljs-title function_">stopPropagation</span>(); <span class="hljs-comment">//禁止默认跳转</span><br>            <span class="hljs-title function_">expand</span>(); <span class="hljs-comment">//展开</span><br>        &#125;);<br>        follow_text.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;关注限制已解锁&quot;</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;关注限制已解锁&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;没有找到\&quot;关注博主即可阅读全文\&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">expand</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> article_content = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;article_content&quot;</span>);<br>    <span class="hljs-keyword">let</span> hide_article_box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;hide-article-box&#x27;</span>)[<span class="hljs-number">0</span>];<br>    article_content.<span class="hljs-title function_">removeAttribute</span>(<span class="hljs-string">&quot;style&quot;</span>);<br>    hide_article_box.<span class="hljs-property">parentElement</span>.<span class="hljs-title function_">removeChild</span>(hide_article_box);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;全文展开成功&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeDoms</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> classes = [<span class="hljs-string">&#x27;passport-login-tip-container false&#x27;</span>, <span class="hljs-string">&#x27;passport-login-container&#x27;</span>, <span class="hljs-string">&#x27;tool-active-list&#x27;</span>, <span class="hljs-string">&#x27;article-search-tip&#x27;</span>,<br>        <span class="hljs-string">&#x27;hljs-button signin active&#x27;</span>, <span class="hljs-string">&#x27;csdn-side-toolbar&#x27;</span>, <span class="hljs-string">&#x27;box-shadow mb8&#x27;</span>, <span class="hljs-string">&#x27;blog-footer-bottom&#x27;</span>];<br>    <span class="hljs-keyword">let</span> infos = [<span class="hljs-string">&#x27;右下角弹窗&#x27;</span>, <span class="hljs-string">&#x27;登录弹窗&#x27;</span>, <span class="hljs-string">&#x27;一键收藏&#x27;</span>, <span class="hljs-string">&#x27;黑色提示框&#x27;</span>, <br>        <span class="hljs-string">&#x27;登录复制提示&#x27;</span>, <span class="hljs-string">&#x27;侧边工具栏&#x27;</span>, <span class="hljs-string">&#x27;左侧广告&#x27;</span>, <span class="hljs-string">&#x27;底部备案信息&#x27;</span>];<br>    <span class="hljs-keyword">let</span> boxs, box;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; classes.<span class="hljs-property">length</span>; i++) &#123;<br>        boxs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(classes[i]);<br>        <span class="hljs-keyword">if</span> (boxs.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            box = boxs[<span class="hljs-number">0</span>];<br>            box.<span class="hljs-property">parentElement</span>.<span class="hljs-title function_">removeChild</span>(box);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;移除&quot;</span> + infos[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> ids = [<span class="hljs-string">&#x27;toolbarBox&#x27;</span>, <span class="hljs-string">&#x27;asideWriteGuide&#x27;</span>, <span class="hljs-string">&#x27;asideNewNps&#x27;</span>, <span class="hljs-string">&#x27;recommendNps&#x27;</span>];<br>    <span class="hljs-keyword">let</span> names = [<span class="hljs-string">&quot;顶部栏&quot;</span>, <span class="hljs-string">&#x27;左侧广告&#x27;</span>, <span class="hljs-string">&#x27;左侧是否推荐&#x27;</span>,<span class="hljs-string">&#x27;底部是否推荐&#x27;</span>];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ids.<span class="hljs-property">length</span>; i++) &#123;<br>        box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(ids[i]);<br>        <span class="hljs-keyword">if</span>(box == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span>;<br>        box.<span class="hljs-property">parentElement</span>.<span class="hljs-title function_">removeChild</span>(box);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;移除&quot;</span> + names[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 参考：https://www.cnblogs.com/pu369/p/17425742.html</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">enableCopy</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setAllSelect</span>(<span class="hljs-params">el = <span class="hljs-variable language_">document</span>.body</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; el.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>; index++) &#123;<br>            <span class="hljs-keyword">const</span> e = el.<span class="hljs-property">children</span>.<span class="hljs-title function_">item</span>(index);<br>            e.<span class="hljs-property">style</span>.<span class="hljs-property">userSelect</span> = <span class="hljs-string">&#x27;text&#x27;</span>;<br>            <span class="hljs-title function_">setAllSelect</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">setAllSelect</span>();<br><br>    <span class="hljs-comment">//监听键盘Ctrl+C</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">ctrlKey</span> &amp;&amp; e.<span class="hljs-property">keyCode</span> == <span class="hljs-number">67</span>) &#123;<br>            <span class="hljs-keyword">const</span> pasteText = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getSelection</span>().<span class="hljs-title function_">toString</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> === pasteText || <span class="hljs-literal">undefined</span> === pasteText || <span class="hljs-string">&#x27;&#x27;</span> === pasteText.<span class="hljs-title function_">trim</span>()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            navigator.<span class="hljs-property">clipboard</span>.<span class="hljs-title function_">writeText</span>(pasteText).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;复制成功！&quot;</span>); <span class="hljs-comment">//alert(&quot;复制失败！&quot;);</span><br>            &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;复制失败！&quot;</span>);<br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//监听右键复制无法实现</span><br>&#125;<br><br><span class="hljs-comment">// 参考：https://blog.csdn.net/weixin_49119066/article/details/139220307</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">enableCopy2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">oncontextmenu</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">oncontextmenu</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">oncopy</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> hea = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;toolbar-advert&#x27;</span>)[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (hea) &#123;<br>        hea.<span class="hljs-title function_">remove</span>()<br>    &#125;;<br>    [...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;body&#x27;</span>)].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">dom</span> =&gt;</span> dom.<span class="hljs-property">outerHTML</span> = dom.<span class="hljs-property">outerHTML</span>);<br>    [...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;body, body *&#x27;</span>)].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">dom</span> =&gt;</span> &#123;<br>        [<span class="hljs-string">&#x27;onselect&#x27;</span>, <span class="hljs-string">&#x27;onselectstart&#x27;</span>, <span class="hljs-string">&#x27;onselectend&#x27;</span>, <span class="hljs-string">&#x27;ondragstart&#x27;</span>, <span class="hljs-string">&#x27;ondragend&#x27;</span>, <span class="hljs-string">&#x27;oncontextmenu&#x27;</span>, <span class="hljs-string">&#x27;oncopy&#x27;</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">ev</span> =&gt;</span> dom.<span class="hljs-title function_">removeAttribute</span>(ev));<br>        dom.<span class="hljs-property">style</span>[<span class="hljs-string">&#x27;user-select&#x27;</span>] = <span class="hljs-string">&#x27;auto&#x27;</span>;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-插件配置页面与样式文件-popup-html-style-css"><a href="#4-插件配置页面与样式文件-popup-html-style-css" class="headerlink" title="4. 插件配置页面与样式文件 (popup.html &amp; style.css)"></a>4. 插件配置页面与样式文件 (popup.html &amp; style.css)</h3><p><code>popup.html</code> 通常是一个与浏览器动作（Browser Action）或页面动作（Page Action）关联的弹出窗口的HTML文件。当用户点击扩展时，将显示弹出窗口。用户可在该窗口进行相关设置。</p><p><img src="/assets/img/1719215341752.png"></p><p align="center" style="line-height: 1;"><font size=3 face="黑体">popup.html</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./style.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">3</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;黑体&quot;</span>&gt;</span>CSDN插件设置<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;option&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>开启插件：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;switch&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;switch-enable&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;option&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>自动展开：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;switch&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;switch-autoexpand&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;option&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>破解复制：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;switch&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;switch-enablecopy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;option&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>清除弹窗：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;switch&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;switch-clearDom&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;refresh&quot;</span>&gt;</span>刷新网页<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;popup.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p align="center" style="line-height: 1;"><font size=3 face="黑体">style.css</font></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Courier New&#x27;</span>, Courier, monospace;<br>&#125;<br><br><span class="hljs-selector-class">.name</span>&#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.checkbox</span>&#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-插件配置页面脚本-popup-js"><a href="#5-插件配置页面脚本-popup-js" class="headerlink" title="5. 插件配置页面脚本 (popup.js)"></a>5. 插件配置页面脚本 (popup.js)</h3><p><code>popup.js</code>通常与<code>popup.html</code>一起使用，用于处理弹出窗口（Popup）中的用户交互和动态行为。当用户点击浏览器动作（Browser Action）或页面动作（Page Action）的图标时，会打开<code>popup.html</code>，而<code>popup.js</code>则负责为其中的元素添加事件监听器、处理用户输入以及与其他部分（如背景脚本或内容脚本）进行通信。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> checkBoxs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;checkbox&quot;</span>);<br><br><span class="hljs-comment">//获取各个选项值</span><br>chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">get</span>([<span class="hljs-string">&#x27;Enabled&#x27;</span>, <span class="hljs-string">&#x27;Auto_expand&#x27;</span>, <span class="hljs-string">&#x27;Enable_copy&#x27;</span>, <span class="hljs-string">&#x27;Clear_doms&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>    checkBoxs[<span class="hljs-number">0</span>].<span class="hljs-property">checked</span> = value.<span class="hljs-property">Enabled</span>;<br>    checkBoxs[<span class="hljs-number">1</span>].<span class="hljs-property">checked</span> = value.<span class="hljs-property">Auto_expand</span>;<br>    checkBoxs[<span class="hljs-number">2</span>].<span class="hljs-property">checked</span> = value.<span class="hljs-property">Enable_copy</span>;<br>    checkBoxs[<span class="hljs-number">3</span>].<span class="hljs-property">checked</span> = value.<span class="hljs-property">Clear_doms</span>;<br>&#125;);<br><br><span class="hljs-comment">//启用插件</span><br>checkBoxs[<span class="hljs-number">0</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (checkBoxs[<span class="hljs-number">0</span>].<span class="hljs-property">checked</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;启用扩展&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Enabled</span>: <span class="hljs-literal">true</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;关闭扩展&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Enabled</span>: <span class="hljs-literal">false</span><br>        &#125;);<br>    &#125;<br>    <br>    <span class="hljs-comment">//刷新网页</span><br>    chrome.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">query</span>(&#123;<br>        <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">currentWindow</span>: <span class="hljs-literal">true</span><br>    &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">tabs</span>) &#123;<br>        chrome.<span class="hljs-property">scripting</span>.<span class="hljs-title function_">executeScript</span>(&#123;<br>            <span class="hljs-attr">target</span>: &#123;<br>                <span class="hljs-attr">tabId</span>: tabs[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>            &#125;,<br>            <span class="hljs-attr">func</span>: refreshPage,<br>        &#125;);<br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">//自动展开</span><br>checkBoxs[<span class="hljs-number">1</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (checkBoxs[<span class="hljs-number">1</span>].<span class="hljs-property">checked</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;启用自动展开&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Auto</span><span class="hljs-attr">_expand</span>: <span class="hljs-literal">true</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;关闭自动展开&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Auto</span><span class="hljs-attr">_expand</span>: <span class="hljs-literal">false</span><br>        &#125;);<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//破解复制</span><br>checkBoxs[<span class="hljs-number">2</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (checkBoxs[<span class="hljs-number">2</span>].<span class="hljs-property">checked</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;启用破解复制&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Enable</span><span class="hljs-attr">_copy</span>: <span class="hljs-literal">true</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;关闭破解复制&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Enable</span><span class="hljs-attr">_copy</span>: <span class="hljs-literal">false</span><br>        &#125;);<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//清除弹窗</span><br>checkBoxs[<span class="hljs-number">3</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (checkBoxs[<span class="hljs-number">3</span>].<span class="hljs-property">checked</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;启用清除弹窗&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Clear</span><span class="hljs-attr">_doms</span>: <span class="hljs-literal">true</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;关闭清除弹窗&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Clear</span><span class="hljs-attr">_doms</span>: <span class="hljs-literal">false</span><br>        &#125;);<br>    &#125;<br>&#125;);<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;refresh&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    chrome.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">query</span>(&#123;<br>        <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">currentWindow</span>: <span class="hljs-literal">true</span><br>    &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">tabs</span>) &#123;<br>        chrome.<span class="hljs-property">scripting</span>.<span class="hljs-title function_">executeScript</span>(&#123;<br>            <span class="hljs-attr">target</span>: &#123;<br>                <span class="hljs-attr">tabId</span>: tabs[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>            &#125;,<br>            <span class="hljs-attr">func</span>: refreshPage,<br>        &#125;);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">refreshPage</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol><li>下载扩展文件</li><li>在Chrome地址栏输入<code>chrome://extensions/</code></li><li>开启”开发者模式”</li><li>点击”加载已解压的扩展程序”选择项目文件夹</li></ol><p><a href="https://www.lanzoub.com/iTWzE22lfbxa">完整代码下载</a> 密码:9dq3</p><blockquote><p>注意：本扩展仅用于学习Chrome扩展开发，请勿用于商业用途</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 我的项目 </category>
          
          <category> Chrome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> Javascript </tag>
            
            <tag> CSDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Termux-安卓终端模拟器</title>
      <link href="/posts/a5d9.html"/>
      <url>/posts/a5d9.html</url>
      
        <content type="html"><![CDATA[<p>Termux是一个Android下一个高级的终端模拟器, 开源且不需要root即可安装运行容器环境，通过一键安装脚本可快速安装相应系统。</p><blockquote><p><strong>参考链接：</strong></p><p><a href="https://gitee.com/skymysky/linux/">Tmoe-linux: 在 GNU&#x2F;Linux 和Android-Termux上一键安装 GNU&#x2F;Linux容器，并自动配置中文环境。 (gitee.com)</a></p><p><a href="https://gitee.com/tiankongsnow/linux">Tmoe-linux: 在 GNU&#x2F;Linux 和Android-Termux上一键安装 GNU&#x2F;Linux容器，并自动配置中文环境。 (gitee.com)</a></p></blockquote><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/termux/termux-app/releases">Releases · termux&#x2F;termux-app (github.com)</a></p><p>测试版本为0.118</p><h3 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash -c &quot;$(curl -Lv gitee.com/mo2/linux/raw/master/debian.sh)&quot;<br></code></pre></td></tr></table></figure><blockquote><p>建议选proot容器，无root也可安装</p><p>经测试Android7系统，chroot报错无法成功安装，建议Android8以上安装chroot</p></blockquote><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">debian<br></code></pre></td></tr></table></figure><h3 id="启动Tmoe"><a href="#启动Tmoe" class="headerlink" title="启动Tmoe"></a>启动Tmoe</h3><p>Tmoe可以修改一些配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmoe-tools<br></code></pre></td></tr></table></figure><h3 id="图形化桌面和VNC"><a href="#图形化桌面和VNC" class="headerlink" title="图形化桌面和VNC"></a>图形化桌面和VNC</h3><p>根据手机实际情况选择是否安装，过旧的手机可能连接卡顿，使用体验较差</p><p>推荐<strong>xfce</strong>桌面</p><p>启动和停止VNC命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">startvnc<br>stopvnc<br></code></pre></td></tr></table></figure><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install openssh-server<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare Zerotrust 之 Webssh</title>
      <link href="/posts/4763.html"/>
      <url>/posts/4763.html</url>
      
        <content type="html"><![CDATA[<h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><blockquote><p><a href="https://www.cnblogs.com/kelley-h/p/17516053.html">使用cloudflare转发ssh端口 - kelley_go - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8cloudflare-tunnels%E9%80%9A%E8%BF%87web-ssh%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/">使用 Cloudflare Tunnels 通过 Web SSH 访问服务器 (hellowood.dev)</a></p><p><a href="https://blog.csdn.net/stone_fall/article/details/108630115">Linux | systemd详解 | system.service | 参数解析_remainafterexit-CSDN博客</a></p><p><a href="https://cloudflared.cn/get-started/create-local-tunnel/">创建本地管理隧道 (CLI) | Cloudflare Tunnel 中文文档 (cloudflared.cn)</a></p></blockquote><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>必须需要一个 cloudflare 账号，以及开通 cloudflare zero trust</p><p>安装cloudflare：<a href="https://github.com/cloudflare/cloudflared/releases">Releases · cloudflare&#x2F;cloudflared (github.com)</a></p><h2 id="配置-Tunnels"><a href="#配置-Tunnels" class="headerlink" title="配置 Tunnels"></a>配置 Tunnels</h2><p>Cloudflare 提供两种方式创建隧道：</p><ol><li>在 zero trust 页面用 web 添加授权</li><li>在本地服务器（raspberry）上用 config 文件添加</li></ol><p>建议采用第一种方法，配置较为直观。本教程只讲述第二种方法</p><h3 id="登录cloudflared"><a href="#登录cloudflared" class="headerlink" title="登录cloudflared"></a>登录cloudflared</h3><p>先安装cloudflared，然后运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cloudflared tunnel login<br></code></pre></td></tr></table></figure><blockquote><p>终端会给出一个类似 <a href="https://dash.cloudflare.com/argotunnel?callback=https://login.cloudflareaccess.org%25xxxxxxxxxxxxxxxxxxxxxxx">https://dash.cloudflare.com/argotunnel?callback=https%3A%2F%2Flogin.cloudflareaccess.org%xxxxxxxxxxxxxxxxxxxxxxx</a> 的登陆地址，复制黏贴该地址到浏览器中，然后按照要求登录即可。<br>如果是有二步验证的，需要登录了以后，再次黏贴该地址，因为二步验证结束后并不会自动跳转到该 cloudflared 验证登录页面。</p><p>授权的话，每次只能选择一个网站，当然，一个网站也就够用了，我们可以解析很多三级域名。</p><p>当然如果需要授权多个网站，授权完成后不要关闭网页！依次点击其他需要授权的域名，进行多次授权。 </p></blockquote><p>运行成功的话，会生成 ~&#x2F;.cloudflared&#x2F;cert.pem文件。</p><h3 id="创建tunnel"><a href="#创建tunnel" class="headerlink" title="创建tunnel"></a>创建tunnel</h3><p>创建完以后，会把信息保存到 <code>~ /.cloudflared</code> 文件夹下，注意不要误删了 </p><ul><li><code>cloudflared tunnel create &lt;你的隧道名字&gt;</code></li><li>示例： <code>cloudflared tunnel create xm2</code></li></ul><h3 id="创建域名-CNAME"><a href="#创建域名-CNAME" class="headerlink" title="创建域名 CNAME"></a>创建域名 CNAME</h3><p>添加一个域名:</p><ul><li><code>cloudflared tunnel route dns &lt;隧道名字&gt; &lt;域名&gt;</code></li><li>示例<code> cloudflared tunnel route dns xm2 ssh.cngo.us.kg</code></li></ul><p>然后 cloudflare 就会在你的域名下自动生成一个 CNAME，把 ssh.cngo.us.kg 指向 &lt;隧道 UUID&gt;.cfargotunnel.com</p><p>以此类推，我们可以如法炮制在面板上添加其他的需要的 CNAME</p><h3 id="配置-Config-文件"><a href="#配置-Config-文件" class="headerlink" title="配置 Config 文件"></a>配置 Config 文件</h3><p>添加好想要穿透的域名后，我们就可以开始映射了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo vim  ~/.cloudflared/config.yml</span><br><br>tunnel: 8d7488ac-fae9-4672-bb34-f864c7b0b385<br>credentials-file: /home/android/.cloudflared/8d7488ac-fae9-4672-bb34-f864c7b0b385.json<br><br>ingress:<br>  - hostname: ssh.cngo.us.kg<br>    service: ssh://localhost:22<br>  - service: http_status:404<br></code></pre></td></tr></table></figure><p>注意：最后的 - service: http_status:404 一定要加，这是兜底的规则。还有复制黏贴的时候确保格式没有错误，很可能会发生 mapping error。</p><p>最后生效的配置文件位置 &#x2F;etc&#x2F;cloudflared&#x2F;config.yml </p><h3 id="配置完以后，可以测试下配置文件是否有问题。"><a href="#配置完以后，可以测试下配置文件是否有问题。" class="headerlink" title="配置完以后，可以测试下配置文件是否有问题。"></a>配置完以后，可以测试下配置文件是否有问题。</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># sudo cloudflared --config ~/.cloudflared/config.yml  tunnel ingress validate</span><br>Validating rules from /home/android/.cloudflared/config.yml<br>OK<br></code></pre></td></tr></table></figure><h3 id="启动隧道"><a href="#启动隧道" class="headerlink" title="启动隧道"></a>启动隧道</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">cloudflared tunnel --config [配置文件路径] run`<br>示例：`cloudflared tunnel --config ~/.cloudflared/config.yml run<br></code></pre></td></tr></table></figure><h3 id="移除已有服务"><a href="#移除已有服务" class="headerlink" title="移除已有服务"></a>移除已有服务</h3><p>若以前配置过cloudflared服务，则需要先卸载，同时移除配置文件<code>/etc/cloudflared/config.yml</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cloudflared service uninstall<br><br>sudo rm /etc/cloudflared/config.yml<br></code></pre></td></tr></table></figure><h3 id="安装cloudflared服务"><a href="#安装cloudflared服务" class="headerlink" title="安装cloudflared服务"></a>安装cloudflared服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cloudflared --config ~/.cloudflared/config.yml service install<br><br><br>2024-06-22T15:40:40Z INF Using SysV<br>2024-06-22T15:40:41Z INF Linux service for cloudflared installed successfully<br></code></pre></td></tr></table></figure><blockquote><p>指定安装config文件，否则可能报错：</p><p>Cannot determine default configuration path. No file [config.yml config.yaml] in [~&#x2F;.cloudflared ~&#x2F;.cloudflare-warp ~&#x2F;cloudflare-warp &#x2F;etc&#x2F;cloudflared &#x2F;usr&#x2F;local&#x2F;etc&#x2F;cloudflared]</p></blockquote><h3 id="配置Linux系统服务cloudflared-service"><a href="#配置Linux系统服务cloudflared-service" class="headerlink" title="配置Linux系统服务cloudflared.service"></a>配置Linux系统服务cloudflared.service</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /usr/lib/systemd/system/cloudflared.service<br></code></pre></td></tr></table></figure><p>加入如下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">[Unit]<br>Description=Cloudflared<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/etc/init.d/cloudflared start<br>ExecReload=/etc/init.d/cloudflared restart<br>ExecStop=/etc/init.d/cloudflared stop<br><br>Restart=on-failure<br>TimeoutSec=300<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后配置开机自启动，由于chroot容器不支持systemctl，可根据下列链接安装servicectl命令</p><blockquote><p><a href="https://www.cnblogs.com/sw-code/p/14998645.html">安卓手机改造服务器——解决chroot下无法使用systemctl - sw-code - 博客园 (cnblogs.com)</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl enable cloudflared<br><span class="hljs-meta prompt_">#</span><span class="language-bash">or</span><br>sudo servicectl enable cloudflared<br></code></pre></td></tr></table></figure><h2 id="创建-SSH-应用"><a href="#创建-SSH-应用" class="headerlink" title="创建 SSH 应用"></a>创建 SSH 应用</h2><ul><li>创建应用</li></ul><p>在 Cloudflare 控制台 &gt; Zero Trust &gt; Access &gt; Applications 选择 Add an application 创建新的应用；应用类型为 Self-hosted</p><p><img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-application-create.png" alt="homelab-cloudflare-ssh-application-create.png"></p><ul><li>配置应用信息</li></ul><p>指定应用名称，并为应用配置域名；session 的过期时间可以按需配置</p><p><img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-configuration-application.png" alt="homelab-cloudflare-ssh-configuration-application.png"></p><ul><li>指定访问策略</li></ul><p>需要配置访问策略，只允许特定的邮箱登陆；如果需要使用其他的认证方式，如 GitHub&#x2F;Google SSO 等，可以在 Cloudflare 控制台 &gt; Zero Trust &gt; Settings &gt; Authentication &gt; Login Methods 中添加</p><p><img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-configuration-policy.png" alt="homelab-cloudflare-ssh-configuration-policy.png"></p><ul><li>修改应用类型</li></ul><p>在 Additional settings 中，将 Browser rendering 的类型改为 SSH；然后选择保存，这样就配置好 SSH 应用了</p><p><img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-set-application-type.png" alt="homelab-cloudflare-ssh-set-application-type.png"></p><h2 id="踩坑经历"><a href="#踩坑经历" class="headerlink" title="踩坑经历"></a>踩坑经历</h2><p>通过cloudns配置的域名未添加子域名NS，导致CNAME不生效，一定要确保域名CNAME是生效的</p>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Cloudflare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloudflare </tag>
            
            <tag> Zerotrust </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare相关教程</title>
      <link href="/posts/a111.html"/>
      <url>/posts/a111.html</url>
      
        <content type="html"><![CDATA[<p>​<strong>Cloudflare是偶滴神！</strong></p><ol><li><h2 id="Workers-Pages-项目集"><a href="#Workers-Pages-项目集" class="headerlink" title="Workers &amp; Pages 项目集"></a>Workers &amp; Pages 项目集</h2><ul><li><a href="https://github.com/zhuima/awesome-cloudflare">GitHub - zhuima&#x2F;awesome-cloudflare: 精选的 Cloudflare 工具、开源项目、指南、博客和其他资源列表</a></li><li><a href="https://jialikemeng.github.io/post/Cloudflare%20Workers%20-you-xiu-xiang-mu-ji-jing.html">Cloudflare Workers 优秀项目集景 (jialikemeng.github.io)</a></li><li><a href="https://igdux.com/workers">Cloudflare Workers优秀项目收集（持续更新） - iGdu (igdux.com)</a></li></ul></li><li><h2 id="ZeroTurst-内网穿透系列"><a href="#ZeroTurst-内网穿透系列" class="headerlink" title="ZeroTurst 内网穿透系列"></a>ZeroTurst 内网穿透系列</h2><ul><li><p><a href="https://dmesg.app/cloudflare">Cloudflare | 土豆不好吃 (dmesg.app)</a></p><p>当然如果不想改 config 那么也可以</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cloudflared access ssh <span class="hljs-attr">--hostname</span> ssh<span class="hljs-selector-class">.dmesg</span><span class="hljs-selector-class">.app</span> <span class="hljs-attr">--url</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10022</span><br></code></pre></td></tr></table></figure><p>然后另外一个窗口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">127.0.0.1</span> -p <span class="hljs-number">10022</span><br></code></pre></td></tr></table></figure></li><li><p><a href="https://josephcz.xyz/technology/network/cloudflare-webssh-zerotrust/">使用 Cloudflare ZeroTrust 搭建 WebSSH | Joseph’s Blog (josephcz.xyz)</a></p></li></ul></li><li><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2></li></ol>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Cloudflare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo|Fluid主题写作指南</title>
      <link href="/posts/d574.html"/>
      <url>/posts/d574.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、官方文档"><a href="#一、官方文档" class="headerlink" title="一、官方文档"></a>一、官方文档</h2><p><a href="https://hexo.io/zh-cn/docs/">🔗文档 | Hexo</a></p><p><a href="https://hexo.fluid-dev.com/docs/">🔗Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p><a href="https://www.imooc.com/wiki/markdownlesson">🔗Markdown 入门教程-慕课网 (imooc.com)</a></p><h2 id="二、文章元数据配置-Front-matter"><a href="#二、文章元数据配置-Front-matter" class="headerlink" title="二、文章元数据配置(Front-matter)"></a>二、文章元数据配置(Front-matter)</h2><h3 id="front-matter（文章前注）"><a href="#front-matter（文章前注）" class="headerlink" title="front-matter（文章前注）"></a>front-matter（文章前注）</h3><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量</p><blockquote><p>要修改<code>hexo new &quot;&#123;文章名&#125;&quot;</code>时生成的默认Front-matter模板，可修改<strong>模板文件</strong><code>/scaffolds/post.md</code></p></blockquote><blockquote><p>表格居中方法：<a href="https://www.cnblogs.com/jianmuzi/p/16795528.html">Markdown表格居中显示 - jianmuzi - 博客园 (cnblogs.com)</a></p></blockquote><div style="width: auto; display: table; margin-left: auto; margin-right: auto;"><table><thead><tr><th>项</th><th>释义</th></tr></thead><tbody><tr><td>title</td><td>文章标题</td></tr><tr><td>date</td><td>建立日期</td></tr><tr><td>updated</td><td>更新时间</td></tr><tr><td>sticky</td><td>设置该项时置顶，值越大越靠前</td></tr><tr><td>tags</td><td>标签 [Hexo, Fluid]</td></tr><tr><td>categories</td><td>分类 [Technical articles, Linux] [一级分类，二级分类]</td></tr><tr><td>index_img</td><td>博客主页的文章缩略图</td></tr><tr><td>banner_img</td><td>文章页顶部大图</td></tr><tr><td>category_bar</td><td>左侧显示同分类文章</td></tr><tr><td>comments</td><td>评论开关或指定评论系统</td></tr><tr><td>math</td><td>数学公式渲染开关</td></tr><tr><td>mermaid</td><td>流程图渲染开关</td></tr><tr><td>hide</td><td>是否隐藏，这两个设置了就不会显示在首页了</td></tr><tr><td>archive</td><td>是否归档</td></tr><tr><td>excerpt&#x2F;description</td><td>文章摘要</td></tr><tr><td>layout</td><td>布局，文章默认post</td></tr></tbody></table></div><div class="note note-success">            <p>优化文章链接格式</p><p>参考：<a href="https://hexo.ltski.com/p/20190112020314/">Hexo博客进阶之文章链接—自定义永久链接 | ITsuKiの博客小站 (ltski.com)</a></p><p><a href="https://blog.dejavu.moe/posts/hexo-permalinks/">优化 Hexo 网站的永久链接格式 · Dejavu’s Blog</a></p>          </div><h2 id="三、多媒体嵌入"><a href="#三、多媒体嵌入" class="headerlink" title="三、多媒体嵌入"></a>三、多媒体嵌入</h2><h3 id="1-视频"><a href="#1-视频" class="headerlink" title="1. 视频"></a>1. 视频</h3><p>参考链接：<a href="https://github.com/MoePlayer/hexo-tag-dplayer">MoePlayer&#x2F;hexo-tag-dplayer: Embed dplayer in Hexo posts&#x2F;pages (github.com)</a></p><p>测试视频URL：<a href="https://blog.csdn.net/weixin_41010198/article/details/88055078">MP4视频测试URL地址，亲测有效_视频地址-CSDN博客</a></p><p>示例视频源：</p><ul><li><a href="https://media.w3.org/2010/05/sintel/trailer.mp4">https://media.w3.org/2010/05/sintel/trailer.mp4</a></li><li><a href="https://pan.cngo.xyz/raw/public/trailer.mp4">https://pan.cngo.xyz/raw/public/trailer.mp4</a></li></ul><p>使用dplayer插件嵌入视频：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span> dplayer <span class="hljs-string">&quot;url=http://vjs.zencdn.net/v/oceans.mp4&quot;</span> <span class="hljs-string">&quot;pic=&quot;</span> <span class="hljs-string">&quot;autoplay=false&quot;</span>  <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure><br><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://pan.cngo.xyz/raw/public/trailer.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><h3 id="2-图片"><a href="#2-图片" class="headerlink" title="2. 图片"></a>2. 图片</h3><p>基本插入方式：</p><p><img src="/assets/img/preview.jpeg"></p><p>多图展示（3列布局）：</p><p>本站图片</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/assets/img/wG636.jpg"></div><div class="group-image-wrap"><img src="/assets/img/pam225.jpg"></div><div class="group-image-wrap"><img src="/assets/img/background.jpg"></div></div></div><p>引用图片 &gt; 测试同一张图片不同源的响应</p><blockquote><p>blob: <a href="https://github.com/cngoxu/hexo/blob/main/assets/img/preview.jpeg">https://github.com/cngoxu/hexo/blob/main/assets/img/preview.jpeg</a><br>raw: <a href="https://raw.githubusercontent.com/cngoxu/hexo/main/assets/img/preview.jpeg">https://raw.githubusercontent.com/cngoxu/hexo/main/assets/img/preview.jpeg</a></p></blockquote><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/cngoxu/hexo@master/assets/img/preview.jpeg"></div><div class="group-image-wrap"><img src="https://rawcdn.githack.com/cngoxu/hexo/main/assets/img/preview.jpeg"></div><div class="group-image-wrap"><img src="https://cdn.statically.io/gh/cngoxu/hexo/main/assets/img/preview.jpeg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://hub.gitmirror.com/https://raw.githubusercontent.com/cngoxu/hexo/main/assets/img/preview.jpeg"></div><div class="group-image-wrap"><img src="https://raw.gitmirror.com/cngoxu/hexo/main/assets/img/preview.jpeg"></div><div class="group-image-wrap"><img src="https://gh.api.99988866.xyz/https://raw.githubusercontent.com/cngoxu/hexo/main/assets/img/preview.jpeg"></div></div></div><h2 id="四、自定义实现"><a href="#四、自定义实现" class="headerlink" title="四、自定义实现"></a>四、自定义实现</h2><p>通过编写hexo内置ejs模板实现</p><ol><li>卡片链接</li></ol><div><a target="_blank" href=https://hexo.fluid-dev.com/docs/  style="position: relative; display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-align-items: center; -webkit-box-align: center; -ms-flex-align: center; align-items: center; width: 390px; min-height: 84px; border-radius: 8px; max-width: 100%; overflow: hidden; margin: 16px auto; padding: 12px 12px 9px 12px; background-color: #ddd;"><span class="LinkCard-contents"><span style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; max-height: 40px; line-height: 1.25; color: #121212;">Hexo Fluid 用户手册</span><span style="display: -webkit-box; font-size: 13px; height: 18px; line-height: 18px; color: #999; word-break: break-all; text-overflow: ellipsis; overflow: hidden; -webkit-line-clamp: 1; -webkit-box-orient: vertical;"><span style="display: inline-flex; align-items: center;"><svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="14" height="14"><path d="M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z"></path></svg></span><span>https://hexo.fluid-dev.com/docs/ </span></span></span></a></div><h2 id="五、高级排版功能"><a href="#五、高级排版功能" class="headerlink" title="五、高级排版功能"></a>五、高级排版功能</h2><h3 id="1-便签"><a href="#1-便签" class="headerlink" title="1. 便签"></a>1. 便签</h3><div class="note note-success">            <p>这是一个便签</p>          </div><p class="note note-primary">这是一个HTML形式便签</p><h3 id="2-标签"><a href="#2-标签" class="headerlink" title="2. 标签"></a>2. 标签</h3><p>这是一个<span class="label label-primary">标签</span></p><p>这是一个行内<span class="label label-warning">HTML标签</span></p><h3 id="3-折叠块"><a href="#3-折叠块" class="headerlink" title="3. 折叠块"></a>3. 折叠块</h3>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-278eddbe" role="button" aria-expanded="false" aria-controls="collapse-278eddbe">        <div class="fold-arrow">▶</div>折叠内容的标题      </div>      <div class="fold-collapse collapse" id="collapse-278eddbe">        <div class="fold-content">          <p>这里是折叠显示的内容，支持Markdown</p>        </div>      </div>    </div><h3 id="4-勾选框"><a href="#4-勾选框" class="headerlink" title="4. 勾选框"></a>4. 勾选框</h3><div>            <input type="checkbox"  checked="checked">勾选框示例True          </div><div>            <input type="checkbox"  >勾选框示例False          </div><h3 id="5-按钮"><a href="#5-按钮" class="headerlink" title="5. 按钮"></a>5. 按钮</h3><a class="btn" href="/"  title="点击可跳转" target="_blank">跳转到首页</a><p><a class="btn" href="/" title="点击可跳转">跳转到首页</a></p><h3 id="6-引用块-blockquote"><a href="#6-引用块-blockquote" class="headerlink" title="6. 引用块 blockquote"></a>6. 引用块 blockquote</h3><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><h3 id="7-脚注"><a href="#7-脚注" class="headerlink" title="7. 脚注"></a>7. 脚注</h3><p>这是一句话<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="参考资料1">[1]</span></a></sup></p><h2 id="六、特殊功能"><a href="#六、特殊功能" class="headerlink" title="六、特殊功能"></a>六、特殊功能</h2><h3 id="1-代码块"><a href="#1-代码块" class="headerlink" title="1. 代码块"></a>1. 代码块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">```python<br>def main():<br>    foo()<br>    print(&quot;python&quot;)<br>```<br></code></pre></td></tr></table></figure><blockquote><p>若使用Fluid主题，可以在主题的config文件中开启代码行号显示和一键copy功能</p></blockquote><h3 id="2-LaTeX数学公式"><a href="#2-LaTeX数学公式" class="headerlink" title="2. LaTeX数学公式"></a>2. LaTeX数学公式</h3><p>使用Fluid主题的Latex公式需要注意公式引擎和渲染器，具体配置过程可以参考<a href="https://hexo.fluid-dev.com/docs/guide/#latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">这里</a>。<br>$$<br>F(0) &#x3D; \frac{1}{T}\int_0^T f(x)dx<br>$$</p><p>$$<br>E&#x3D;mc^2<br>$$</p><h3 id="3-Mermaid流程图"><a href="#3-Mermaid流程图" class="headerlink" title="3. Mermaid流程图"></a>3. Mermaid流程图</h3><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><div class="note note-warning">            <p>注意：所有功能需要主题支持，不同主题的显示效果可能有所差异。建议在实际使用前先进行测试。</p>          </div><section class="footnotes"><h3>参考资料</h3><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料1<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>参考资料2<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米平板2ROOT教程</title>
      <link href="/posts/adfa.html"/>
      <url>/posts/adfa.html</url>
      
        <content type="html"><![CDATA[<h3 id="下载开发版线刷包"><a href="#下载开发版线刷包" class="headerlink" title="下载开发版线刷包"></a>下载开发版线刷包</h3><blockquote><p>链接1：<a href="https://roms.miuier.com/zh-cn/devices/latte/">小米平板 2(latte) 官方ROM下载 - MIUI官方ROM仓库 (miuier.com)</a></p><p>链接2：<a href="https://xiaomirom.com/rom/mipad-2-latte-china-fastboot-recovery-rom">小米平板 2 (latte) 国行版 Fastboot 线刷包 &amp; Recovery 卡刷包 ROM</a></p></blockquote><p>找到开发版最新8.4.26</p><ul><li><strong>机型名称 ：</strong>小米平板 2</li><li><strong>机型代号 ：</strong>latte</li><li><strong>解锁 B L ：</strong>所有线刷都以解锁Bootloader为前提，并且解锁Bootloader时会清除数据</li></ul><h3 id="准备刷机工具"><a href="#准备刷机工具" class="headerlink" title="准备刷机工具"></a>准备刷机工具</h3><p>两种方法(各自成功一次)</p><ul><li><h4 id="OneKey2MIUI"><a href="#OneKey2MIUI" class="headerlink" title="OneKey2MIUI"></a>OneKey2MIUI</h4><blockquote><p>参考链接：<a href="https://blog.csdn.net/weixin_41939688/article/details/103223262">小米平板2 Windows刷回MIUI9线刷教程（2019）_onekey2miui-CSDN博客</a></p><p>链接: <a href="https://pan.baidu.com/s/1eCYqyz_idXjjD_PjU3GQPg">https://pan.baidu.com/s/1eCYqyz_idXjjD_PjU3GQPg</a>提取码: m4bf</p></blockquote><ol><li><p>安装驱动 Intel_Android_Driver_v1.10.0</p></li><li><p>平板进入DNX FASTBOOT MODE</p><p>关机状态下，按住音量+、音量-、电源键开机</p></li><li><p>连接电脑，<strong>配置设备驱动程序</strong></p><p>设备管理器找到接入设备，配置驱动程序为Intel Android AD</p><p>浏览计算机上的驱动程序-从计算机上的可用驱动列表中选取-android Phone-android ADB interface</p></li><li><p>复制一键刷机文件<code>OneKey2MIUI</code>到线刷包文件夹</p></li><li><p>双击打开<code>DNX_flash_all.bat</code>开始刷机</p></li></ol></li><li><h4 id="XiaomiFlash"><a href="#XiaomiFlash" class="headerlink" title="XiaomiFlash"></a>XiaomiFlash</h4><p>XiaomiFlash官方刷机工具使用简单，功能强大，你可以通过该款小米线刷工具来对小米手机进行刷机操作。</p><blockquote><p>参考链接：<a href="https://onfix.cn/course/319?bid=1&mid=119">小米（Mi） 平板2小米（Mi） 平板2 手机Fastboot线刷详细教程，通过线刷的升级方法刷机解锁 (onfix.cn)</a></p><p>下载地址：<a href="https://pan.baidu.com/s/1TtnpCaISzJ0oeJ9l_2fzqA">https://pan.baidu.com/s/1TtnpCaISzJ0oeJ9l_2fzqA</a>提取密码：x1v7</p></blockquote><ol><li>安装驱动：下载并解压刷机工具，双击“XiaoMiFlash.exe”运行，点击【Driver】弹出窗口后点击【安装】</li><li>进入Fastboot模式：关机状态下，同时按住音量上下+电源键进入DNX Fastboot模式，将手机USB连接电脑，然借助工具<strong>OneKey2MIUI</strong>进入Fastboot模式</li><li>加载设备，刷机程序会自动识别手机</li><li>选择解压后的线刷包目录，开始刷机</li></ol></li></ul><h3 id="解锁Bootloader-不清楚怎么成功的"><a href="#解锁Bootloader-不清楚怎么成功的" class="headerlink" title="解锁Bootloader(不清楚怎么成功的)"></a>解锁Bootloader(不清楚怎么成功的)</h3><ul><li>进入Fastboot模式连接电脑</li><li>配置驱动为Android Bootloader Interface</li></ul><blockquote><p>感觉没用:<a href="https://web.vip.miui.com/page/info/mio/mio/detail?postId=42491267&app_version=dev.20051">Bootloader解锁教程 (miui.com)</a></p><p>解锁工具:<a href="http://www.miui.com/unlock/index.html">申请解锁小米手机 (miui.com)</a></p></blockquote><h3 id="准备ROOT"><a href="#准备ROOT" class="headerlink" title="准备ROOT"></a>准备ROOT</h3><p>两种方法</p><ul><li><p>刷入第三方Recovery(成功)</p><blockquote><p>教程：<a href="https://www.bilibili.com/video/BV12K4y1K73n/?vd_source=14453b684dcfb0e5fd9184685a513661">小米平板2获取root，刷twrp教程_哔哩哔哩_bilibili</a></p><p>链接：<a href="https://pan.baidu.com/s/1bQtQ0ZcV58WOZ43HtjhrBA">https://pan.baidu.com/s/1bQtQ0ZcV58WOZ43HtjhrBA</a> 提取码:g58o</p></blockquote><ol><li><p>关机状态下按电源键开机，接着同时按住音量上和下键，直到进入DNX模式。</p><p>PS：进入后，会有一句黄色字体的话：DNX FASTBOOT MODE…… 说明进入了DNX模式</p></li><li><p>紧接着用数据线连接电脑，然后点击<code>MIPAD2一键REC工具.bat</code>，【确认小米平板进入DNX模式后，插入数据线，】</p></li><li><p>会出现两个选项（1是刷入第三方recovery 2是恢复官方recovery） 输入1</p></li><li><p>若成功,则进入’’大MI”界面,twrp就刷入完成了</p></li><li><p>进入Android,复制SuperSU Pro_v2.49.zip卡刷包放入根目录下</p></li><li><p>???进入Recovery模式,【关机按音量+加电源进入大米警告后再按音量+加电源进入twrp】</p></li><li><p>Swip,点击Cache和data进行双清（记得提前备份好数据）</p></li><li><p>然后按底部的桌面键返回菜单，选择Install—&#x2F;sdcard目录下往下拉，找到你之前放入的root卡刷包【SuperSU Pro_v2.49】</p></li><li><p>点击Reboot—Systme：重启进入系统，会出现一个这个大米警告界面，先按音量上键，出现大米下面没有字后再按音量下键退出进入系统</p></li></ol></li><li><p>官方版(测试时Permission Deny)</p><blockquote><p><a href="https://tieba.baidu.com/p/4642340406">『技术』小米平板2 root教程_小米平板吧_百度贴吧 (baidu.com)</a></p><p>附件：ROOTMIPAD2.rar<br>下载地址：<a href="http://pan.baidu.com/s/1skAyUvF">http://pan.baidu.com/s/1skAyUvF</a></p></blockquote><ol><li>刷成开发版，在电脑下载提供的附件并解压</li><li>平板连接电脑并开启usb调试</li><li>双击ROOT.bat，并按照弹出窗口的提示按回车（任意键），平板会自动重启（重启时就可以拔掉数据线了）</li><li>平板重启后打开SuperSu，更新选择常规模式</li><li>平板会再次重启，之后就取得了root权限</li><li>不要用其他root软件代替！会卡米！（如Kingroot，一键root，360root）</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Root </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Deploy 自定义配置 Ubuntu20.04.6LTS(focal)</title>
      <link href="/posts/557a.html"/>
      <url>/posts/557a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>准备条件：一部安卓手机，需要root</p><p>安装方式：自定义安装Linux镜像</p><p>参考链接</p><ul><li><a href="https://blog.csdn.net/qq_28817367/article/details/130394040">安卓安装Linux Deploy 基础安装&amp;&amp;自定义安装-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_43509120/article/details/121429387">linux deploy安装指南(升级)-CSDN博客</a></li><li><a href="https://www.cnblogs.com/sw-code/p/14990229.html">使用Linux Deploy将闲置的安卓手机改造简易服务器 - sw-code - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/sw-code/p/14998645.html">解决chroot下无法使用systemctl </a></li></ul></blockquote><h2 id="1-安装Busybox"><a href="#1-安装Busybox" class="headerlink" title="1.安装Busybox"></a>1.安装Busybox</h2><ul><li>下载安装busybox：<a href="https://github.com/meefik/busybox">https://github.com/meefik/busybox</a>，版本1.34.1</li><li>需要root权限，Install 路径默认 system&#x2F;xbin</li><li>Tips：该软件最好安装，安装后会自带很多Linux命令集，比如ping命令，不安装的话使用ping命令会提示not find command</li></ul><h2 id="2-Linux-Deploy"><a href="#2-Linux-Deploy" class="headerlink" title="2.Linux Deploy"></a>2.Linux Deploy</h2><ul><li><p>下载安装Linux Deploy ：<a href="https://github.com/meefik/linuxdeploy">https://github.com/meefik/linuxdeploy</a>，版本2.6.0</p></li><li><p>左上角设置环境如下，然后更新操作环境：</p><blockquote><p>ENV目录  &#x2F;data&#x2F;user&#x2F;0&#x2F;ru.meefik.linuxdeploy&#x2F;files</p><p>PATH变量  &#x2F;system&#x2F;xbin</p></blockquote></li></ul><h2 id="3-容器安装配置"><a href="#3-容器安装配置" class="headerlink" title="3.容器安装配置"></a>3.容器安装配置</h2><ol><li><p>发行版： rootfs.tar</p></li><li><p>源路径 ： 选取本地文件（全路径+文件名）${EXTERNAL_SRORAGE}&#x2F;rootfs.tar.xz</p><p>下载地址：<a href="https://mirrors.bfsu.edu.cn/lxc-images/images/ubuntu/focal/arm64/cloud/20240610_08%3A13/rootfs.tar.xz">https://mirrors.bfsu.edu.cn/lxc-images/images/ubuntu/focal/arm64/cloud/20240610_08%3A13/rootfs.tar.xz</a></p><p>可在右上角状态中查看系统架构，小米平板2选择amd64，Le2选择arm64</p></li><li><p>安装类型： 镜像</p></li><li><p>安装路径：${EXTERNAL_SRORAGE}&#x2F;Linux&#x2F;ubuntu.img</p></li><li><p>镜像大小： <strong>对应容器大小</strong>（10240M也能成功）</p><p>不要选择自动而是512M以上的值, 并且如果你是通过busybox安装的linux指令环境那么镜像文件大小也不能超过2G</p></li><li><p>文件类型: 选择 ext4 即可</p></li><li><p>用户名及密码自行设置即可(不要设置 root 用户即可)</p></li><li><p>本地化： zh_CN.UTF-8</p></li><li><p>挂载点： 即将手机目录挂在载安装的 linux 下某个目录, 看自己需求</p><p>例：&#x2F;storage&#x2F;emulated&#x2F;0:&#x2F;mnt&#x2F;sdcard&#x2F;</p></li><li><p>SSH： 由于 rootfs 文件里面一般没有 openssh-server, 因此安装时这里不勾选。等到完成后再通过内部通道安装 openssh-server 打开 ssh 服务</p></li><li><p>GUI： 安装阶段请勿勾选, 会失败, rootfs.tar 没有相关资源</p></li></ol><h2 id="4-安装"><a href="#4-安装" class="headerlink" title="4.安装"></a>4.安装</h2><ul><li><p>点击右上角安装</p><blockquote><p>若报错making file system（ext4）…fail，则是因为在安装路径已有镜像文件，删除后重新安装</p></blockquote></li></ul><h2 id="5-进入虚拟机环境"><a href="#5-进入虚拟机环境" class="headerlink" title="5.进入虚拟机环境"></a>5.进入虚拟机环境</h2><p>无SSH，通过其他方法进入虚拟机环境（三种可选）</p><ul><li><p>点击Linux Deploy左上角设置，打开Telnet选项，记住端口号，关闭仅本地主机可连</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">telnet &#123;ip地址&#125; 5023<br></code></pre></td></tr></table></figure></li><li><p>开启USB调试，使用adb进入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell<br></code></pre></td></tr></table></figure></li><li><p>安装软件JuiceSSH</p><p>安装链接：<a href="https://fga1.market.xiaomi.com/download/AppStore/057dfe47c57b04f8e0009b7d4c9bb08c5dea90066/com.sonelli.juicessh.apk">小米应用商店</a></p><p>新建连接，类型选择本地设备，点右上角对勾即可</p></li></ul><p>输入su回车，取得root超级权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su<br></code></pre></td></tr></table></figure><p>输入以下命令回车，进入安装的虚拟机内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/data/user/0/ru.meefik.linuxdeploy/files/bin/linuxdeploy shell -u root<br></code></pre></td></tr></table></figure><blockquote><p>此时可能报错：chroot: can’t execute ‘&#x2F;bin&#x2F;su’: No such file or directory</p><p>不知道为什么会报这个错，重启手机，不行就重装</p></blockquote><p>成功进入会出现[root@localhost#] 即表示登录进容器内。</p><h2 id="6-其他问题解决"><a href="#6-其他问题解决" class="headerlink" title="6.其他问题解决"></a>6.其他问题解决</h2><ol><li><p>修复DNS解析错误</p><p>删除&#x2F;etc&#x2F;resolv.conf, 重新创建一个&#x2F;etc&#x2F;resolv.conf文件, 建议把权限设置为755。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm /etc/resolv.conf<br>touch /etc/resolv.conf &amp;&amp; chmod 755 /etc/resolv.conf<br></code></pre></td></tr></table></figure><p>然后在软件页面先stop再使用前面进入容器, 再用vi命令查看<code>/etc/resolv.conf</code>文件内容是否与你的网关相匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/resolv.conf<br>cat /etc/resolv.conf<br></code></pre></td></tr></table></figure><p>最后, 使用ping baidu.com命令检查网络连接, 但是可能此时并不能进行软件下载和更新, 因为现在软件源时国外的源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping baidu.com<br></code></pre></td></tr></table></figure></li><li><p>修复apt安装错误</p><p>使用vi修改&#x2F;etc&#x2F;passwd中_apt的65535（65534）为3003。操作: 命令: <code>vi /etc/passwd</code>, 再输入<code>/_apt</code>再按<code>enter</code>, 再按<code>i键</code>, 修改65535（65534）为3003, 再按<code>ESC键</code>最后再按:<code>wq回车</code>保存即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/passwd<br></code></pre></td></tr></table></figure></li><li><p>更新软件源为国内源:</p><p>即修改<code>/etc/source.list</code>文件为国内网易, 阿里, 中科大等的镜像网站。可以试试百度修改debian(版本) 国内源, 然后<code>apt-get update</code>后面就是安装软件了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/source.list<br>apt-get update<br></code></pre></td></tr></table></figure><p>推荐北师大软件源：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">deb https://mirrors.bfsu.edu.cn/ubuntu/ focal main restricted universe multiverse<br>deb https://mirrors.bfsu.edu.cn/ubuntu/ focal-updates main restricted universe multiverse<br>deb https://mirrors.bfsu.edu.cn/ubuntu/ focal-backports main restricted universe multiverse<br>deb https://mirrors.bfsu.edu.cn/ubuntu/ focal-security main restricted universe multiverse<br></code></pre></td></tr></table></figure></li><li><p>安装SSH服务端</p><p>上面的工作完成后现在安装SSH服务端开启SSH服务即可, 输入<code>apt install openssh-server</code>, 然后在linux deploy软件容器配置里勾选SSH即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install openssh-server<br></code></pre></td></tr></table></figure></li><li><p>用户无法使用ping</p><p>root用户登录使用命令<code>usermod -G 3003 root</code>, 重启容器解决。新创建的用户只是将root改为新创建的用户名即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">usermod -G 3003 root<br></code></pre></td></tr></table></figure></li><li><p>root登录其他用户tab键失效</p><p>root账户登录终端输入<code>ln -sf /bin/bash /bin/sh</code>, 软链接bash和sh, 或者搜索 切换默认sh为bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -sf /bin/bash /bin/sh<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-ssh连接"><a href="#7-ssh连接" class="headerlink" title="7.ssh连接"></a>7.ssh连接</h2><ul><li><p>右下角启用SSH，默认22端口</p></li><li><p>右上角点击配置，重新配置文件</p></li><li><p>点击启动，看到ssh应该启动了</p></li></ul><blockquote><p>可能出现 Permissions 0644 for ‘&#x2F;Users&#x2F;…&#x2F;.ssh&#x2F;..’ are too open…（重装容器解决）</p></blockquote><h2 id="8-备份-rootfs"><a href="#8-备份-rootfs" class="headerlink" title="8.备份 rootfs"></a>8.备份 rootfs</h2><p>右上角导出，选择导出位置，等待完成即可</p><h2 id="9-解决chroot下无法使用systemctl"><a href="#9-解决chroot下无法使用systemctl" class="headerlink" title="9.解决chroot下无法使用systemctl"></a>9.解决chroot下无法使用systemctl</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/smaknsk/servicectl/archive/1.0.tar.gz<br>sudo tar -xf 1.0.tar.gz -C /usr/local/lib/<br>sudo ln -s /usr/local/lib/servicectl-1.0/servicectl /usr/bin/servicectl<br>sudo ln -s /usr/local/lib/servicectl-1.0/serviced /usr/bin/serviced<br></code></pre></td></tr></table></figure><h3 id="使用servicectl"><a href="#使用servicectl" class="headerlink" title="使用servicectl"></a>使用servicectl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo servicectl action service<br></code></pre></td></tr></table></figure><p>‎此命令仅执行文件 <code>/usr/lib/systemd/system/$&#123;service&#125;.service</code>中的<code>$&#123;action&#125;</code>， 如果通过的操作启用或禁用，则<code>servicectl</code>将在 <code>$&#123;service&#125;.service</code>上创建或删除<code>symlink</code>以供使用服务。‎</p><p>参数:</p><ul><li>action - 可以是 {<code>start</code>, <code>stop</code>, <code>restart</code>, <code>reload</code>, <code>enable</code>, <code>disable</code>}</li><li>service -在<code>/usr/lib/systemd/system/</code>文件夹中的文件</li></ul><h3 id="使用serviced"><a href="#使用serviced" class="headerlink" title="使用serviced"></a>使用serviced</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sudo serviced action<br></code></pre></td></tr></table></figure><p>‎此命令执行 <code>$&#123;action&#125;</code> 为所有启用服务。‎</p><p>参数:</p><ul><li>action -默认是<code>start</code>，也可以是： {<code>start</code>, <code>stop</code>, <code>restart</code>, <code>reload</code>, <code>disable</code>}</li></ul><h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># inside chroot</span><br>sudo servicectl <span class="hljs-built_in">enable</span> mariadb<br><br><span class="hljs-comment"># outside chroot: </span><br><span class="hljs-comment"># init startup and run all enabled daemons</span><br>sudo <span class="hljs-built_in">chroot</span> /path/to/chroot serviced<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LinuxDeploy </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本博客是如何搭建的</title>
      <link href="/posts/aa1a.html"/>
      <url>/posts/aa1a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个博客使用了<a href="https://hexo.io/zh-cn/index.html">Hexo</a> 博客框架+<a href="https://hexo.fluid-dev.com/">Fluid</a>主题+Markdown文档编写，托管在Github Pages服务上（后来迁到Cloudflare Pages）</p><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/514982831?utm_id=0">搭建个人博客 — Hexo+Markdown+Github Pages - 知乎 (zhihu.com)</a></p><h2 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h2><h3 id="1-环境准备和框架安装"><a href="#1-环境准备和框架安装" class="headerlink" title="1. 环境准备和框架安装"></a>1. 环境准备和框架安装</h3><ul><li><p><strong>安装Node.js</strong>：访问<a href="http://nodejs.org/">Node.js官网</a>下载安装，建议nodejs版本18以上。</p></li><li><p><strong>安装Git</strong>：从<a href="http://git-scm.com/">Git官网</a>获取安装包</p></li><li><p><strong>安装Hexo</strong>：通过npm安装Hexo框架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li></ul><blockquote><p><a href="https://hexo.io/zh-cn/index.html">Hexo</a> 是一款快速简洁高效的博客框架，可支持本地、远端服务器运行以及使用Github Page功能进行托管，是用于捣鼓自己的笔记和写文章发布的利器。Hexo是基于Node.js的服务，因此首先需要下载<a href="http://nodejs.org/">Node.js</a>, 以及<a href="http://git-scm.com/">Git</a>（用于后续拉取文件）。之后的过程，可完全根据<a href="https://hexo.io/zh-cn/docs/">Hexo官方建站文档</a>一步步完成。</p></blockquote><h3 id="2-建立博客项目"><a href="#2-建立博客项目" class="headerlink" title="2. 建立博客项目"></a>2. 建立博客项目</h3><h4 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h4><p>安装完毕hexo，此时可以选择一个空文件夹建立博客站点框架，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init &lt;folder&gt;<br>$ <span class="hljs-built_in">cd</span> &lt;folder&gt;<br>$ npm install<br></code></pre></td></tr></table></figure><p>生成的项目目录结构：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">.<br>├── _config.yml    # 站点配置文件<br>├── package.json<br>├── scaffolds      # 模板文件夹<br>├── source         # 资源文件夹<br>│   ├── _drafts<br>│   └── _posts<br>└── themes         # 主题文件夹<br></code></pre></td></tr></table></figure><p>其中，有几个文件极为重要：</p><ul><li><code>_config.yml</code> 该文件为网站配置信息，包括网站标题、作者、时间、语言、主题等重要配置和功能。</li><li><code>source/_posts/*.md</code><br><code>source</code> 文件夹为博文的资源文件夹，其中的<code>_posts</code>文件夹储存了<code>markdown</code>文件为网站博文。</li><li><code>themes</code> 文件夹储存了第三方主题。</li></ul><h4 id="建立第一个博文"><a href="#建立第一个博文" class="headerlink" title="建立第一个博文"></a>建立第一个博文</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ hexo new &quot;welcome&quot;<br></code></pre></td></tr></table></figure><p>此时 <code>/source/_posts</code> 文件夹中建立了 <code>welcome.md</code> 文件。</p><h4 id="本地运行与测试"><a href="#本地运行与测试" class="headerlink" title="本地运行与测试"></a>本地运行与测试</h4><p>接着运行命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ hexo server<br></code></pre></td></tr></table></figure><p>可以访问 <code>http://localhost:4000</code> 查看效果。</p><h2 id="GitHub-Pages部署"><a href="#GitHub-Pages部署" class="headerlink" title="GitHub Pages部署"></a>GitHub Pages部署</h2><h3 id="1-建立代码仓库"><a href="#1-建立代码仓库" class="headerlink" title="1. 建立代码仓库"></a>1. 建立代码仓库</h3><p>首先在github账号下建立名为<del>&lt;github 用户名&gt;.github.io</del>（如果需要使用github提供的域名）的仓库（这将是之后的访问网址），可以使用readme.md进行初始化。</p><div class="note note-success">            <p>如果使用自定义域名，可以使用其他仓库名</p><p>找到 <strong>hexo</strong> 博客根目录下的 <strong>source</strong> 文件夹新建一个名为 CNAME的文件，内容为你的域名</p>          </div><h3 id="2-配置SSH密钥"><a href="#2-配置SSH密钥" class="headerlink" title="2. 配置SSH密钥"></a>2. 配置SSH密钥</h3><p>之后设置ssh登录。在cmd命令行中输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;<br></code></pre></td></tr></table></figure><p>直接三个回车，不需要密码。这时在 <code>C:/Users/&lt;用户名&gt;/.ssh</code> 文件夹下会建立公钥 <code>id_rsa.pub</code> 文件，将<code>id_rsa.pub</code> 文件中内容全部复制。打开<a href="https://github.com/settings/keys">Github Settings keys</a> 页面，新建new SSH key，填写任意title（hexo blog）和刚才复制的公钥信息，并Add SSH key。</p><p>此时打开Git Bash，输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ ssh git@github.com<br></code></pre></td></tr></table></figure><p>验证ssh是否设置成功。</p><h3 id="3-修改博客部署配置"><a href="#3-修改博客部署配置" class="headerlink" title="3. 修改博客部署配置"></a>3. 修改博客部署配置</h3><p>这时回到博客文件夹，在 <code>_config.yml</code> 文件中修改deploy块的信息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">deploy:<br>  type: git<br>  repo: git@github.com:&#123;github用户名&#125;/&#123;仓库名&#125;.git<br>  branch: main<br></code></pre></td></tr></table></figure><h3 id="4-安装部署插件并发布"><a href="#4-安装部署插件并发布" class="headerlink" title="4. 安装部署插件并发布"></a>4. 安装部署插件并发布</h3><p>在博客文件夹下打开命令行，安装Git部署插件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>最后部署整个博客：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">$ hexo clean<br>$ hexo generate<br>$ hexo deploy<br></code></pre></td></tr></table></figure><p>此时主目录下出现</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">.deploy_git<br></code></pre></td></tr></table></figure><p>文件夹，该文件夹与github仓库中的文件一致，是生成的静态网页文件。此时访问 <code>&#123;Github用户名&#125;.github.io</code> 即可打开博客网页。</p><h2 id="主题配置与个性化"><a href="#主题配置与个性化" class="headerlink" title="主题配置与个性化"></a>主题配置与个性化</h2><h3 id="1-安装Fluid主题"><a href="#1-安装Fluid主题" class="headerlink" title="1. 安装Fluid主题"></a>1. 安装Fluid主题</h3><blockquote><p>官方教程: <a href="https://github.com/fluid-dev/hexo-theme-fluid"> :ocean: 一款 Material Design 风格的 Hexo 主题</a></p></blockquote><p>本博客使用第三方Fluid主题，简洁美观。使用第三方主题的基本方法是先下载对应主题（可在Hexo<a href="https://hexo.io/themes/">主题</a>网站上找到），将其放入<code>themes</code> 文件夹，之后在<code>_config.yml</code> 文件中的 <code>theme</code> 块更改名字为对应主题。</p><p>或者使用npm安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><h3 id="2-主题配置要点"><a href="#2-主题配置要点" class="headerlink" title="2. 主题配置要点"></a>2. 主题配置要点</h3><ul><li>修改<code>_config.yml</code>中的<code>theme</code>值为<code>fluid</code></li><li>主题配置文件位于<code>config.fluid.yml</code></li><li>可配置项包括（具体可以参考<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%AF%84%E8%AE%BA">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a>）：<ul><li>网站logo</li><li>导航菜单</li><li>社交链接</li><li>代码高亮样式</li><li>文章打赏功能</li></ul></li></ul><div class="note note-info">            <p>“<strong>站点配置</strong>“ 指的 Hexo 博客目录下的 <code>_config.yml</code></p><p>“<strong>主题配置</strong>“ 指的是 <code>_config.fluid.yml</code>（高优先级）或者<code>theme/fluid/_config.yml</code> </p><p><code>source</code> 目录都指的是博客目录下的 <code>source</code> 文件夹，不推荐修改主题内 <code>source</code> 目录</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 相关教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次U盘病毒解决日志</title>
      <link href="/posts/7032.html"/>
      <url>/posts/7032.html</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/weixin_45437033/article/details/135454509">U盘病毒（类removeable disk病毒）_kaspersky文件夹usb drive-CSDN博客</a></p><h2 id="病毒来源猜测"><a href="#病毒来源猜测" class="headerlink" title="病毒来源猜测"></a>病毒来源猜测</h2><p>学校打印店（正值毕业论文打印高峰）</p><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><ul><li>U盘内所有文件消失，主目录存在一个与U盘同名的exe文件，为<code>Usb Disk（内存）.exe</code></li><li>和<a href="https://www.zhihu.com/question/324277980/answer/1749772992?ivk_sa=1024320u">removeable disk</a>.病毒有点类似的病毒，但又有所不同，特此记录。</li><li>双击exe可以打开文件，但同时也会植入病毒程序到电脑系统，导致插入新U盘也会被感染</li></ul><h2 id="杀毒过程"><a href="#杀毒过程" class="headerlink" title="杀毒过程"></a>杀毒过程</h2><ul><li><p>Windows Defender和McAfee根本不报毒！</p><p>但是电脑被感染时，病毒将程序注入敏感文件夹<code>C:\Users\Public\</code>被记录</p></li><li><p>根据记录找到了病毒植入位置 例：（C:\Users\Public\GBPCJKKZY）</p></li><li><p>任务管理器中关闭病毒进程（Permission.exe，Transfer.exe）</p></li><li><p>删除病毒文件（C:\Users\Public\GBPCJKKZY）</p></li><li><p>清理注册表，搜索<code>C:\Users\Public\GBPCJKKZY</code>，找到以下注册表值</p><p>路径：计算机\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</p></li><li><p>将U盘接入安卓手机或Linux系统，可以找到丢失的文件（只是被隐藏），以及病毒文件</p></li></ul><h2 id="文件分享"><a href="#文件分享" class="headerlink" title="文件分享"></a>文件分享</h2><p>蓝奏云：<a href="https://www.lanzoub.com/inkX722bizpe">https://www.lanzoub.com/inkX722bizpe</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常杂谈 </category>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 病毒 </tag>
            
            <tag> U盘 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
